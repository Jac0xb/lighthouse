/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { LIGHTHOUSE_PROGRAM_ADDRESS } from '../programs';

/** InvalidInstructionData: Invalid instruction */
export const LIGHTHOUSE_ERROR__INVALID_INSTRUCTION_DATA = 0x1770; // 6000
/** AssertionFailed: AssertionFailed */
export const LIGHTHOUSE_ERROR__ASSERTION_FAILED = 0x1771; // 6001
/** NotEnoughAccounts: NotEnoughAccounts */
export const LIGHTHOUSE_ERROR__NOT_ENOUGH_ACCOUNTS = 0x1772; // 6002
/** BumpNotFound: BumpNotFound */
export const LIGHTHOUSE_ERROR__BUMP_NOT_FOUND = 0x1773; // 6003
/** AccountBorrowFailed: AccountBorrowFailed */
export const LIGHTHOUSE_ERROR__ACCOUNT_BORROW_FAILED = 0x1774; // 6004
/** RangeOutOfBounds: RangeOutOfBounds */
export const LIGHTHOUSE_ERROR__RANGE_OUT_OF_BOUNDS = 0x1775; // 6005
/** IndexOutOfBounds: IndexOutOfBounds */
export const LIGHTHOUSE_ERROR__INDEX_OUT_OF_BOUNDS = 0x1776; // 6006
/** FailedToDeserialize: FailedToDeserialize */
export const LIGHTHOUSE_ERROR__FAILED_TO_DESERIALIZE = 0x1777; // 6007
/** FailedToSerialize: FailedToSerialize */
export const LIGHTHOUSE_ERROR__FAILED_TO_SERIALIZE = 0x1778; // 6008
/** AccountOwnerMismatch: AccountOwnerMismatch */
export const LIGHTHOUSE_ERROR__ACCOUNT_OWNER_MISMATCH = 0x1779; // 6009
/** AccountKeyMismatch: AccountKeyMismatch */
export const LIGHTHOUSE_ERROR__ACCOUNT_KEY_MISMATCH = 0x177a; // 6010
/** AccountNotInitialized: AccountNotInitialized */
export const LIGHTHOUSE_ERROR__ACCOUNT_NOT_INITIALIZED = 0x177b; // 6011
/** AccountOwnerValidationFailed: AccountOwnerValidationFailed */
export const LIGHTHOUSE_ERROR__ACCOUNT_OWNER_VALIDATION_FAILED = 0x177c; // 6012
/** AccountFundedValidationFailed: AccountFundedValidationFailed */
export const LIGHTHOUSE_ERROR__ACCOUNT_FUNDED_VALIDATION_FAILED = 0x177d; // 6013
/** AccountDiscriminatorValidationFailed: AccountDiscriminatorValidationFailed */
export const LIGHTHOUSE_ERROR__ACCOUNT_DISCRIMINATOR_VALIDATION_FAILED = 0x177e; // 6014
/** AccountValidationFailed: AccountValidaitonFailed */
export const LIGHTHOUSE_ERROR__ACCOUNT_VALIDATION_FAILED = 0x177f; // 6015
/** CrossProgramInvokeViolation: CrossProgramInvokeViolation */
export const LIGHTHOUSE_ERROR__CROSS_PROGRAM_INVOKE_VIOLATION = 0x1780; // 6016

export type LighthouseError =
  | typeof LIGHTHOUSE_ERROR__ACCOUNT_BORROW_FAILED
  | typeof LIGHTHOUSE_ERROR__ACCOUNT_DISCRIMINATOR_VALIDATION_FAILED
  | typeof LIGHTHOUSE_ERROR__ACCOUNT_FUNDED_VALIDATION_FAILED
  | typeof LIGHTHOUSE_ERROR__ACCOUNT_KEY_MISMATCH
  | typeof LIGHTHOUSE_ERROR__ACCOUNT_NOT_INITIALIZED
  | typeof LIGHTHOUSE_ERROR__ACCOUNT_OWNER_MISMATCH
  | typeof LIGHTHOUSE_ERROR__ACCOUNT_OWNER_VALIDATION_FAILED
  | typeof LIGHTHOUSE_ERROR__ACCOUNT_VALIDATION_FAILED
  | typeof LIGHTHOUSE_ERROR__ASSERTION_FAILED
  | typeof LIGHTHOUSE_ERROR__BUMP_NOT_FOUND
  | typeof LIGHTHOUSE_ERROR__CROSS_PROGRAM_INVOKE_VIOLATION
  | typeof LIGHTHOUSE_ERROR__FAILED_TO_DESERIALIZE
  | typeof LIGHTHOUSE_ERROR__FAILED_TO_SERIALIZE
  | typeof LIGHTHOUSE_ERROR__INDEX_OUT_OF_BOUNDS
  | typeof LIGHTHOUSE_ERROR__INVALID_INSTRUCTION_DATA
  | typeof LIGHTHOUSE_ERROR__NOT_ENOUGH_ACCOUNTS
  | typeof LIGHTHOUSE_ERROR__RANGE_OUT_OF_BOUNDS;

let lighthouseErrorMessages: Record<LighthouseError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  lighthouseErrorMessages = {
    [LIGHTHOUSE_ERROR__ACCOUNT_BORROW_FAILED]: `AccountBorrowFailed`,
    [LIGHTHOUSE_ERROR__ACCOUNT_DISCRIMINATOR_VALIDATION_FAILED]: `AccountDiscriminatorValidationFailed`,
    [LIGHTHOUSE_ERROR__ACCOUNT_FUNDED_VALIDATION_FAILED]: `AccountFundedValidationFailed`,
    [LIGHTHOUSE_ERROR__ACCOUNT_KEY_MISMATCH]: `AccountKeyMismatch`,
    [LIGHTHOUSE_ERROR__ACCOUNT_NOT_INITIALIZED]: `AccountNotInitialized`,
    [LIGHTHOUSE_ERROR__ACCOUNT_OWNER_MISMATCH]: `AccountOwnerMismatch`,
    [LIGHTHOUSE_ERROR__ACCOUNT_OWNER_VALIDATION_FAILED]: `AccountOwnerValidationFailed`,
    [LIGHTHOUSE_ERROR__ACCOUNT_VALIDATION_FAILED]: `AccountValidaitonFailed`,
    [LIGHTHOUSE_ERROR__ASSERTION_FAILED]: `AssertionFailed`,
    [LIGHTHOUSE_ERROR__BUMP_NOT_FOUND]: `BumpNotFound`,
    [LIGHTHOUSE_ERROR__CROSS_PROGRAM_INVOKE_VIOLATION]: `CrossProgramInvokeViolation`,
    [LIGHTHOUSE_ERROR__FAILED_TO_DESERIALIZE]: `FailedToDeserialize`,
    [LIGHTHOUSE_ERROR__FAILED_TO_SERIALIZE]: `FailedToSerialize`,
    [LIGHTHOUSE_ERROR__INDEX_OUT_OF_BOUNDS]: `IndexOutOfBounds`,
    [LIGHTHOUSE_ERROR__INVALID_INSTRUCTION_DATA]: `Invalid instruction`,
    [LIGHTHOUSE_ERROR__NOT_ENOUGH_ACCOUNTS]: `NotEnoughAccounts`,
    [LIGHTHOUSE_ERROR__RANGE_OUT_OF_BOUNDS]: `RangeOutOfBounds`,
  };
}

export function getLighthouseErrorMessage(code: LighthouseError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (lighthouseErrorMessages as Record<LighthouseError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isLighthouseError<TProgramErrorCode extends LighthouseError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    LIGHTHOUSE_PROGRAM_ADDRESS,
    code
  );
}
