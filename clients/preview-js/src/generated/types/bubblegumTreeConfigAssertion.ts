/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  IntegerOperator,
  IntegerOperatorArgs,
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
  getIntegerOperatorDecoder,
  getIntegerOperatorEncoder,
} from '.';

export type BubblegumTreeConfigAssertion =
  | { __kind: 'TreeCreator'; value: Address; operator: EquatableOperator }
  | { __kind: 'TreeDelegate'; value: Address; operator: EquatableOperator }
  | { __kind: 'TotalMintCapacity'; value: bigint; operator: IntegerOperator }
  | { __kind: 'NumMinted'; value: bigint; operator: IntegerOperator }
  | { __kind: 'IsPublic'; value: boolean; operator: EquatableOperator }
  | { __kind: 'IsDecompressible'; value: number; operator: EquatableOperator };

export type BubblegumTreeConfigAssertionArgs =
  | { __kind: 'TreeCreator'; value: Address; operator: EquatableOperatorArgs }
  | { __kind: 'TreeDelegate'; value: Address; operator: EquatableOperatorArgs }
  | {
      __kind: 'TotalMintCapacity';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'NumMinted';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | { __kind: 'IsPublic'; value: boolean; operator: EquatableOperatorArgs }
  | {
      __kind: 'IsDecompressible';
      value: number;
      operator: EquatableOperatorArgs;
    };

export function getBubblegumTreeConfigAssertionEncoder(): Encoder<BubblegumTreeConfigAssertionArgs> {
  return getDataEnumEncoder([
    [
      'TreeCreator',
      getStructEncoder([
        ['value', getAddressEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'TreeDelegate',
      getStructEncoder([
        ['value', getAddressEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'TotalMintCapacity',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'NumMinted',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'IsPublic',
      getStructEncoder([
        ['value', getBooleanEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'IsDecompressible',
      getStructEncoder([
        ['value', getU8Encoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
  ]);
}

export function getBubblegumTreeConfigAssertionDecoder(): Decoder<BubblegumTreeConfigAssertion> {
  return getDataEnumDecoder([
    [
      'TreeCreator',
      getStructDecoder([
        ['value', getAddressDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'TreeDelegate',
      getStructDecoder([
        ['value', getAddressDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'TotalMintCapacity',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'NumMinted',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'IsPublic',
      getStructDecoder([
        ['value', getBooleanDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'IsDecompressible',
      getStructDecoder([
        ['value', getU8Decoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
  ]);
}

export function getBubblegumTreeConfigAssertionCodec(): Codec<
  BubblegumTreeConfigAssertionArgs,
  BubblegumTreeConfigAssertion
> {
  return combineCodec(
    getBubblegumTreeConfigAssertionEncoder(),
    getBubblegumTreeConfigAssertionDecoder()
  );
}

// Data Enum Helpers.
export function bubblegumTreeConfigAssertion(
  kind: 'TreeCreator',
  data: GetDataEnumKindContent<BubblegumTreeConfigAssertionArgs, 'TreeCreator'>
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'TreeCreator'>;
export function bubblegumTreeConfigAssertion(
  kind: 'TreeDelegate',
  data: GetDataEnumKindContent<BubblegumTreeConfigAssertionArgs, 'TreeDelegate'>
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'TreeDelegate'>;
export function bubblegumTreeConfigAssertion(
  kind: 'TotalMintCapacity',
  data: GetDataEnumKindContent<
    BubblegumTreeConfigAssertionArgs,
    'TotalMintCapacity'
  >
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'TotalMintCapacity'>;
export function bubblegumTreeConfigAssertion(
  kind: 'NumMinted',
  data: GetDataEnumKindContent<BubblegumTreeConfigAssertionArgs, 'NumMinted'>
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'NumMinted'>;
export function bubblegumTreeConfigAssertion(
  kind: 'IsPublic',
  data: GetDataEnumKindContent<BubblegumTreeConfigAssertionArgs, 'IsPublic'>
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'IsPublic'>;
export function bubblegumTreeConfigAssertion(
  kind: 'IsDecompressible',
  data: GetDataEnumKindContent<
    BubblegumTreeConfigAssertionArgs,
    'IsDecompressible'
  >
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'IsDecompressible'>;
export function bubblegumTreeConfigAssertion<
  K extends BubblegumTreeConfigAssertionArgs['__kind']
>(
  kind: K,
  data?: any
): Extract<BubblegumTreeConfigAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isBubblegumTreeConfigAssertion<
  K extends BubblegumTreeConfigAssertion['__kind']
>(
  kind: K,
  value: BubblegumTreeConfigAssertion
): value is BubblegumTreeConfigAssertion & { __kind: K } {
  return value.__kind === kind;
}
