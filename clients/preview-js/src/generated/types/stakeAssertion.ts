/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/web3.js';
import {
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
  getIntegerOperatorDecoder,
  getIntegerOperatorEncoder,
  type EquatableOperator,
  type EquatableOperatorArgs,
  type IntegerOperator,
  type IntegerOperatorArgs,
} from '.';

export type StakeAssertion =
  | {
      __kind: 'DelegationVoterPubkey';
      value: Address;
      operator: EquatableOperator;
    }
  | { __kind: 'DelegationStake'; value: bigint; operator: IntegerOperator }
  | {
      __kind: 'DelegationActivationEpoch';
      value: bigint;
      operator: IntegerOperator;
    }
  | {
      __kind: 'DelegationDeactivationEpoch';
      value: bigint;
      operator: IntegerOperator;
    }
  | { __kind: 'CreditsObserved'; value: bigint; operator: IntegerOperator };

export type StakeAssertionArgs =
  | {
      __kind: 'DelegationVoterPubkey';
      value: Address;
      operator: EquatableOperatorArgs;
    }
  | {
      __kind: 'DelegationStake';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'DelegationActivationEpoch';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'DelegationDeactivationEpoch';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'CreditsObserved';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    };

export function getStakeAssertionEncoder(): Encoder<StakeAssertionArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'DelegationVoterPubkey',
      getStructEncoder([
        ['value', getAddressEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'DelegationStake',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'DelegationActivationEpoch',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'DelegationDeactivationEpoch',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'CreditsObserved',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
  ]);
}

export function getStakeAssertionDecoder(): Decoder<StakeAssertion> {
  return getDiscriminatedUnionDecoder([
    [
      'DelegationVoterPubkey',
      getStructDecoder([
        ['value', getAddressDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'DelegationStake',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'DelegationActivationEpoch',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'DelegationDeactivationEpoch',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'CreditsObserved',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
  ]);
}

export function getStakeAssertionCodec(): Codec<
  StakeAssertionArgs,
  StakeAssertion
> {
  return combineCodec(getStakeAssertionEncoder(), getStakeAssertionDecoder());
}

// Data Enum Helpers.
export function stakeAssertion(
  kind: 'DelegationVoterPubkey',
  data: GetDiscriminatedUnionVariantContent<
    StakeAssertionArgs,
    '__kind',
    'DelegationVoterPubkey'
  >
): GetDiscriminatedUnionVariant<
  StakeAssertionArgs,
  '__kind',
  'DelegationVoterPubkey'
>;
export function stakeAssertion(
  kind: 'DelegationStake',
  data: GetDiscriminatedUnionVariantContent<
    StakeAssertionArgs,
    '__kind',
    'DelegationStake'
  >
): GetDiscriminatedUnionVariant<
  StakeAssertionArgs,
  '__kind',
  'DelegationStake'
>;
export function stakeAssertion(
  kind: 'DelegationActivationEpoch',
  data: GetDiscriminatedUnionVariantContent<
    StakeAssertionArgs,
    '__kind',
    'DelegationActivationEpoch'
  >
): GetDiscriminatedUnionVariant<
  StakeAssertionArgs,
  '__kind',
  'DelegationActivationEpoch'
>;
export function stakeAssertion(
  kind: 'DelegationDeactivationEpoch',
  data: GetDiscriminatedUnionVariantContent<
    StakeAssertionArgs,
    '__kind',
    'DelegationDeactivationEpoch'
  >
): GetDiscriminatedUnionVariant<
  StakeAssertionArgs,
  '__kind',
  'DelegationDeactivationEpoch'
>;
export function stakeAssertion(
  kind: 'CreditsObserved',
  data: GetDiscriminatedUnionVariantContent<
    StakeAssertionArgs,
    '__kind',
    'CreditsObserved'
  >
): GetDiscriminatedUnionVariant<
  StakeAssertionArgs,
  '__kind',
  'CreditsObserved'
>;
export function stakeAssertion<K extends StakeAssertionArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isStakeAssertion<K extends StakeAssertion['__kind']>(
  kind: K,
  value: StakeAssertion
): value is StakeAssertion & { __kind: K } {
  return value.__kind === kind;
}
