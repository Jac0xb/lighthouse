/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  Option,
  OptionOrNullable,
  combineCodec,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  getUnitDecoder,
  getUnitEncoder,
} from '@solana/codecs';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  IntegerOperator,
  IntegerOperatorArgs,
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
  getIntegerOperatorDecoder,
  getIntegerOperatorEncoder,
} from '.';

export type TokenAccountAssertion =
  | { __kind: 'Mint'; value: Address; operator: EquatableOperator }
  | { __kind: 'Owner'; value: Address; operator: EquatableOperator }
  | { __kind: 'Amount'; value: bigint; operator: IntegerOperator }
  | { __kind: 'Delegate'; value: Option<Address>; operator: EquatableOperator }
  | { __kind: 'State'; value: number; operator: IntegerOperator }
  | { __kind: 'IsNative'; value: Option<bigint>; operator: EquatableOperator }
  | { __kind: 'DelegatedAmount'; value: bigint; operator: IntegerOperator }
  | {
      __kind: 'CloseAuthority';
      value: Option<Address>;
      operator: EquatableOperator;
    }
  | { __kind: 'TokenAccountOwnerIsDerived' };

export type TokenAccountAssertionArgs =
  | { __kind: 'Mint'; value: Address; operator: EquatableOperatorArgs }
  | { __kind: 'Owner'; value: Address; operator: EquatableOperatorArgs }
  | { __kind: 'Amount'; value: number | bigint; operator: IntegerOperatorArgs }
  | {
      __kind: 'Delegate';
      value: OptionOrNullable<Address>;
      operator: EquatableOperatorArgs;
    }
  | { __kind: 'State'; value: number; operator: IntegerOperatorArgs }
  | {
      __kind: 'IsNative';
      value: OptionOrNullable<number | bigint>;
      operator: EquatableOperatorArgs;
    }
  | {
      __kind: 'DelegatedAmount';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'CloseAuthority';
      value: OptionOrNullable<Address>;
      operator: EquatableOperatorArgs;
    }
  | { __kind: 'TokenAccountOwnerIsDerived' };

export function getTokenAccountAssertionEncoder(): Encoder<TokenAccountAssertionArgs> {
  return getDataEnumEncoder([
    [
      'Mint',
      getStructEncoder([
        ['value', getAddressEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'Owner',
      getStructEncoder([
        ['value', getAddressEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'Amount',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'Delegate',
      getStructEncoder([
        ['value', getOptionEncoder(getAddressEncoder())],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'State',
      getStructEncoder([
        ['value', getU8Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'IsNative',
      getStructEncoder([
        ['value', getOptionEncoder(getU64Encoder())],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'DelegatedAmount',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'CloseAuthority',
      getStructEncoder([
        ['value', getOptionEncoder(getAddressEncoder())],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    ['TokenAccountOwnerIsDerived', getUnitEncoder()],
  ]);
}

export function getTokenAccountAssertionDecoder(): Decoder<TokenAccountAssertion> {
  return getDataEnumDecoder([
    [
      'Mint',
      getStructDecoder([
        ['value', getAddressDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'Owner',
      getStructDecoder([
        ['value', getAddressDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'Amount',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'Delegate',
      getStructDecoder([
        ['value', getOptionDecoder(getAddressDecoder())],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'State',
      getStructDecoder([
        ['value', getU8Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'IsNative',
      getStructDecoder([
        ['value', getOptionDecoder(getU64Decoder())],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'DelegatedAmount',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'CloseAuthority',
      getStructDecoder([
        ['value', getOptionDecoder(getAddressDecoder())],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    ['TokenAccountOwnerIsDerived', getUnitDecoder()],
  ]);
}

export function getTokenAccountAssertionCodec(): Codec<
  TokenAccountAssertionArgs,
  TokenAccountAssertion
> {
  return combineCodec(
    getTokenAccountAssertionEncoder(),
    getTokenAccountAssertionDecoder()
  );
}

// Data Enum Helpers.
export function tokenAccountAssertion(
  kind: 'Mint',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Mint'>
): GetDataEnumKind<TokenAccountAssertionArgs, 'Mint'>;
export function tokenAccountAssertion(
  kind: 'Owner',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Owner'>
): GetDataEnumKind<TokenAccountAssertionArgs, 'Owner'>;
export function tokenAccountAssertion(
  kind: 'Amount',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Amount'>
): GetDataEnumKind<TokenAccountAssertionArgs, 'Amount'>;
export function tokenAccountAssertion(
  kind: 'Delegate',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Delegate'>
): GetDataEnumKind<TokenAccountAssertionArgs, 'Delegate'>;
export function tokenAccountAssertion(
  kind: 'State',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'State'>
): GetDataEnumKind<TokenAccountAssertionArgs, 'State'>;
export function tokenAccountAssertion(
  kind: 'IsNative',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'IsNative'>
): GetDataEnumKind<TokenAccountAssertionArgs, 'IsNative'>;
export function tokenAccountAssertion(
  kind: 'DelegatedAmount',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'DelegatedAmount'>
): GetDataEnumKind<TokenAccountAssertionArgs, 'DelegatedAmount'>;
export function tokenAccountAssertion(
  kind: 'CloseAuthority',
  data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'CloseAuthority'>
): GetDataEnumKind<TokenAccountAssertionArgs, 'CloseAuthority'>;
export function tokenAccountAssertion(
  kind: 'TokenAccountOwnerIsDerived'
): GetDataEnumKind<TokenAccountAssertionArgs, 'TokenAccountOwnerIsDerived'>;
export function tokenAccountAssertion<
  K extends TokenAccountAssertionArgs['__kind']
>(kind: K, data?: any): Extract<TokenAccountAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isTokenAccountAssertion<
  K extends TokenAccountAssertion['__kind']
>(
  kind: K,
  value: TokenAccountAssertion
): value is TokenAccountAssertion & { __kind: K } {
  return value.__kind === kind;
}
