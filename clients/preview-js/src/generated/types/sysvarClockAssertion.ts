/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  combineCodec,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/codecs';
import {
  IntegerOperator,
  IntegerOperatorArgs,
  getIntegerOperatorDecoder,
  getIntegerOperatorEncoder,
} from '.';

export type SysvarClockAssertion =
  | { __kind: 'Slot'; value: bigint; operator: IntegerOperator }
  | { __kind: 'EpochStartTimestamp'; value: bigint; operator: IntegerOperator }
  | { __kind: 'Epoch'; value: bigint; operator: IntegerOperator }
  | { __kind: 'LeaderScheduleEpoch'; value: bigint; operator: IntegerOperator }
  | { __kind: 'UnixTimestamp'; value: bigint; operator: IntegerOperator };

export type SysvarClockAssertionArgs =
  | { __kind: 'Slot'; value: number | bigint; operator: IntegerOperatorArgs }
  | {
      __kind: 'EpochStartTimestamp';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | { __kind: 'Epoch'; value: number | bigint; operator: IntegerOperatorArgs }
  | {
      __kind: 'LeaderScheduleEpoch';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'UnixTimestamp';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    };

export function getSysvarClockAssertionEncoder(): Encoder<SysvarClockAssertionArgs> {
  return getDataEnumEncoder([
    [
      'Slot',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'EpochStartTimestamp',
      getStructEncoder([
        ['value', getI64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'Epoch',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'LeaderScheduleEpoch',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'UnixTimestamp',
      getStructEncoder([
        ['value', getI64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
  ]);
}

export function getSysvarClockAssertionDecoder(): Decoder<SysvarClockAssertion> {
  return getDataEnumDecoder([
    [
      'Slot',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'EpochStartTimestamp',
      getStructDecoder([
        ['value', getI64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'Epoch',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'LeaderScheduleEpoch',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'UnixTimestamp',
      getStructDecoder([
        ['value', getI64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
  ]);
}

export function getSysvarClockAssertionCodec(): Codec<
  SysvarClockAssertionArgs,
  SysvarClockAssertion
> {
  return combineCodec(
    getSysvarClockAssertionEncoder(),
    getSysvarClockAssertionDecoder()
  );
}

// Data Enum Helpers.
export function sysvarClockAssertion(
  kind: 'Slot',
  data: GetDataEnumKindContent<SysvarClockAssertionArgs, 'Slot'>
): GetDataEnumKind<SysvarClockAssertionArgs, 'Slot'>;
export function sysvarClockAssertion(
  kind: 'EpochStartTimestamp',
  data: GetDataEnumKindContent<SysvarClockAssertionArgs, 'EpochStartTimestamp'>
): GetDataEnumKind<SysvarClockAssertionArgs, 'EpochStartTimestamp'>;
export function sysvarClockAssertion(
  kind: 'Epoch',
  data: GetDataEnumKindContent<SysvarClockAssertionArgs, 'Epoch'>
): GetDataEnumKind<SysvarClockAssertionArgs, 'Epoch'>;
export function sysvarClockAssertion(
  kind: 'LeaderScheduleEpoch',
  data: GetDataEnumKindContent<SysvarClockAssertionArgs, 'LeaderScheduleEpoch'>
): GetDataEnumKind<SysvarClockAssertionArgs, 'LeaderScheduleEpoch'>;
export function sysvarClockAssertion(
  kind: 'UnixTimestamp',
  data: GetDataEnumKindContent<SysvarClockAssertionArgs, 'UnixTimestamp'>
): GetDataEnumKind<SysvarClockAssertionArgs, 'UnixTimestamp'>;
export function sysvarClockAssertion<
  K extends SysvarClockAssertionArgs['__kind']
>(kind: K, data?: any): Extract<SysvarClockAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isSysvarClockAssertion<
  K extends SysvarClockAssertion['__kind']
>(
  kind: K,
  value: SysvarClockAssertion
): value is SysvarClockAssertion & { __kind: K } {
  return value.__kind === kind;
}
