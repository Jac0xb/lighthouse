/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getI128Decoder,
  getI128Encoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/web3.js';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  IntegerOperator,
  IntegerOperatorArgs,
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
  getIntegerOperatorDecoder,
  getIntegerOperatorEncoder,
} from '.';

export type AccountInfoDeltaAssertion =
  | { __kind: 'Lamports'; value: bigint; operator: IntegerOperator }
  | { __kind: 'DataLength'; value: bigint; operator: IntegerOperator }
  | { __kind: 'Owner'; operator: EquatableOperator }
  | { __kind: 'RentEpoch'; value: bigint; operator: IntegerOperator };

export type AccountInfoDeltaAssertionArgs =
  | {
      __kind: 'Lamports';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'DataLength';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | { __kind: 'Owner'; operator: EquatableOperatorArgs }
  | {
      __kind: 'RentEpoch';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    };

export function getAccountInfoDeltaAssertionEncoder(): Encoder<AccountInfoDeltaAssertionArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Lamports',
      getStructEncoder([
        ['value', getI128Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'DataLength',
      getStructEncoder([
        ['value', getI128Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    ['Owner', getStructEncoder([['operator', getEquatableOperatorEncoder()]])],
    [
      'RentEpoch',
      getStructEncoder([
        ['value', getI128Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
  ]);
}

export function getAccountInfoDeltaAssertionDecoder(): Decoder<AccountInfoDeltaAssertion> {
  return getDiscriminatedUnionDecoder([
    [
      'Lamports',
      getStructDecoder([
        ['value', getI128Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'DataLength',
      getStructDecoder([
        ['value', getI128Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    ['Owner', getStructDecoder([['operator', getEquatableOperatorDecoder()]])],
    [
      'RentEpoch',
      getStructDecoder([
        ['value', getI128Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
  ]);
}

export function getAccountInfoDeltaAssertionCodec(): Codec<
  AccountInfoDeltaAssertionArgs,
  AccountInfoDeltaAssertion
> {
  return combineCodec(
    getAccountInfoDeltaAssertionEncoder(),
    getAccountInfoDeltaAssertionDecoder()
  );
}

// Data Enum Helpers.
export function accountInfoDeltaAssertion(
  kind: 'Lamports',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoDeltaAssertionArgs,
    '__kind',
    'Lamports'
  >
): GetDiscriminatedUnionVariant<
  AccountInfoDeltaAssertionArgs,
  '__kind',
  'Lamports'
>;
export function accountInfoDeltaAssertion(
  kind: 'DataLength',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoDeltaAssertionArgs,
    '__kind',
    'DataLength'
  >
): GetDiscriminatedUnionVariant<
  AccountInfoDeltaAssertionArgs,
  '__kind',
  'DataLength'
>;
export function accountInfoDeltaAssertion(
  kind: 'Owner',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoDeltaAssertionArgs,
    '__kind',
    'Owner'
  >
): GetDiscriminatedUnionVariant<
  AccountInfoDeltaAssertionArgs,
  '__kind',
  'Owner'
>;
export function accountInfoDeltaAssertion(
  kind: 'RentEpoch',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoDeltaAssertionArgs,
    '__kind',
    'RentEpoch'
  >
): GetDiscriminatedUnionVariant<
  AccountInfoDeltaAssertionArgs,
  '__kind',
  'RentEpoch'
>;
export function accountInfoDeltaAssertion<
  K extends AccountInfoDeltaAssertionArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isAccountInfoDeltaAssertion<
  K extends AccountInfoDeltaAssertion['__kind'],
>(
  kind: K,
  value: AccountInfoDeltaAssertion
): value is AccountInfoDeltaAssertion & { __kind: K } {
  return value.__kind === kind;
}
