/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
  ReadonlyUint8Array,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/web3.js';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  KnownProgram,
  KnownProgramArgs,
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
  getKnownProgramDecoder,
  getKnownProgramEncoder,
} from '.';
import {
  CompactU64,
  CompactU64Args,
  IntegerOperator,
  IntegerOperatorArgs,
  getCompactU64Decoder,
  getCompactU64Encoder,
  getIntegerOperatorDecoder,
  getIntegerOperatorEncoder,
} from '../../hooked';

export type AccountInfoAssertion =
  | { __kind: 'Lamports'; value: bigint; operator: IntegerOperator }
  | { __kind: 'DataLength'; value: bigint; operator: IntegerOperator }
  | { __kind: 'Owner'; value: Address; operator: EquatableOperator }
  | { __kind: 'KnownOwner'; value: KnownProgram; operator: EquatableOperator }
  | { __kind: 'RentEpoch'; value: bigint; operator: IntegerOperator }
  | { __kind: 'IsSigner'; value: boolean; operator: EquatableOperator }
  | { __kind: 'IsWritable'; value: boolean; operator: EquatableOperator }
  | { __kind: 'Executable'; value: boolean; operator: EquatableOperator }
  | {
      __kind: 'VerifyDatahash';
      expectedHash: ReadonlyUint8Array;
      start: CompactU64;
      length: CompactU64;
    };

export type AccountInfoAssertionArgs =
  | {
      __kind: 'Lamports';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'DataLength';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | { __kind: 'Owner'; value: Address; operator: EquatableOperatorArgs }
  | {
      __kind: 'KnownOwner';
      value: KnownProgramArgs;
      operator: EquatableOperatorArgs;
    }
  | {
      __kind: 'RentEpoch';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | { __kind: 'IsSigner'; value: boolean; operator: EquatableOperatorArgs }
  | { __kind: 'IsWritable'; value: boolean; operator: EquatableOperatorArgs }
  | { __kind: 'Executable'; value: boolean; operator: EquatableOperatorArgs }
  | {
      __kind: 'VerifyDatahash';
      expectedHash: ReadonlyUint8Array;
      start: CompactU64Args;
      length: CompactU64Args;
    };

export function getAccountInfoAssertionEncoder(): Encoder<AccountInfoAssertionArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Lamports',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'DataLength',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'Owner',
      getStructEncoder([
        ['value', getAddressEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'KnownOwner',
      getStructEncoder([
        ['value', getKnownProgramEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'RentEpoch',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'IsSigner',
      getStructEncoder([
        ['value', getBooleanEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'IsWritable',
      getStructEncoder([
        ['value', getBooleanEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'Executable',
      getStructEncoder([
        ['value', getBooleanEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'VerifyDatahash',
      getStructEncoder([
        ['expectedHash', fixEncoderSize(getBytesEncoder(), 32)],
        ['start', getCompactU64Encoder()],
        ['length', getCompactU64Encoder()],
      ]),
    ],
  ]);
}

export function getAccountInfoAssertionDecoder(): Decoder<AccountInfoAssertion> {
  return getDiscriminatedUnionDecoder([
    [
      'Lamports',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'DataLength',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'Owner',
      getStructDecoder([
        ['value', getAddressDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'KnownOwner',
      getStructDecoder([
        ['value', getKnownProgramDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'RentEpoch',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'IsSigner',
      getStructDecoder([
        ['value', getBooleanDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'IsWritable',
      getStructDecoder([
        ['value', getBooleanDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'Executable',
      getStructDecoder([
        ['value', getBooleanDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'VerifyDatahash',
      getStructDecoder([
        ['expectedHash', fixDecoderSize(getBytesDecoder(), 32)],
        ['start', getCompactU64Decoder()],
        ['length', getCompactU64Decoder()],
      ]),
    ],
  ]);
}

export function getAccountInfoAssertionCodec(): Codec<
  AccountInfoAssertionArgs,
  AccountInfoAssertion
> {
  return combineCodec(
    getAccountInfoAssertionEncoder(),
    getAccountInfoAssertionDecoder()
  );
}

// Data Enum Helpers.
export function accountInfoAssertion(
  kind: 'Lamports',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoAssertionArgs,
    '__kind',
    'Lamports'
  >
): GetDiscriminatedUnionVariant<AccountInfoAssertionArgs, '__kind', 'Lamports'>;
export function accountInfoAssertion(
  kind: 'DataLength',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoAssertionArgs,
    '__kind',
    'DataLength'
  >
): GetDiscriminatedUnionVariant<
  AccountInfoAssertionArgs,
  '__kind',
  'DataLength'
>;
export function accountInfoAssertion(
  kind: 'Owner',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoAssertionArgs,
    '__kind',
    'Owner'
  >
): GetDiscriminatedUnionVariant<AccountInfoAssertionArgs, '__kind', 'Owner'>;
export function accountInfoAssertion(
  kind: 'KnownOwner',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoAssertionArgs,
    '__kind',
    'KnownOwner'
  >
): GetDiscriminatedUnionVariant<
  AccountInfoAssertionArgs,
  '__kind',
  'KnownOwner'
>;
export function accountInfoAssertion(
  kind: 'RentEpoch',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoAssertionArgs,
    '__kind',
    'RentEpoch'
  >
): GetDiscriminatedUnionVariant<
  AccountInfoAssertionArgs,
  '__kind',
  'RentEpoch'
>;
export function accountInfoAssertion(
  kind: 'IsSigner',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoAssertionArgs,
    '__kind',
    'IsSigner'
  >
): GetDiscriminatedUnionVariant<AccountInfoAssertionArgs, '__kind', 'IsSigner'>;
export function accountInfoAssertion(
  kind: 'IsWritable',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoAssertionArgs,
    '__kind',
    'IsWritable'
  >
): GetDiscriminatedUnionVariant<
  AccountInfoAssertionArgs,
  '__kind',
  'IsWritable'
>;
export function accountInfoAssertion(
  kind: 'Executable',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoAssertionArgs,
    '__kind',
    'Executable'
  >
): GetDiscriminatedUnionVariant<
  AccountInfoAssertionArgs,
  '__kind',
  'Executable'
>;
export function accountInfoAssertion(
  kind: 'VerifyDatahash',
  data: GetDiscriminatedUnionVariantContent<
    AccountInfoAssertionArgs,
    '__kind',
    'VerifyDatahash'
  >
): GetDiscriminatedUnionVariant<
  AccountInfoAssertionArgs,
  '__kind',
  'VerifyDatahash'
>;
export function accountInfoAssertion<
  K extends AccountInfoAssertionArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isAccountInfoAssertion<
  K extends AccountInfoAssertion['__kind'],
>(
  kind: K,
  value: AccountInfoAssertion
): value is AccountInfoAssertion & { __kind: K } {
  return value.__kind === kind;
}
