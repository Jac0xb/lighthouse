/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
  type EquatableOperator,
  type EquatableOperatorArgs,
} from '.';

export type UpgradableBufferAssertion = {
  __kind: 'Authority';
  value: Option<Address>;
  operator: EquatableOperator;
};

export type UpgradableBufferAssertionArgs = {
  __kind: 'Authority';
  value: OptionOrNullable<Address>;
  operator: EquatableOperatorArgs;
};

export function getUpgradableBufferAssertionEncoder(): Encoder<UpgradableBufferAssertionArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Authority',
      getStructEncoder([
        ['value', getOptionEncoder(getAddressEncoder())],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
  ]);
}

export function getUpgradableBufferAssertionDecoder(): Decoder<UpgradableBufferAssertion> {
  return getDiscriminatedUnionDecoder([
    [
      'Authority',
      getStructDecoder([
        ['value', getOptionDecoder(getAddressDecoder())],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
  ]);
}

export function getUpgradableBufferAssertionCodec(): Codec<
  UpgradableBufferAssertionArgs,
  UpgradableBufferAssertion
> {
  return combineCodec(
    getUpgradableBufferAssertionEncoder(),
    getUpgradableBufferAssertionDecoder()
  );
}

// Data Enum Helpers.
export function upgradableBufferAssertion(
  kind: 'Authority',
  data: GetDiscriminatedUnionVariantContent<
    UpgradableBufferAssertionArgs,
    '__kind',
    'Authority'
  >
): GetDiscriminatedUnionVariant<
  UpgradableBufferAssertionArgs,
  '__kind',
  'Authority'
>;
export function upgradableBufferAssertion<
  K extends UpgradableBufferAssertionArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isUpgradableBufferAssertion<
  K extends UpgradableBufferAssertion['__kind'],
>(
  kind: K,
  value: UpgradableBufferAssertion
): value is UpgradableBufferAssertion & { __kind: K } {
  return value.__kind === kind;
}
