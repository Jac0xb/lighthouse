/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/web3.js';
import {
  getAccountInfoDeltaAssertionDecoder,
  getAccountInfoDeltaAssertionEncoder,
  getDataValueDeltaAssertionDecoder,
  getDataValueDeltaAssertionEncoder,
  type AccountInfoDeltaAssertion,
  type AccountInfoDeltaAssertionArgs,
  type DataValueDeltaAssertion,
  type DataValueDeltaAssertionArgs,
} from '.';
import {
  getCompactU64Decoder,
  getCompactU64Encoder,
  type CompactU64,
  type CompactU64Args,
} from '../../hooked';

export type AccountDeltaAssertion =
  | {
      __kind: 'AccountInfo';
      aOffset: CompactU64;
      assertion: AccountInfoDeltaAssertion;
    }
  | {
      __kind: 'Data';
      aOffset: CompactU64;
      bOffset: CompactU64;
      assertion: DataValueDeltaAssertion;
    };

export type AccountDeltaAssertionArgs =
  | {
      __kind: 'AccountInfo';
      aOffset: CompactU64Args;
      assertion: AccountInfoDeltaAssertionArgs;
    }
  | {
      __kind: 'Data';
      aOffset: CompactU64Args;
      bOffset: CompactU64Args;
      assertion: DataValueDeltaAssertionArgs;
    };

export function getAccountDeltaAssertionEncoder(): Encoder<AccountDeltaAssertionArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'AccountInfo',
      getStructEncoder([
        ['aOffset', getCompactU64Encoder()],
        ['assertion', getAccountInfoDeltaAssertionEncoder()],
      ]),
    ],
    [
      'Data',
      getStructEncoder([
        ['aOffset', getCompactU64Encoder()],
        ['bOffset', getCompactU64Encoder()],
        ['assertion', getDataValueDeltaAssertionEncoder()],
      ]),
    ],
  ]);
}

export function getAccountDeltaAssertionDecoder(): Decoder<AccountDeltaAssertion> {
  return getDiscriminatedUnionDecoder([
    [
      'AccountInfo',
      getStructDecoder([
        ['aOffset', getCompactU64Decoder()],
        ['assertion', getAccountInfoDeltaAssertionDecoder()],
      ]),
    ],
    [
      'Data',
      getStructDecoder([
        ['aOffset', getCompactU64Decoder()],
        ['bOffset', getCompactU64Decoder()],
        ['assertion', getDataValueDeltaAssertionDecoder()],
      ]),
    ],
  ]);
}

export function getAccountDeltaAssertionCodec(): Codec<
  AccountDeltaAssertionArgs,
  AccountDeltaAssertion
> {
  return combineCodec(
    getAccountDeltaAssertionEncoder(),
    getAccountDeltaAssertionDecoder()
  );
}

// Data Enum Helpers.
export function accountDeltaAssertion(
  kind: 'AccountInfo',
  data: GetDiscriminatedUnionVariantContent<
    AccountDeltaAssertionArgs,
    '__kind',
    'AccountInfo'
  >
): GetDiscriminatedUnionVariant<
  AccountDeltaAssertionArgs,
  '__kind',
  'AccountInfo'
>;
export function accountDeltaAssertion(
  kind: 'Data',
  data: GetDiscriminatedUnionVariantContent<
    AccountDeltaAssertionArgs,
    '__kind',
    'Data'
  >
): GetDiscriminatedUnionVariant<AccountDeltaAssertionArgs, '__kind', 'Data'>;
export function accountDeltaAssertion<
  K extends AccountDeltaAssertionArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isAccountDeltaAssertion<
  K extends AccountDeltaAssertion['__kind'],
>(
  kind: K,
  value: AccountDeltaAssertion
): value is AccountDeltaAssertion & { __kind: K } {
  return value.__kind === kind;
}
