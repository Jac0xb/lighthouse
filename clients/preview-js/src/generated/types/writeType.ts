/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDiscriminatedUnionVariant,
  GetDiscriminatedUnionVariantContent,
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU16Decoder,
  getU16Encoder,
} from '@solana/web3.js';
import {
  AccountInfoField,
  AccountInfoFieldArgs,
  ClockField,
  ClockFieldArgs,
  DataValue,
  DataValueArgs,
  getAccountInfoFieldDecoder,
  getAccountInfoFieldEncoder,
  getClockFieldDecoder,
  getClockFieldEncoder,
  getDataValueDecoder,
  getDataValueEncoder,
} from '.';

export type WriteType =
  | { __kind: 'AccountData'; offset: number; dataLength: number }
  | { __kind: 'AccountInfoField'; fields: readonly [AccountInfoField] }
  | { __kind: 'DataValue'; fields: readonly [DataValue] }
  | { __kind: 'Clock'; fields: readonly [ClockField] };

export type WriteTypeArgs =
  | { __kind: 'AccountData'; offset: number; dataLength: number }
  | { __kind: 'AccountInfoField'; fields: readonly [AccountInfoFieldArgs] }
  | { __kind: 'DataValue'; fields: readonly [DataValueArgs] }
  | { __kind: 'Clock'; fields: readonly [ClockFieldArgs] };

export function getWriteTypeEncoder(): Encoder<WriteTypeArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'AccountData',
      getStructEncoder([
        ['offset', getU16Encoder()],
        ['dataLength', getU16Encoder()],
      ]),
    ],
    [
      'AccountInfoField',
      getStructEncoder([
        ['fields', getTupleEncoder([getAccountInfoFieldEncoder()])],
      ]),
    ],
    [
      'DataValue',
      getStructEncoder([['fields', getTupleEncoder([getDataValueEncoder()])]]),
    ],
    [
      'Clock',
      getStructEncoder([['fields', getTupleEncoder([getClockFieldEncoder()])]]),
    ],
  ]);
}

export function getWriteTypeDecoder(): Decoder<WriteType> {
  return getDiscriminatedUnionDecoder([
    [
      'AccountData',
      getStructDecoder([
        ['offset', getU16Decoder()],
        ['dataLength', getU16Decoder()],
      ]),
    ],
    [
      'AccountInfoField',
      getStructDecoder([
        ['fields', getTupleDecoder([getAccountInfoFieldDecoder()])],
      ]),
    ],
    [
      'DataValue',
      getStructDecoder([['fields', getTupleDecoder([getDataValueDecoder()])]]),
    ],
    [
      'Clock',
      getStructDecoder([['fields', getTupleDecoder([getClockFieldDecoder()])]]),
    ],
  ]);
}

export function getWriteTypeCodec(): Codec<WriteTypeArgs, WriteType> {
  return combineCodec(getWriteTypeEncoder(), getWriteTypeDecoder());
}

// Data Enum Helpers.
export function writeType(
  kind: 'AccountData',
  data: GetDiscriminatedUnionVariantContent<
    WriteTypeArgs,
    '__kind',
    'AccountData'
  >
): GetDiscriminatedUnionVariant<WriteTypeArgs, '__kind', 'AccountData'>;
export function writeType(
  kind: 'AccountInfoField',
  data: GetDiscriminatedUnionVariantContent<
    WriteTypeArgs,
    '__kind',
    'AccountInfoField'
  >['fields']
): GetDiscriminatedUnionVariant<WriteTypeArgs, '__kind', 'AccountInfoField'>;
export function writeType(
  kind: 'DataValue',
  data: GetDiscriminatedUnionVariantContent<
    WriteTypeArgs,
    '__kind',
    'DataValue'
  >['fields']
): GetDiscriminatedUnionVariant<WriteTypeArgs, '__kind', 'DataValue'>;
export function writeType(
  kind: 'Clock',
  data: GetDiscriminatedUnionVariantContent<
    WriteTypeArgs,
    '__kind',
    'Clock'
  >['fields']
): GetDiscriminatedUnionVariant<WriteTypeArgs, '__kind', 'Clock'>;
export function writeType<K extends WriteTypeArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isWriteType<K extends WriteType['__kind']>(
  kind: K,
  value: WriteType
): value is WriteType & { __kind: K } {
  return value.__kind === kind;
}
