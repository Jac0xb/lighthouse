/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from '@solana/web3.js';
import {
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
  type EquatableOperator,
  type EquatableOperatorArgs,
} from '.';

export type UpgradeableProgramAssertion = {
  __kind: 'ProgramDataAddress';
  value: Address;
  operator: EquatableOperator;
};

export type UpgradeableProgramAssertionArgs = {
  __kind: 'ProgramDataAddress';
  value: Address;
  operator: EquatableOperatorArgs;
};

export function getUpgradeableProgramAssertionEncoder(): Encoder<UpgradeableProgramAssertionArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'ProgramDataAddress',
      getStructEncoder([
        ['value', getAddressEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
  ]);
}

export function getUpgradeableProgramAssertionDecoder(): Decoder<UpgradeableProgramAssertion> {
  return getDiscriminatedUnionDecoder([
    [
      'ProgramDataAddress',
      getStructDecoder([
        ['value', getAddressDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
  ]);
}

export function getUpgradeableProgramAssertionCodec(): Codec<
  UpgradeableProgramAssertionArgs,
  UpgradeableProgramAssertion
> {
  return combineCodec(
    getUpgradeableProgramAssertionEncoder(),
    getUpgradeableProgramAssertionDecoder()
  );
}

// Data Enum Helpers.
export function upgradeableProgramAssertion(
  kind: 'ProgramDataAddress',
  data: GetDiscriminatedUnionVariantContent<
    UpgradeableProgramAssertionArgs,
    '__kind',
    'ProgramDataAddress'
  >
): GetDiscriminatedUnionVariant<
  UpgradeableProgramAssertionArgs,
  '__kind',
  'ProgramDataAddress'
>;
export function upgradeableProgramAssertion<
  K extends UpgradeableProgramAssertionArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isUpgradeableProgramAssertion<
  K extends UpgradeableProgramAssertion['__kind'],
>(
  kind: K,
  value: UpgradeableProgramAssertion
): value is UpgradeableProgramAssertion & { __kind: K } {
  return value.__kind === kind;
}
