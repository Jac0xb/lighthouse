/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
} from '@solana/kit';
import { LIGHTHOUSE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  LogLevel,
  getAccountDeltaAssertionDecoder,
  getAccountDeltaAssertionEncoder,
  getLogLevelDecoder,
  getLogLevelEncoder,
  type AccountDeltaAssertion,
  type AccountDeltaAssertionArgs,
  type LogLevelArgs,
} from '../types';

export const ASSERT_ACCOUNT_DELTA_DISCRIMINATOR = 4;

export function getAssertAccountDeltaDiscriminatorBytes() {
  return getU8Encoder().encode(ASSERT_ACCOUNT_DELTA_DISCRIMINATOR);
}

export type AssertAccountDeltaInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountAccountA extends string | IAccountMeta<string> = string,
  TAccountAccountB extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAccountA extends string
        ? ReadonlyAccount<TAccountAccountA>
        : TAccountAccountA,
      TAccountAccountB extends string
        ? ReadonlyAccount<TAccountAccountB>
        : TAccountAccountB,
      ...TRemainingAccounts,
    ]
  >;

export type AssertAccountDeltaInstructionData = {
  discriminator: number;
  logLevel: LogLevel;
  assertion: AccountDeltaAssertion;
};

export type AssertAccountDeltaInstructionDataArgs = {
  logLevel?: LogLevelArgs;
  assertion: AccountDeltaAssertionArgs;
};

export function getAssertAccountDeltaInstructionDataEncoder(): Encoder<AssertAccountDeltaInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['logLevel', getLogLevelEncoder()],
      ['assertion', getAccountDeltaAssertionEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ASSERT_ACCOUNT_DELTA_DISCRIMINATOR,
      logLevel: value.logLevel ?? LogLevel.Silent,
    })
  );
}

export function getAssertAccountDeltaInstructionDataDecoder(): Decoder<AssertAccountDeltaInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['logLevel', getLogLevelDecoder()],
    ['assertion', getAccountDeltaAssertionDecoder()],
  ]);
}

export function getAssertAccountDeltaInstructionDataCodec(): Codec<
  AssertAccountDeltaInstructionDataArgs,
  AssertAccountDeltaInstructionData
> {
  return combineCodec(
    getAssertAccountDeltaInstructionDataEncoder(),
    getAssertAccountDeltaInstructionDataDecoder()
  );
}

export type AssertAccountDeltaInput<
  TAccountAccountA extends string = string,
  TAccountAccountB extends string = string,
> = {
  /** Account A where the delta is calculated from */
  accountA: Address<TAccountAccountA>;
  /** Account B where the delta is calculated to */
  accountB: Address<TAccountAccountB>;
  logLevel?: AssertAccountDeltaInstructionDataArgs['logLevel'];
  assertion: AssertAccountDeltaInstructionDataArgs['assertion'];
};

export function getAssertAccountDeltaInstruction<
  TAccountAccountA extends string,
  TAccountAccountB extends string,
  TProgramAddress extends Address = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
>(
  input: AssertAccountDeltaInput<TAccountAccountA, TAccountAccountB>,
  config?: { programAddress?: TProgramAddress }
): AssertAccountDeltaInstruction<
  TProgramAddress,
  TAccountAccountA,
  TAccountAccountB
> {
  // Program address.
  const programAddress = config?.programAddress ?? LIGHTHOUSE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    accountA: { value: input.accountA ?? null, isWritable: false },
    accountB: { value: input.accountB ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.accountA),
      getAccountMeta(accounts.accountB),
    ],
    programAddress,
    data: getAssertAccountDeltaInstructionDataEncoder().encode(
      args as AssertAccountDeltaInstructionDataArgs
    ),
  } as AssertAccountDeltaInstruction<
    TProgramAddress,
    TAccountAccountA,
    TAccountAccountB
  >;

  return instruction;
}

export type ParsedAssertAccountDeltaInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Account A where the delta is calculated from */
    accountA: TAccountMetas[0];
    /** Account B where the delta is calculated to */
    accountB: TAccountMetas[1];
  };
  data: AssertAccountDeltaInstructionData;
};

export function parseAssertAccountDeltaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssertAccountDeltaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      accountA: getNextAccount(),
      accountB: getNextAccount(),
    },
    data: getAssertAccountDeltaInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
