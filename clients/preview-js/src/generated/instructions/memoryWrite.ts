/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  IAccountMeta,
  IAccountSignerMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/web3.js';
import {
  CompactU64,
  CompactU64Args,
  getCompactU64Decoder,
  getCompactU64Encoder,
} from '../../hooked';
import { LIGHTHOUSE_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  WriteType,
  WriteTypeArgs,
  getWriteTypeDecoder,
  getWriteTypeEncoder,
} from '../types';

export type MemoryWriteInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountProgramId extends
    | string
    | IAccountMeta<string> = 'L2TExMFKdjpN9kozasaurPirfHy9P8sbXoAN1qA3S95',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountMemory extends string | IAccountMeta<string> = string,
  TAccountSourceAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountMemory extends string
        ? WritableAccount<TAccountMemory>
        : TAccountMemory,
      TAccountSourceAccount extends string
        ? ReadonlyAccount<TAccountSourceAccount>
        : TAccountSourceAccount,
      ...TRemainingAccounts,
    ]
  >;

export type MemoryWriteInstructionData = {
  discriminator: number;
  memoryId: number;
  memoryBump: number;
  writeOffset: CompactU64;
  writeType: WriteType;
};

export type MemoryWriteInstructionDataArgs = {
  memoryId?: number;
  memoryBump: number;
  writeOffset: CompactU64Args;
  writeType: WriteTypeArgs;
};

export function getMemoryWriteInstructionDataEncoder(): Encoder<MemoryWriteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['memoryId', getU8Encoder()],
      ['memoryBump', getU8Encoder()],
      ['writeOffset', getCompactU64Encoder()],
      ['writeType', getWriteTypeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: 0, memoryId: value.memoryId ?? 0 })
  );
}

export function getMemoryWriteInstructionDataDecoder(): Decoder<MemoryWriteInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['memoryId', getU8Decoder()],
    ['memoryBump', getU8Decoder()],
    ['writeOffset', getCompactU64Decoder()],
    ['writeType', getWriteTypeDecoder()],
  ]);
}

export function getMemoryWriteInstructionDataCodec(): Codec<
  MemoryWriteInstructionDataArgs,
  MemoryWriteInstructionData
> {
  return combineCodec(
    getMemoryWriteInstructionDataEncoder(),
    getMemoryWriteInstructionDataDecoder()
  );
}

export type MemoryWriteInput<
  TAccountProgramId extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountMemory extends string = string,
  TAccountSourceAccount extends string = string,
> = {
  /** Lighthouse program */
  programId?: Address<TAccountProgramId>;
  /** System program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** Payer account */
  payer: TransactionSigner<TAccountPayer>;
  /** Memory account */
  memory: Address<TAccountMemory>;
  /** Account to be written to memory */
  sourceAccount: Address<TAccountSourceAccount>;
  memoryId?: MemoryWriteInstructionDataArgs['memoryId'];
  memoryBump: MemoryWriteInstructionDataArgs['memoryBump'];
  writeOffset: MemoryWriteInstructionDataArgs['writeOffset'];
  writeType: MemoryWriteInstructionDataArgs['writeType'];
};

export function getMemoryWriteInstruction<
  TAccountProgramId extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TAccountMemory extends string,
  TAccountSourceAccount extends string,
>(
  input: MemoryWriteInput<
    TAccountProgramId,
    TAccountSystemProgram,
    TAccountPayer,
    TAccountMemory,
    TAccountSourceAccount
  >
): MemoryWriteInstruction<
  typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountProgramId,
  TAccountSystemProgram,
  TAccountPayer,
  TAccountMemory,
  TAccountSourceAccount
> {
  // Program address.
  const programAddress = LIGHTHOUSE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programId: { value: input.programId ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    memory: { value: input.memory ?? null, isWritable: true },
    sourceAccount: { value: input.sourceAccount ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programId),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.memory),
      getAccountMeta(accounts.sourceAccount),
    ],
    programAddress,
    data: getMemoryWriteInstructionDataEncoder().encode(
      args as MemoryWriteInstructionDataArgs
    ),
  } as MemoryWriteInstruction<
    typeof LIGHTHOUSE_PROGRAM_ADDRESS,
    TAccountProgramId,
    TAccountSystemProgram,
    TAccountPayer,
    TAccountMemory,
    TAccountSourceAccount
  >;

  return instruction;
}

export type ParsedMemoryWriteInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Lighthouse program */
    programId: TAccountMetas[0];
    /** System program */
    systemProgram: TAccountMetas[1];
    /** Payer account */
    payer: TAccountMetas[2];
    /** Memory account */
    memory: TAccountMetas[3];
    /** Account to be written to memory */
    sourceAccount: TAccountMetas[4];
  };
  data: MemoryWriteInstructionData;
};

export function parseMemoryWriteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMemoryWriteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programId: getNextAccount(),
      systemProgram: getNextAccount(),
      payer: getNextAccount(),
      memory: getNextAccount(),
      sourceAccount: getNextAccount(),
    },
    data: getMemoryWriteInstructionDataDecoder().decode(instruction.data),
  };
}
