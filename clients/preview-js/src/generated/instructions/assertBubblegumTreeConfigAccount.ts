/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
} from '@solana/instructions';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  BubblegumTreeConfigAssertion,
  BubblegumTreeConfigAssertionArgs,
  LogLevel,
  LogLevelArgs,
  getBubblegumTreeConfigAssertionDecoder,
  getBubblegumTreeConfigAssertionEncoder,
  getLogLevelDecoder,
  getLogLevelEncoder,
} from '../types';

export type AssertBubblegumTreeConfigAccountInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountTargetAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTargetAccount extends string
        ? ReadonlyAccount<TAccountTargetAccount>
        : TAccountTargetAccount,
      ...TRemainingAccounts
    ]
  >;

export type AssertBubblegumTreeConfigAccountInstructionWithSigners<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountTargetAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTargetAccount extends string
        ? ReadonlyAccount<TAccountTargetAccount>
        : TAccountTargetAccount,
      ...TRemainingAccounts
    ]
  >;

export type AssertBubblegumTreeConfigAccountInstructionData = {
  discriminator: number;
  logLevel: LogLevel;
  assertion: BubblegumTreeConfigAssertion;
};

export type AssertBubblegumTreeConfigAccountInstructionDataArgs = {
  logLevel?: LogLevelArgs;
  assertion: BubblegumTreeConfigAssertionArgs;
};

export function getAssertBubblegumTreeConfigAccountInstructionDataEncoder(): Encoder<AssertBubblegumTreeConfigAccountInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['logLevel', getLogLevelEncoder()],
      ['assertion', getBubblegumTreeConfigAssertionEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: 16,
      logLevel: value.logLevel ?? LogLevel.Silent,
    })
  );
}

export function getAssertBubblegumTreeConfigAccountInstructionDataDecoder(): Decoder<AssertBubblegumTreeConfigAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['logLevel', getLogLevelDecoder()],
    ['assertion', getBubblegumTreeConfigAssertionDecoder()],
  ]);
}

export function getAssertBubblegumTreeConfigAccountInstructionDataCodec(): Codec<
  AssertBubblegumTreeConfigAccountInstructionDataArgs,
  AssertBubblegumTreeConfigAccountInstructionData
> {
  return combineCodec(
    getAssertBubblegumTreeConfigAccountInstructionDataEncoder(),
    getAssertBubblegumTreeConfigAccountInstructionDataDecoder()
  );
}

export type AssertBubblegumTreeConfigAccountInput<
  TAccountTargetAccount extends string
> = {
  /** Target mpl-bubblegum tree config account to be asserted */
  targetAccount: Address<TAccountTargetAccount>;
  logLevel?: AssertBubblegumTreeConfigAccountInstructionDataArgs['logLevel'];
  assertion: AssertBubblegumTreeConfigAccountInstructionDataArgs['assertion'];
};

export type AssertBubblegumTreeConfigAccountInputWithSigners<
  TAccountTargetAccount extends string
> = {
  /** Target mpl-bubblegum tree config account to be asserted */
  targetAccount: Address<TAccountTargetAccount>;
  logLevel?: AssertBubblegumTreeConfigAccountInstructionDataArgs['logLevel'];
  assertion: AssertBubblegumTreeConfigAccountInstructionDataArgs['assertion'];
};

export function getAssertBubblegumTreeConfigAccountInstruction<
  TAccountTargetAccount extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertBubblegumTreeConfigAccountInputWithSigners<TAccountTargetAccount>
): AssertBubblegumTreeConfigAccountInstructionWithSigners<
  TProgram,
  TAccountTargetAccount
>;
export function getAssertBubblegumTreeConfigAccountInstruction<
  TAccountTargetAccount extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertBubblegumTreeConfigAccountInput<TAccountTargetAccount>
): AssertBubblegumTreeConfigAccountInstruction<TProgram, TAccountTargetAccount>;
export function getAssertBubblegumTreeConfigAccountInstruction<
  TAccountTargetAccount extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertBubblegumTreeConfigAccountInput<TAccountTargetAccount>
): IInstruction {
  // Program address.
  const programAddress =
    'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getAssertBubblegumTreeConfigAccountInstructionRaw<
      TProgram,
      TAccountTargetAccount
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    targetAccount: { value: input.targetAccount ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getAssertBubblegumTreeConfigAccountInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as AssertBubblegumTreeConfigAccountInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getAssertBubblegumTreeConfigAccountInstructionRaw<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountTargetAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    targetAccount: TAccountTargetAccount extends string
      ? Address<TAccountTargetAccount>
      : TAccountTargetAccount;
  },
  args: AssertBubblegumTreeConfigAccountInstructionDataArgs,
  programAddress: Address<TProgram> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.targetAccount, AccountRole.READONLY),
      ...(remainingAccounts ?? []),
    ],
    data: getAssertBubblegumTreeConfigAccountInstructionDataEncoder().encode(
      args
    ),
    programAddress,
  } as AssertBubblegumTreeConfigAccountInstruction<
    TProgram,
    TAccountTargetAccount,
    TRemainingAccounts
  >;
}

export type ParsedAssertBubblegumTreeConfigAccountInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Target mpl-bubblegum tree config account to be asserted */
    targetAccount: TAccountMetas[0];
  };
  data: AssertBubblegumTreeConfigAccountInstructionData;
};

export function parseAssertBubblegumTreeConfigAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssertBubblegumTreeConfigAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      targetAccount: getNextAccount(),
    },
    data: getAssertBubblegumTreeConfigAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
