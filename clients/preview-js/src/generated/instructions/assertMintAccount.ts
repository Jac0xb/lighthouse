/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
} from '@solana/instructions';
import { LIGHTHOUSE_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  LogLevel,
  LogLevelArgs,
  MintAccountAssertion,
  MintAccountAssertionArgs,
  getLogLevelDecoder,
  getLogLevelEncoder,
  getMintAccountAssertionDecoder,
  getMintAccountAssertionEncoder,
} from '../types';

export type AssertMintAccountInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountTargetAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTargetAccount extends string
        ? ReadonlyAccount<TAccountTargetAccount>
        : TAccountTargetAccount,
      ...TRemainingAccounts,
    ]
  >;

export type AssertMintAccountInstructionData = {
  discriminator: number;
  logLevel: LogLevel;
  assertion: MintAccountAssertion;
};

export type AssertMintAccountInstructionDataArgs = {
  logLevel?: LogLevelArgs;
  assertion: MintAccountAssertionArgs;
};

export function getAssertMintAccountInstructionDataEncoder(): Encoder<AssertMintAccountInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['logLevel', getLogLevelEncoder()],
      ['assertion', getMintAccountAssertionEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: 6,
      logLevel: value.logLevel ?? LogLevel.Silent,
    })
  );
}

export function getAssertMintAccountInstructionDataDecoder(): Decoder<AssertMintAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['logLevel', getLogLevelDecoder()],
    ['assertion', getMintAccountAssertionDecoder()],
  ]);
}

export function getAssertMintAccountInstructionDataCodec(): Codec<
  AssertMintAccountInstructionDataArgs,
  AssertMintAccountInstructionData
> {
  return combineCodec(
    getAssertMintAccountInstructionDataEncoder(),
    getAssertMintAccountInstructionDataDecoder()
  );
}

export type AssertMintAccountInput<
  TAccountTargetAccount extends string = string,
> = {
  /** Target account to be asserted */
  targetAccount: Address<TAccountTargetAccount>;
  logLevel?: AssertMintAccountInstructionDataArgs['logLevel'];
  assertion: AssertMintAccountInstructionDataArgs['assertion'];
};

export function getAssertMintAccountInstruction<
  TAccountTargetAccount extends string,
>(
  input: AssertMintAccountInput<TAccountTargetAccount>
): AssertMintAccountInstruction<
  typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountTargetAccount
> {
  // Program address.
  const programAddress = LIGHTHOUSE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    targetAccount: { value: input.targetAccount ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.targetAccount)],
    programAddress,
    data: getAssertMintAccountInstructionDataEncoder().encode(
      args as AssertMintAccountInstructionDataArgs
    ),
  } as AssertMintAccountInstruction<
    typeof LIGHTHOUSE_PROGRAM_ADDRESS,
    TAccountTargetAccount
  >;

  return instruction;
}

export type ParsedAssertMintAccountInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Target account to be asserted */
    targetAccount: TAccountMetas[0];
  };
  data: AssertMintAccountInstructionData;
};

export function parseAssertMintAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssertMintAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      targetAccount: getNextAccount(),
    },
    data: getAssertMintAccountInstructionDataDecoder().decode(instruction.data),
  };
}
