/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
} from '@solana/web3.js';
import { LIGHTHOUSE_PROGRAM_ADDRESS } from '../programs';
import {
  LogLevel,
  getLogLevelDecoder,
  getLogLevelEncoder,
  getSysvarClockAssertionDecoder,
  getSysvarClockAssertionEncoder,
  type LogLevelArgs,
  type SysvarClockAssertion,
  type SysvarClockAssertionArgs,
} from '../types';

export const ASSERT_SYSVAR_CLOCK_DISCRIMINATOR = 15;

export function getAssertSysvarClockDiscriminatorBytes() {
  return getU8Encoder().encode(ASSERT_SYSVAR_CLOCK_DISCRIMINATOR);
}

export type AssertSysvarClockInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type AssertSysvarClockInstructionData = {
  discriminator: number;
  logLevel: LogLevel;
  assertion: SysvarClockAssertion;
};

export type AssertSysvarClockInstructionDataArgs = {
  logLevel?: LogLevelArgs;
  assertion: SysvarClockAssertionArgs;
};

export function getAssertSysvarClockInstructionDataEncoder(): Encoder<AssertSysvarClockInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['logLevel', getLogLevelEncoder()],
      ['assertion', getSysvarClockAssertionEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ASSERT_SYSVAR_CLOCK_DISCRIMINATOR,
      logLevel: value.logLevel ?? LogLevel.Silent,
    })
  );
}

export function getAssertSysvarClockInstructionDataDecoder(): Decoder<AssertSysvarClockInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['logLevel', getLogLevelDecoder()],
    ['assertion', getSysvarClockAssertionDecoder()],
  ]);
}

export function getAssertSysvarClockInstructionDataCodec(): Codec<
  AssertSysvarClockInstructionDataArgs,
  AssertSysvarClockInstructionData
> {
  return combineCodec(
    getAssertSysvarClockInstructionDataEncoder(),
    getAssertSysvarClockInstructionDataDecoder()
  );
}

export type AssertSysvarClockInput = {
  logLevel?: AssertSysvarClockInstructionDataArgs['logLevel'];
  assertion: AssertSysvarClockInstructionDataArgs['assertion'];
};

export function getAssertSysvarClockInstruction<
  TProgramAddress extends Address = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
>(
  input: AssertSysvarClockInput,
  config?: { programAddress?: TProgramAddress }
): AssertSysvarClockInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? LIGHTHOUSE_PROGRAM_ADDRESS;

  // Original args.
  const args = { ...input };

  const instruction = {
    programAddress,
    data: getAssertSysvarClockInstructionDataEncoder().encode(
      args as AssertSysvarClockInstructionDataArgs
    ),
  } as AssertSysvarClockInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedAssertSysvarClockInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: AssertSysvarClockInstructionData;
};

export function parseAssertSysvarClockInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>
): ParsedAssertSysvarClockInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getAssertSysvarClockInstructionDataDecoder().decode(instruction.data),
  };
}
