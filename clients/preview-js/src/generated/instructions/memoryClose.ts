/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/web3.js';
import { LIGHTHOUSE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const MEMORY_CLOSE_DISCRIMINATOR = 1;

export function getMemoryCloseDiscriminatorBytes() {
  return getU8Encoder().encode(MEMORY_CLOSE_DISCRIMINATOR);
}

export type MemoryCloseInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountProgramId extends
    | string
    | IAccountMeta<string> = 'L2TExMFKdjpN9kozasaurPirfHy9P8sbXoAN1qA3S95',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountMemory extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountMemory extends string
        ? WritableAccount<TAccountMemory>
        : TAccountMemory,
      ...TRemainingAccounts,
    ]
  >;

export type MemoryCloseInstructionData = {
  discriminator: number;
  memoryId: number;
  memoryBump: number;
};

export type MemoryCloseInstructionDataArgs = {
  memoryId: number;
  memoryBump: number;
};

export function getMemoryCloseInstructionDataEncoder(): Encoder<MemoryCloseInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['memoryId', getU8Encoder()],
      ['memoryBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MEMORY_CLOSE_DISCRIMINATOR })
  );
}

export function getMemoryCloseInstructionDataDecoder(): Decoder<MemoryCloseInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['memoryId', getU8Decoder()],
    ['memoryBump', getU8Decoder()],
  ]);
}

export function getMemoryCloseInstructionDataCodec(): Codec<
  MemoryCloseInstructionDataArgs,
  MemoryCloseInstructionData
> {
  return combineCodec(
    getMemoryCloseInstructionDataEncoder(),
    getMemoryCloseInstructionDataDecoder()
  );
}

export type MemoryCloseInput<
  TAccountProgramId extends string = string,
  TAccountPayer extends string = string,
  TAccountMemory extends string = string,
> = {
  /** Lighthouse program */
  programId?: Address<TAccountProgramId>;
  /** Payer account */
  payer: TransactionSigner<TAccountPayer>;
  /** Memory account */
  memory: Address<TAccountMemory>;
  memoryId: MemoryCloseInstructionDataArgs['memoryId'];
  memoryBump: MemoryCloseInstructionDataArgs['memoryBump'];
};

export function getMemoryCloseInstruction<
  TAccountProgramId extends string,
  TAccountPayer extends string,
  TAccountMemory extends string,
  TProgramAddress extends Address = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
>(
  input: MemoryCloseInput<TAccountProgramId, TAccountPayer, TAccountMemory>,
  config?: { programAddress?: TProgramAddress }
): MemoryCloseInstruction<
  TProgramAddress,
  TAccountProgramId,
  TAccountPayer,
  TAccountMemory
> {
  // Program address.
  const programAddress = config?.programAddress ?? LIGHTHOUSE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programId: { value: input.programId ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    memory: { value: input.memory ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programId),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.memory),
    ],
    programAddress,
    data: getMemoryCloseInstructionDataEncoder().encode(
      args as MemoryCloseInstructionDataArgs
    ),
  } as MemoryCloseInstruction<
    TProgramAddress,
    TAccountProgramId,
    TAccountPayer,
    TAccountMemory
  >;

  return instruction;
}

export type ParsedMemoryCloseInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Lighthouse program */
    programId: TAccountMetas[0];
    /** Payer account */
    payer: TAccountMetas[1];
    /** Memory account */
    memory: TAccountMetas[2];
  };
  data: MemoryCloseInstructionData;
};

export function parseMemoryCloseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMemoryCloseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programId: getNextAccount(),
      payer: getNextAccount(),
      memory: getNextAccount(),
    },
    data: getMemoryCloseInstructionDataDecoder().decode(instruction.data),
  };
}
