/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';

export type MemoryCloseInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountProgramId extends
    | string
    | IAccountMeta<string> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountMemory extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer>
        : TAccountPayer,
      TAccountMemory extends string
        ? WritableAccount<TAccountMemory>
        : TAccountMemory,
      ...TRemainingAccounts
    ]
  >;

export type MemoryCloseInstructionWithSigners<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountProgramId extends
    | string
    | IAccountMeta<string> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountMemory extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgramId extends string
        ? ReadonlyAccount<TAccountProgramId>
        : TAccountProgramId,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountMemory extends string
        ? WritableAccount<TAccountMemory>
        : TAccountMemory,
      ...TRemainingAccounts
    ]
  >;

export type MemoryCloseInstructionData = {
  discriminator: number;
  memoryId: number;
  memoryBump: number;
};

export type MemoryCloseInstructionDataArgs = {
  memoryId: number;
  memoryBump: number;
};

export function getMemoryCloseInstructionDataEncoder(): Encoder<MemoryCloseInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['memoryId', getU8Encoder()],
      ['memoryBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 1 })
  );
}

export function getMemoryCloseInstructionDataDecoder(): Decoder<MemoryCloseInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['memoryId', getU8Decoder()],
    ['memoryBump', getU8Decoder()],
  ]);
}

export function getMemoryCloseInstructionDataCodec(): Codec<
  MemoryCloseInstructionDataArgs,
  MemoryCloseInstructionData
> {
  return combineCodec(
    getMemoryCloseInstructionDataEncoder(),
    getMemoryCloseInstructionDataDecoder()
  );
}

export type MemoryCloseInput<
  TAccountProgramId extends string,
  TAccountPayer extends string,
  TAccountMemory extends string
> = {
  /** Lighthouse program */
  programId?: Address<TAccountProgramId>;
  /** Payer account */
  payer: Address<TAccountPayer>;
  /** Memory account */
  memory: Address<TAccountMemory>;
  memoryId: MemoryCloseInstructionDataArgs['memoryId'];
  memoryBump: MemoryCloseInstructionDataArgs['memoryBump'];
};

export type MemoryCloseInputWithSigners<
  TAccountProgramId extends string,
  TAccountPayer extends string,
  TAccountMemory extends string
> = {
  /** Lighthouse program */
  programId?: Address<TAccountProgramId>;
  /** Payer account */
  payer: TransactionSigner<TAccountPayer>;
  /** Memory account */
  memory: Address<TAccountMemory>;
  memoryId: MemoryCloseInstructionDataArgs['memoryId'];
  memoryBump: MemoryCloseInstructionDataArgs['memoryBump'];
};

export function getMemoryCloseInstruction<
  TAccountProgramId extends string,
  TAccountPayer extends string,
  TAccountMemory extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: MemoryCloseInputWithSigners<
    TAccountProgramId,
    TAccountPayer,
    TAccountMemory
  >
): MemoryCloseInstructionWithSigners<
  TProgram,
  TAccountProgramId,
  TAccountPayer,
  TAccountMemory
>;
export function getMemoryCloseInstruction<
  TAccountProgramId extends string,
  TAccountPayer extends string,
  TAccountMemory extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: MemoryCloseInput<TAccountProgramId, TAccountPayer, TAccountMemory>
): MemoryCloseInstruction<
  TProgram,
  TAccountProgramId,
  TAccountPayer,
  TAccountMemory
>;
export function getMemoryCloseInstruction<
  TAccountProgramId extends string,
  TAccountPayer extends string,
  TAccountMemory extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: MemoryCloseInput<TAccountProgramId, TAccountPayer, TAccountMemory>
): IInstruction {
  // Program address.
  const programAddress =
    'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getMemoryCloseInstructionRaw<
      TProgram,
      TAccountProgramId,
      TAccountPayer,
      TAccountMemory
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    programId: { value: input.programId ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    memory: { value: input.memory ?? null, isWritable: true },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programId.value) {
    accounts.programId.value = programAddress;
    accounts.programId.isWritable = false;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getMemoryCloseInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as MemoryCloseInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getMemoryCloseInstructionRaw<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountProgramId extends
    | string
    | IAccountMeta<string> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountMemory extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    programId?: TAccountProgramId extends string
      ? Address<TAccountProgramId>
      : TAccountProgramId;
    payer: TAccountPayer extends string
      ? Address<TAccountPayer>
      : TAccountPayer;
    memory: TAccountMemory extends string
      ? Address<TAccountMemory>
      : TAccountMemory;
  },
  args: MemoryCloseInstructionDataArgs,
  programAddress: Address<TProgram> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(
        accounts.programId ?? {
          address:
            'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>,
          role: AccountRole.READONLY,
        },
        AccountRole.READONLY
      ),
      accountMetaWithDefault(accounts.payer, AccountRole.WRITABLE_SIGNER),
      accountMetaWithDefault(accounts.memory, AccountRole.WRITABLE),
      ...(remainingAccounts ?? []),
    ],
    data: getMemoryCloseInstructionDataEncoder().encode(args),
    programAddress,
  } as MemoryCloseInstruction<
    TProgram,
    TAccountProgramId,
    TAccountPayer,
    TAccountMemory,
    TRemainingAccounts
  >;
}

export type ParsedMemoryCloseInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Lighthouse program */
    programId: TAccountMetas[0];
    /** Payer account */
    payer: TAccountMetas[1];
    /** Memory account */
    memory: TAccountMetas[2];
  };
  data: MemoryCloseInstructionData;
};

export function parseMemoryCloseInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedMemoryCloseInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programId: getNextAccount(),
      payer: getNextAccount(),
      memory: getNextAccount(),
    },
    data: getMemoryCloseInstructionDataDecoder().decode(instruction.data),
  };
}
