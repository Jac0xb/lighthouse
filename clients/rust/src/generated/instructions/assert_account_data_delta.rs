//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::DataValueDeltaAssertion;
use crate::generated::types::LogLevel;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;

/// Accounts.
pub struct AssertAccountDataDelta {
    /// Left account
    pub left_account: solana_program::pubkey::Pubkey,
    /// Right account
    pub right_account: solana_program::pubkey::Pubkey,
}

impl AssertAccountDataDelta {
    pub fn instruction(
        &self,
        args: AssertAccountDataDeltaInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: AssertAccountDataDeltaInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.left_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.right_account,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = AssertAccountDataDeltaInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::LIGHTHOUSE_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct AssertAccountDataDeltaInstructionData {
    discriminator: u8,
}

impl AssertAccountDataDeltaInstructionData {
    fn new() -> Self {
        Self { discriminator: 2 }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct AssertAccountDataDeltaInstructionArgs {
    pub log_level: LogLevel,
    pub offset_left: u16,
    pub offset_right: u16,
    pub assertion: DataValueDeltaAssertion,
}

/// Instruction builder for `AssertAccountDataDelta`.
///
/// ### Accounts:
///
///   0. `[]` left_account
///   1. `[]` right_account
#[derive(Default)]
pub struct AssertAccountDataDeltaBuilder {
    left_account: Option<solana_program::pubkey::Pubkey>,
    right_account: Option<solana_program::pubkey::Pubkey>,
    log_level: Option<LogLevel>,
    offset_left: Option<u16>,
    offset_right: Option<u16>,
    assertion: Option<DataValueDeltaAssertion>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl AssertAccountDataDeltaBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// Left account
    #[inline(always)]
    pub fn left_account(&mut self, left_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.left_account = Some(left_account);
        self
    }
    /// Right account
    #[inline(always)]
    pub fn right_account(&mut self, right_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.right_account = Some(right_account);
        self
    }
    #[inline(always)]
    pub fn log_level(&mut self, log_level: LogLevel) -> &mut Self {
        self.log_level = Some(log_level);
        self
    }
    #[inline(always)]
    pub fn offset_left(&mut self, offset_left: u16) -> &mut Self {
        self.offset_left = Some(offset_left);
        self
    }
    #[inline(always)]
    pub fn offset_right(&mut self, offset_right: u16) -> &mut Self {
        self.offset_right = Some(offset_right);
        self
    }
    #[inline(always)]
    pub fn assertion(&mut self, assertion: DataValueDeltaAssertion) -> &mut Self {
        self.assertion = Some(assertion);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = AssertAccountDataDelta {
            left_account: self.left_account.expect("left_account is not set"),
            right_account: self.right_account.expect("right_account is not set"),
        };
        let args = AssertAccountDataDeltaInstructionArgs {
            log_level: self.log_level.clone().expect("log_level is not set"),
            offset_left: self.offset_left.clone().expect("offset_left is not set"),
            offset_right: self.offset_right.clone().expect("offset_right is not set"),
            assertion: self.assertion.clone().expect("assertion is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `assert_account_data_delta` CPI accounts.
pub struct AssertAccountDataDeltaCpiAccounts<'a, 'b> {
    /// Left account
    pub left_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Right account
    pub right_account: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `assert_account_data_delta` CPI instruction.
pub struct AssertAccountDataDeltaCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// Left account
    pub left_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// Right account
    pub right_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: AssertAccountDataDeltaInstructionArgs,
}

impl<'a, 'b> AssertAccountDataDeltaCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: AssertAccountDataDeltaCpiAccounts<'a, 'b>,
        args: AssertAccountDataDeltaInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            left_account: accounts.left_account,
            right_account: accounts.right_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.left_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.right_account.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = AssertAccountDataDeltaInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::LIGHTHOUSE_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(2 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.left_account.clone());
        account_infos.push(self.right_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `AssertAccountDataDelta` via CPI.
///
/// ### Accounts:
///
///   0. `[]` left_account
///   1. `[]` right_account
pub struct AssertAccountDataDeltaCpiBuilder<'a, 'b> {
    instruction: Box<AssertAccountDataDeltaCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> AssertAccountDataDeltaCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(AssertAccountDataDeltaCpiBuilderInstruction {
            __program: program,
            left_account: None,
            right_account: None,
            log_level: None,
            offset_left: None,
            offset_right: None,
            assertion: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// Left account
    #[inline(always)]
    pub fn left_account(
        &mut self,
        left_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.left_account = Some(left_account);
        self
    }
    /// Right account
    #[inline(always)]
    pub fn right_account(
        &mut self,
        right_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.right_account = Some(right_account);
        self
    }
    #[inline(always)]
    pub fn log_level(&mut self, log_level: LogLevel) -> &mut Self {
        self.instruction.log_level = Some(log_level);
        self
    }
    #[inline(always)]
    pub fn offset_left(&mut self, offset_left: u16) -> &mut Self {
        self.instruction.offset_left = Some(offset_left);
        self
    }
    #[inline(always)]
    pub fn offset_right(&mut self, offset_right: u16) -> &mut Self {
        self.instruction.offset_right = Some(offset_right);
        self
    }
    #[inline(always)]
    pub fn assertion(&mut self, assertion: DataValueDeltaAssertion) -> &mut Self {
        self.instruction.assertion = Some(assertion);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = AssertAccountDataDeltaInstructionArgs {
            log_level: self
                .instruction
                .log_level
                .clone()
                .expect("log_level is not set"),
            offset_left: self
                .instruction
                .offset_left
                .clone()
                .expect("offset_left is not set"),
            offset_right: self
                .instruction
                .offset_right
                .clone()
                .expect("offset_right is not set"),
            assertion: self
                .instruction
                .assertion
                .clone()
                .expect("assertion is not set"),
        };
        let instruction = AssertAccountDataDeltaCpi {
            __program: self.instruction.__program,

            left_account: self
                .instruction
                .left_account
                .expect("left_account is not set"),

            right_account: self
                .instruction
                .right_account
                .expect("right_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct AssertAccountDataDeltaCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    left_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    right_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    log_level: Option<LogLevel>,
    offset_left: Option<u16>,
    offset_right: Option<u16>,
    assertion: Option<DataValueDeltaAssertion>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
