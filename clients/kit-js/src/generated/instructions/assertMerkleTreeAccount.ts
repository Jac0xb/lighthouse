/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
} from '@solana/kit';
import { LIGHTHOUSE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  LogLevel,
  getLogLevelDecoder,
  getLogLevelEncoder,
  getMerkleTreeAssertionDecoder,
  getMerkleTreeAssertionEncoder,
  type LogLevelArgs,
  type MerkleTreeAssertion,
  type MerkleTreeAssertionArgs,
} from '../types';

export const ASSERT_MERKLE_TREE_ACCOUNT_DISCRIMINATOR = 16;

export function getAssertMerkleTreeAccountDiscriminatorBytes() {
  return getU8Encoder().encode(ASSERT_MERKLE_TREE_ACCOUNT_DISCRIMINATOR);
}

export type AssertMerkleTreeAccountInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountTargetMerkleTree extends string | IAccountMeta<string> = string,
  TAccountRoot extends string | IAccountMeta<string> = string,
  TAccountSplAccountCompression extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTargetMerkleTree extends string
        ? ReadonlyAccount<TAccountTargetMerkleTree>
        : TAccountTargetMerkleTree,
      TAccountRoot extends string
        ? ReadonlyAccount<TAccountRoot>
        : TAccountRoot,
      TAccountSplAccountCompression extends string
        ? ReadonlyAccount<TAccountSplAccountCompression>
        : TAccountSplAccountCompression,
      ...TRemainingAccounts,
    ]
  >;

export type AssertMerkleTreeAccountInstructionData = {
  discriminator: number;
  logLevel: LogLevel;
  assertion: MerkleTreeAssertion;
};

export type AssertMerkleTreeAccountInstructionDataArgs = {
  logLevel?: LogLevelArgs;
  assertion: MerkleTreeAssertionArgs;
};

export function getAssertMerkleTreeAccountInstructionDataEncoder(): Encoder<AssertMerkleTreeAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['logLevel', getLogLevelEncoder()],
      ['assertion', getMerkleTreeAssertionEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: ASSERT_MERKLE_TREE_ACCOUNT_DISCRIMINATOR,
      logLevel: value.logLevel ?? LogLevel.Silent,
    })
  );
}

export function getAssertMerkleTreeAccountInstructionDataDecoder(): Decoder<AssertMerkleTreeAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['logLevel', getLogLevelDecoder()],
    ['assertion', getMerkleTreeAssertionDecoder()],
  ]);
}

export function getAssertMerkleTreeAccountInstructionDataCodec(): Codec<
  AssertMerkleTreeAccountInstructionDataArgs,
  AssertMerkleTreeAccountInstructionData
> {
  return combineCodec(
    getAssertMerkleTreeAccountInstructionDataEncoder(),
    getAssertMerkleTreeAccountInstructionDataDecoder()
  );
}

export type AssertMerkleTreeAccountInput<
  TAccountTargetMerkleTree extends string = string,
  TAccountRoot extends string = string,
  TAccountSplAccountCompression extends string = string,
> = {
  /** Target merkle tree account to be asserted */
  targetMerkleTree: Address<TAccountTargetMerkleTree>;
  /** The current root of the merkle tree */
  root: Address<TAccountRoot>;
  /** SPL account compression program */
  splAccountCompression: Address<TAccountSplAccountCompression>;
  logLevel?: AssertMerkleTreeAccountInstructionDataArgs['logLevel'];
  assertion: AssertMerkleTreeAccountInstructionDataArgs['assertion'];
};

export function getAssertMerkleTreeAccountInstruction<
  TAccountTargetMerkleTree extends string,
  TAccountRoot extends string,
  TAccountSplAccountCompression extends string,
  TProgramAddress extends Address = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
>(
  input: AssertMerkleTreeAccountInput<
    TAccountTargetMerkleTree,
    TAccountRoot,
    TAccountSplAccountCompression
  >,
  config?: { programAddress?: TProgramAddress }
): AssertMerkleTreeAccountInstruction<
  TProgramAddress,
  TAccountTargetMerkleTree,
  TAccountRoot,
  TAccountSplAccountCompression
> {
  // Program address.
  const programAddress = config?.programAddress ?? LIGHTHOUSE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    targetMerkleTree: {
      value: input.targetMerkleTree ?? null,
      isWritable: false,
    },
    root: { value: input.root ?? null, isWritable: false },
    splAccountCompression: {
      value: input.splAccountCompression ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.targetMerkleTree),
      getAccountMeta(accounts.root),
      getAccountMeta(accounts.splAccountCompression),
    ],
    programAddress,
    data: getAssertMerkleTreeAccountInstructionDataEncoder().encode(
      args as AssertMerkleTreeAccountInstructionDataArgs
    ),
  } as AssertMerkleTreeAccountInstruction<
    TProgramAddress,
    TAccountTargetMerkleTree,
    TAccountRoot,
    TAccountSplAccountCompression
  >;

  return instruction;
}

export type ParsedAssertMerkleTreeAccountInstruction<
  TProgram extends string = typeof LIGHTHOUSE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Target merkle tree account to be asserted */
    targetMerkleTree: TAccountMetas[0];
    /** The current root of the merkle tree */
    root: TAccountMetas[1];
    /** SPL account compression program */
    splAccountCompression: TAccountMetas[2];
  };
  data: AssertMerkleTreeAccountInstructionData;
};

export function parseAssertMerkleTreeAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssertMerkleTreeAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      targetMerkleTree: getNextAccount(),
      root: getNextAccount(),
      splAccountCompression: getNextAccount(),
    },
    data: getAssertMerkleTreeAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
