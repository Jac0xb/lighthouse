/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type Option,
  type OptionOrNullable,
} from '@solana/kit';
import {
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
  getIntegerOperatorDecoder,
  getIntegerOperatorEncoder,
  type EquatableOperator,
  type EquatableOperatorArgs,
  type IntegerOperator,
  type IntegerOperatorArgs,
} from '.';

export type UpgradeableProgramDataAssertion =
  | {
      __kind: 'UpgradeAuthority';
      value: Option<Address>;
      operator: EquatableOperator;
    }
  | { __kind: 'Slot'; value: bigint; operator: IntegerOperator };

export type UpgradeableProgramDataAssertionArgs =
  | {
      __kind: 'UpgradeAuthority';
      value: OptionOrNullable<Address>;
      operator: EquatableOperatorArgs;
    }
  | { __kind: 'Slot'; value: number | bigint; operator: IntegerOperatorArgs };

export function getUpgradeableProgramDataAssertionEncoder(): Encoder<UpgradeableProgramDataAssertionArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'UpgradeAuthority',
      getStructEncoder([
        ['value', getOptionEncoder(getAddressEncoder())],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'Slot',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
  ]);
}

export function getUpgradeableProgramDataAssertionDecoder(): Decoder<UpgradeableProgramDataAssertion> {
  return getDiscriminatedUnionDecoder([
    [
      'UpgradeAuthority',
      getStructDecoder([
        ['value', getOptionDecoder(getAddressDecoder())],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'Slot',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
  ]);
}

export function getUpgradeableProgramDataAssertionCodec(): Codec<
  UpgradeableProgramDataAssertionArgs,
  UpgradeableProgramDataAssertion
> {
  return combineCodec(
    getUpgradeableProgramDataAssertionEncoder(),
    getUpgradeableProgramDataAssertionDecoder()
  );
}

// Data Enum Helpers.
export function upgradeableProgramDataAssertion(
  kind: 'UpgradeAuthority',
  data: GetDiscriminatedUnionVariantContent<
    UpgradeableProgramDataAssertionArgs,
    '__kind',
    'UpgradeAuthority'
  >
): GetDiscriminatedUnionVariant<
  UpgradeableProgramDataAssertionArgs,
  '__kind',
  'UpgradeAuthority'
>;
export function upgradeableProgramDataAssertion(
  kind: 'Slot',
  data: GetDiscriminatedUnionVariantContent<
    UpgradeableProgramDataAssertionArgs,
    '__kind',
    'Slot'
  >
): GetDiscriminatedUnionVariant<
  UpgradeableProgramDataAssertionArgs,
  '__kind',
  'Slot'
>;
export function upgradeableProgramDataAssertion<
  K extends UpgradeableProgramDataAssertionArgs['__kind'],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isUpgradeableProgramDataAssertion<
  K extends UpgradeableProgramDataAssertion['__kind'],
>(
  kind: K,
  value: UpgradeableProgramDataAssertion
): value is UpgradeableProgramDataAssertion & { __kind: K } {
  return value.__kind === kind;
}
