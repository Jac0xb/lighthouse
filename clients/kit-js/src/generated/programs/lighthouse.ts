/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedAssertAccountDataInstruction,
  type ParsedAssertAccountDataMultiInstruction,
  type ParsedAssertAccountDeltaInstruction,
  type ParsedAssertAccountInfoInstruction,
  type ParsedAssertAccountInfoMultiInstruction,
  type ParsedAssertBubblegumTreeConfigAccountInstruction,
  type ParsedAssertMerkleTreeAccountInstruction,
  type ParsedAssertMintAccountInstruction,
  type ParsedAssertMintAccountMultiInstruction,
  type ParsedAssertStakeAccountInstruction,
  type ParsedAssertStakeAccountMultiInstruction,
  type ParsedAssertSysvarClockInstruction,
  type ParsedAssertTokenAccountInstruction,
  type ParsedAssertTokenAccountMultiInstruction,
  type ParsedAssertUpgradeableLoaderAccountInstruction,
  type ParsedAssertUpgradeableLoaderAccountMultiInstruction,
  type ParsedMemoryCloseInstruction,
  type ParsedMemoryWriteInstruction,
} from '../instructions';

export const LIGHTHOUSE_PROGRAM_ADDRESS =
  'L2TExMFKdjpN9kozasaurPirfHy9P8sbXoAN1qA3S95' as Address<'L2TExMFKdjpN9kozasaurPirfHy9P8sbXoAN1qA3S95'>;

export enum LighthouseInstruction {
  MemoryWrite,
  MemoryClose,
  AssertAccountData,
  AssertAccountDataMulti,
  AssertAccountDelta,
  AssertAccountInfo,
  AssertAccountInfoMulti,
  AssertMintAccount,
  AssertMintAccountMulti,
  AssertTokenAccount,
  AssertTokenAccountMulti,
  AssertStakeAccount,
  AssertStakeAccountMulti,
  AssertUpgradeableLoaderAccount,
  AssertUpgradeableLoaderAccountMulti,
  AssertSysvarClock,
  AssertMerkleTreeAccount,
  AssertBubblegumTreeConfigAccount,
}

export function identifyLighthouseInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): LighthouseInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return LighthouseInstruction.MemoryWrite;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return LighthouseInstruction.MemoryClose;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return LighthouseInstruction.AssertAccountData;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return LighthouseInstruction.AssertAccountDataMulti;
  }
  if (containsBytes(data, getU8Encoder().encode(4), 0)) {
    return LighthouseInstruction.AssertAccountDelta;
  }
  if (containsBytes(data, getU8Encoder().encode(5), 0)) {
    return LighthouseInstruction.AssertAccountInfo;
  }
  if (containsBytes(data, getU8Encoder().encode(6), 0)) {
    return LighthouseInstruction.AssertAccountInfoMulti;
  }
  if (containsBytes(data, getU8Encoder().encode(7), 0)) {
    return LighthouseInstruction.AssertMintAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(8), 0)) {
    return LighthouseInstruction.AssertMintAccountMulti;
  }
  if (containsBytes(data, getU8Encoder().encode(9), 0)) {
    return LighthouseInstruction.AssertTokenAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(10), 0)) {
    return LighthouseInstruction.AssertTokenAccountMulti;
  }
  if (containsBytes(data, getU8Encoder().encode(11), 0)) {
    return LighthouseInstruction.AssertStakeAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(12), 0)) {
    return LighthouseInstruction.AssertStakeAccountMulti;
  }
  if (containsBytes(data, getU8Encoder().encode(13), 0)) {
    return LighthouseInstruction.AssertUpgradeableLoaderAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(14), 0)) {
    return LighthouseInstruction.AssertUpgradeableLoaderAccountMulti;
  }
  if (containsBytes(data, getU8Encoder().encode(15), 0)) {
    return LighthouseInstruction.AssertSysvarClock;
  }
  if (containsBytes(data, getU8Encoder().encode(16), 0)) {
    return LighthouseInstruction.AssertMerkleTreeAccount;
  }
  if (containsBytes(data, getU8Encoder().encode(17), 0)) {
    return LighthouseInstruction.AssertBubblegumTreeConfigAccount;
  }
  throw new Error(
    'The provided instruction could not be identified as a lighthouse instruction.'
  );
}

export type ParsedLighthouseInstruction<
  TProgram extends string = 'L2TExMFKdjpN9kozasaurPirfHy9P8sbXoAN1qA3S95',
> =
  | ({
      instructionType: LighthouseInstruction.MemoryWrite;
    } & ParsedMemoryWriteInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.MemoryClose;
    } & ParsedMemoryCloseInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertAccountData;
    } & ParsedAssertAccountDataInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertAccountDataMulti;
    } & ParsedAssertAccountDataMultiInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertAccountDelta;
    } & ParsedAssertAccountDeltaInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertAccountInfo;
    } & ParsedAssertAccountInfoInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertAccountInfoMulti;
    } & ParsedAssertAccountInfoMultiInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertMintAccount;
    } & ParsedAssertMintAccountInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertMintAccountMulti;
    } & ParsedAssertMintAccountMultiInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertTokenAccount;
    } & ParsedAssertTokenAccountInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertTokenAccountMulti;
    } & ParsedAssertTokenAccountMultiInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertStakeAccount;
    } & ParsedAssertStakeAccountInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertStakeAccountMulti;
    } & ParsedAssertStakeAccountMultiInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertUpgradeableLoaderAccount;
    } & ParsedAssertUpgradeableLoaderAccountInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertUpgradeableLoaderAccountMulti;
    } & ParsedAssertUpgradeableLoaderAccountMultiInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertSysvarClock;
    } & ParsedAssertSysvarClockInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertMerkleTreeAccount;
    } & ParsedAssertMerkleTreeAccountInstruction<TProgram>)
  | ({
      instructionType: LighthouseInstruction.AssertBubblegumTreeConfigAccount;
    } & ParsedAssertBubblegumTreeConfigAccountInstruction<TProgram>);
