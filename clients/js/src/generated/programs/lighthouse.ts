/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU8Encoder } from '@solana/codecs';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  lighthausProgramError,
  lighthausProgramErrorCode,
  getlighthausProgramErrorFromCode,
} from '../errors';
import {
  ParsedAssertAccountDataInstruction,
  ParsedAssertAccountDeltaInstruction,
  ParsedAssertAccountInfoInstruction,
  ParsedAssertAccountInfoMultiInstruction,
  ParsedAssertBubblegumTreeConfigAccountInstruction,
  ParsedAssertMerkleTreeAccountInstruction,
  ParsedAssertMintAccountInstruction,
  ParsedAssertMintAccountMultiInstruction,
  ParsedAssertStakeAccountInstruction,
  ParsedAssertStakeAccountMultiInstruction,
  ParsedAssertSysvarClockInstruction,
  ParsedAssertTokenAccountInstruction,
  ParsedAssertTokenAccountMultiInstruction,
  ParsedAssertUpgradeableLoaderAccountInstruction,
  ParsedAssertUpgradeableLoaderAccountMultiInstruction,
  ParsedMemoryCloseInstruction,
  ParsedMemoryWriteInstruction,
} from '../instructions';
import { memcmp } from '../shared';

export const lighthaus_PROGRAM_ADDRESS =
  'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>;

export type lighthausProgram =
  Program<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'> &
    ProgramWithErrors<lighthausProgramErrorCode, lighthausProgramError>;

export function getlighthausProgram(): lighthausProgram {
  return {
    name: 'lighthaus',
    address: lighthaus_PROGRAM_ADDRESS,
    getErrorFromCode(code: lighthausProgramErrorCode, cause?: Error) {
      return getlighthausProgramErrorFromCode(code, cause);
    },
  };
}

export enum lighthausInstruction {
  MemoryWrite,
  MemoryClose,
  AssertAccountData,
  AssertAccountDelta,
  AssertAccountInfo,
  AssertAccountInfoMulti,
  AssertMintAccount,
  AssertMintAccountMulti,
  AssertTokenAccount,
  AssertTokenAccountMulti,
  AssertStakeAccount,
  AssertStakeAccountMulti,
  AssertUpgradeableLoaderAccount,
  AssertUpgradeableLoaderAccountMulti,
  AssertSysvarClock,
  AssertMerkleTreeAccount,
  AssertBubblegumTreeConfigAccount,
}

export function identifylighthausInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): lighthausInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU8Encoder().encode(0), 0)) {
    return lighthausInstruction.MemoryWrite;
  }
  if (memcmp(data, getU8Encoder().encode(1), 0)) {
    return lighthausInstruction.MemoryClose;
  }
  if (memcmp(data, getU8Encoder().encode(2), 0)) {
    return lighthausInstruction.AssertAccountData;
  }
  if (memcmp(data, getU8Encoder().encode(3), 0)) {
    return lighthausInstruction.AssertAccountDelta;
  }
  if (memcmp(data, getU8Encoder().encode(4), 0)) {
    return lighthausInstruction.AssertAccountInfo;
  }
  if (memcmp(data, getU8Encoder().encode(5), 0)) {
    return lighthausInstruction.AssertAccountInfoMulti;
  }
  if (memcmp(data, getU8Encoder().encode(6), 0)) {
    return lighthausInstruction.AssertMintAccount;
  }
  if (memcmp(data, getU8Encoder().encode(7), 0)) {
    return lighthausInstruction.AssertMintAccountMulti;
  }
  if (memcmp(data, getU8Encoder().encode(8), 0)) {
    return lighthausInstruction.AssertTokenAccount;
  }
  if (memcmp(data, getU8Encoder().encode(9), 0)) {
    return lighthausInstruction.AssertTokenAccountMulti;
  }
  if (memcmp(data, getU8Encoder().encode(10), 0)) {
    return lighthausInstruction.AssertStakeAccount;
  }
  if (memcmp(data, getU8Encoder().encode(11), 0)) {
    return lighthausInstruction.AssertStakeAccountMulti;
  }
  if (memcmp(data, getU8Encoder().encode(12), 0)) {
    return lighthausInstruction.AssertUpgradeableLoaderAccount;
  }
  if (memcmp(data, getU8Encoder().encode(13), 0)) {
    return lighthausInstruction.AssertUpgradeableLoaderAccountMulti;
  }
  if (memcmp(data, getU8Encoder().encode(14), 0)) {
    return lighthausInstruction.AssertSysvarClock;
  }
  if (memcmp(data, getU8Encoder().encode(15), 0)) {
    return lighthausInstruction.AssertMerkleTreeAccount;
  }
  if (memcmp(data, getU8Encoder().encode(16), 0)) {
    return lighthausInstruction.AssertBubblegumTreeConfigAccount;
  }
  throw new Error(
    'The provided instruction could not be identified as a lighthaus instruction.'
  );
}

export type ParsedlighthausInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
> =
  | ({
      instructionType: lighthausInstruction.MemoryWrite;
    } & ParsedMemoryWriteInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.MemoryClose;
    } & ParsedMemoryCloseInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertAccountData;
    } & ParsedAssertAccountDataInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertAccountDelta;
    } & ParsedAssertAccountDeltaInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertAccountInfo;
    } & ParsedAssertAccountInfoInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertAccountInfoMulti;
    } & ParsedAssertAccountInfoMultiInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertMintAccount;
    } & ParsedAssertMintAccountInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertMintAccountMulti;
    } & ParsedAssertMintAccountMultiInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertTokenAccount;
    } & ParsedAssertTokenAccountInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertTokenAccountMulti;
    } & ParsedAssertTokenAccountMultiInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertStakeAccount;
    } & ParsedAssertStakeAccountInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertStakeAccountMulti;
    } & ParsedAssertStakeAccountMultiInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertUpgradeableLoaderAccount;
    } & ParsedAssertUpgradeableLoaderAccountInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertUpgradeableLoaderAccountMulti;
    } & ParsedAssertUpgradeableLoaderAccountMultiInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertSysvarClock;
    } & ParsedAssertSysvarClockInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertMerkleTreeAccount;
    } & ParsedAssertMerkleTreeAccountInstruction<TProgram>)
  | ({
      instructionType: lighthausInstruction.AssertBubblegumTreeConfigAccount;
    } & ParsedAssertBubblegumTreeConfigAccountInstruction<TProgram>);
