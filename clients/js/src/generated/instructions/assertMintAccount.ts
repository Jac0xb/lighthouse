/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  LogLevel,
  LogLevelArgs,
  MintAccountAssertion,
  MintAccountAssertionArgs,
  getLogLevelSerializer,
  getMintAccountAssertionSerializer,
} from '../types';

// Accounts.
export type AssertMintAccountInstructionAccounts = {
  /** Target account to be asserted */
  targetAccount: PublicKey | Pda;
};

// Data.
export type AssertMintAccountInstructionData = {
  discriminator: number;
  logLevel: LogLevel;
  assertion: MintAccountAssertion;
};

export type AssertMintAccountInstructionDataArgs = {
  logLevel?: LogLevelArgs;
  assertion: MintAccountAssertionArgs;
};

export function getAssertMintAccountInstructionDataSerializer(): Serializer<
  AssertMintAccountInstructionDataArgs,
  AssertMintAccountInstructionData
> {
  return mapSerializer<
    AssertMintAccountInstructionDataArgs,
    any,
    AssertMintAccountInstructionData
  >(
    struct<AssertMintAccountInstructionData>(
      [
        ['discriminator', u8()],
        ['logLevel', getLogLevelSerializer()],
        ['assertion', getMintAccountAssertionSerializer()],
      ],
      { description: 'AssertMintAccountInstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: 7,
      logLevel: value.logLevel ?? LogLevel.Silent,
    })
  ) as Serializer<
    AssertMintAccountInstructionDataArgs,
    AssertMintAccountInstructionData
  >;
}

// Args.
export type AssertMintAccountInstructionArgs =
  AssertMintAccountInstructionDataArgs;

// Instruction.
export function assertMintAccount(
  context: Pick<Context, 'programs'>,
  input: AssertMintAccountInstructionAccounts & AssertMintAccountInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'lighthouse',
    'L2TExMFKdjpN9kozasaurPirfHy9P8sbXoAN1qA3S95'
  );

  // Accounts.
  const resolvedAccounts = {
    targetAccount: {
      index: 0,
      isWritable: false as boolean,
      value: input.targetAccount ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: AssertMintAccountInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getAssertMintAccountInstructionDataSerializer().serialize(
    resolvedArgs as AssertMintAccountInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
