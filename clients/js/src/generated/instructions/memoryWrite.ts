/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u16,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import { WriteType, WriteTypeArgs, getWriteTypeSerializer } from '../types';

// Accounts.
export type MemoryWriteInstructionAccounts = {
  /** Lighthouse program */
  programId?: PublicKey | Pda;
  /** System program */
  systemProgram?: PublicKey | Pda;
  /** Payer account */
  payer?: Signer;
  /** Memory account */
  memory: PublicKey | Pda;
  /** Account to be written to memory */
  sourceAccount: PublicKey | Pda;
};

// Data.
export type MemoryWriteInstructionData = {
  discriminator: number;
  memoryId: number;
  memoryBump: number;
  writeOffset: number;
  writeType: WriteType;
};

export type MemoryWriteInstructionDataArgs = {
  memoryId?: number;
  memoryBump: number;
  writeOffset: number;
  writeType: WriteTypeArgs;
};

export function getMemoryWriteInstructionDataSerializer(): Serializer<
  MemoryWriteInstructionDataArgs,
  MemoryWriteInstructionData
> {
  return mapSerializer<
    MemoryWriteInstructionDataArgs,
    any,
    MemoryWriteInstructionData
  >(
    struct<MemoryWriteInstructionData>(
      [
        ['discriminator', u8()],
        ['memoryId', u8()],
        ['memoryBump', u8()],
        ['writeOffset', u16()],
        ['writeType', getWriteTypeSerializer()],
      ],
      { description: 'MemoryWriteInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 0, memoryId: value.memoryId ?? 0 })
  ) as Serializer<MemoryWriteInstructionDataArgs, MemoryWriteInstructionData>;
}

// Args.
export type MemoryWriteInstructionArgs = MemoryWriteInstructionDataArgs;

// Instruction.
export function memoryWrite(
  context: Pick<Context, 'payer' | 'programs'>,
  input: MemoryWriteInstructionAccounts & MemoryWriteInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'lighthouse',
    'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
  );

  // Accounts.
  const resolvedAccounts = {
    programId: {
      index: 0,
      isWritable: false as boolean,
      value: input.programId ?? null,
    },
    systemProgram: {
      index: 1,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
    payer: {
      index: 2,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    memory: {
      index: 3,
      isWritable: true as boolean,
      value: input.memory ?? null,
    },
    sourceAccount: {
      index: 4,
      isWritable: false as boolean,
      value: input.sourceAccount ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: MemoryWriteInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.programId.value) {
    resolvedAccounts.programId.value = programId;
    resolvedAccounts.programId.isWritable = false;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getMemoryWriteInstructionDataSerializer().serialize(
    resolvedArgs as MemoryWriteInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
