/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
} from '@solana/instructions';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  LogLevel,
  LogLevelArgs,
  UpgradeableLoaderStateAssertion,
  UpgradeableLoaderStateAssertionArgs,
  getLogLevelDecoder,
  getLogLevelEncoder,
  getUpgradeableLoaderStateAssertionDecoder,
  getUpgradeableLoaderStateAssertionEncoder,
} from '../types';

export type AssertUpgradeableLoaderAccountInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountTargetAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTargetAccount extends string
        ? ReadonlyAccount<TAccountTargetAccount>
        : TAccountTargetAccount,
      ...TRemainingAccounts
    ]
  >;

export type AssertUpgradeableLoaderAccountInstructionWithSigners<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountTargetAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTargetAccount extends string
        ? ReadonlyAccount<TAccountTargetAccount>
        : TAccountTargetAccount,
      ...TRemainingAccounts
    ]
  >;

export type AssertUpgradeableLoaderAccountInstructionData = {
  discriminator: number;
  logLevel: LogLevel;
  assertion: UpgradeableLoaderStateAssertion;
};

export type AssertUpgradeableLoaderAccountInstructionDataArgs = {
  logLevel: LogLevelArgs;
  assertion: UpgradeableLoaderStateAssertionArgs;
};

export function getAssertUpgradeableLoaderAccountInstructionDataEncoder(): Encoder<AssertUpgradeableLoaderAccountInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['logLevel', getLogLevelEncoder()],
      ['assertion', getUpgradeableLoaderStateAssertionEncoder()],
    ]),
    (value) => ({ ...value, discriminator: 9 })
  );
}

export function getAssertUpgradeableLoaderAccountInstructionDataDecoder(): Decoder<AssertUpgradeableLoaderAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['logLevel', getLogLevelDecoder()],
    ['assertion', getUpgradeableLoaderStateAssertionDecoder()],
  ]);
}

export function getAssertUpgradeableLoaderAccountInstructionDataCodec(): Codec<
  AssertUpgradeableLoaderAccountInstructionDataArgs,
  AssertUpgradeableLoaderAccountInstructionData
> {
  return combineCodec(
    getAssertUpgradeableLoaderAccountInstructionDataEncoder(),
    getAssertUpgradeableLoaderAccountInstructionDataDecoder()
  );
}

export type AssertUpgradeableLoaderAccountInput<
  TAccountTargetAccount extends string
> = {
  /** Target account */
  targetAccount: Address<TAccountTargetAccount>;
  logLevel: AssertUpgradeableLoaderAccountInstructionDataArgs['logLevel'];
  assertion: AssertUpgradeableLoaderAccountInstructionDataArgs['assertion'];
};

export type AssertUpgradeableLoaderAccountInputWithSigners<
  TAccountTargetAccount extends string
> = {
  /** Target account */
  targetAccount: Address<TAccountTargetAccount>;
  logLevel: AssertUpgradeableLoaderAccountInstructionDataArgs['logLevel'];
  assertion: AssertUpgradeableLoaderAccountInstructionDataArgs['assertion'];
};

export function getAssertUpgradeableLoaderAccountInstruction<
  TAccountTargetAccount extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertUpgradeableLoaderAccountInputWithSigners<TAccountTargetAccount>
): AssertUpgradeableLoaderAccountInstructionWithSigners<
  TProgram,
  TAccountTargetAccount
>;
export function getAssertUpgradeableLoaderAccountInstruction<
  TAccountTargetAccount extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertUpgradeableLoaderAccountInput<TAccountTargetAccount>
): AssertUpgradeableLoaderAccountInstruction<TProgram, TAccountTargetAccount>;
export function getAssertUpgradeableLoaderAccountInstruction<
  TAccountTargetAccount extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertUpgradeableLoaderAccountInput<TAccountTargetAccount>
): IInstruction {
  // Program address.
  const programAddress =
    'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getAssertUpgradeableLoaderAccountInstructionRaw<
      TProgram,
      TAccountTargetAccount
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    targetAccount: { value: input.targetAccount ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getAssertUpgradeableLoaderAccountInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as AssertUpgradeableLoaderAccountInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getAssertUpgradeableLoaderAccountInstructionRaw<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountTargetAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    targetAccount: TAccountTargetAccount extends string
      ? Address<TAccountTargetAccount>
      : TAccountTargetAccount;
  },
  args: AssertUpgradeableLoaderAccountInstructionDataArgs,
  programAddress: Address<TProgram> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.targetAccount, AccountRole.READONLY),
      ...(remainingAccounts ?? []),
    ],
    data: getAssertUpgradeableLoaderAccountInstructionDataEncoder().encode(
      args
    ),
    programAddress,
  } as AssertUpgradeableLoaderAccountInstruction<
    TProgram,
    TAccountTargetAccount,
    TRemainingAccounts
  >;
}

export type ParsedAssertUpgradeableLoaderAccountInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Target account */
    targetAccount: TAccountMetas[0];
  };
  data: AssertUpgradeableLoaderAccountInstructionData;
};

export function parseAssertUpgradeableLoaderAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssertUpgradeableLoaderAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      targetAccount: getNextAccount(),
    },
    data: getAssertUpgradeableLoaderAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
