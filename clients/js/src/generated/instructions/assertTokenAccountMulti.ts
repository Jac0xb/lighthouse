/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
} from '@solana/instructions';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  LogLevel,
  LogLevelArgs,
  TokenAccountAssertion,
  TokenAccountAssertionArgs,
  getLogLevelDecoder,
  getLogLevelEncoder,
  getTokenAccountAssertionDecoder,
  getTokenAccountAssertionEncoder,
} from '../types';

export type AssertTokenAccountMultiInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountTargetAccount extends string | IAccountMeta<string> = string,
  TAccountLighthouseProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTargetAccount extends string
        ? ReadonlyAccount<TAccountTargetAccount>
        : TAccountTargetAccount,
      TAccountLighthouseProgram extends string
        ? ReadonlyAccount<TAccountLighthouseProgram>
        : TAccountLighthouseProgram,
      ...TRemainingAccounts
    ]
  >;

export type AssertTokenAccountMultiInstructionWithSigners<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountTargetAccount extends string | IAccountMeta<string> = string,
  TAccountLighthouseProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTargetAccount extends string
        ? ReadonlyAccount<TAccountTargetAccount>
        : TAccountTargetAccount,
      TAccountLighthouseProgram extends string
        ? ReadonlyAccount<TAccountLighthouseProgram>
        : TAccountLighthouseProgram,
      ...TRemainingAccounts
    ]
  >;

export type AssertTokenAccountMultiInstructionData = {
  discriminator: number;
  logLevel: LogLevel;
  assertions: Array<TokenAccountAssertion>;
};

export type AssertTokenAccountMultiInstructionDataArgs = {
  logLevel: LogLevelArgs;
  assertions: Array<TokenAccountAssertionArgs>;
};

export function getAssertTokenAccountMultiInstructionDataEncoder(): Encoder<AssertTokenAccountMultiInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['logLevel', getLogLevelEncoder()],
      ['assertions', getArrayEncoder(getTokenAccountAssertionEncoder())],
    ]),
    (value) => ({ ...value, discriminator: 7 })
  );
}

export function getAssertTokenAccountMultiInstructionDataDecoder(): Decoder<AssertTokenAccountMultiInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['logLevel', getLogLevelDecoder()],
    ['assertions', getArrayDecoder(getTokenAccountAssertionDecoder())],
  ]);
}

export function getAssertTokenAccountMultiInstructionDataCodec(): Codec<
  AssertTokenAccountMultiInstructionDataArgs,
  AssertTokenAccountMultiInstructionData
> {
  return combineCodec(
    getAssertTokenAccountMultiInstructionDataEncoder(),
    getAssertTokenAccountMultiInstructionDataDecoder()
  );
}

export type AssertTokenAccountMultiInput<
  TAccountTargetAccount extends string,
  TAccountLighthouseProgram extends string
> = {
  /** Target account */
  targetAccount: Address<TAccountTargetAccount>;
  /** Lighthouse Program */
  lighthouseProgram: Address<TAccountLighthouseProgram>;
  logLevel: AssertTokenAccountMultiInstructionDataArgs['logLevel'];
  assertions: AssertTokenAccountMultiInstructionDataArgs['assertions'];
};

export type AssertTokenAccountMultiInputWithSigners<
  TAccountTargetAccount extends string,
  TAccountLighthouseProgram extends string
> = {
  /** Target account */
  targetAccount: Address<TAccountTargetAccount>;
  /** Lighthouse Program */
  lighthouseProgram: Address<TAccountLighthouseProgram>;
  logLevel: AssertTokenAccountMultiInstructionDataArgs['logLevel'];
  assertions: AssertTokenAccountMultiInstructionDataArgs['assertions'];
};

export function getAssertTokenAccountMultiInstruction<
  TAccountTargetAccount extends string,
  TAccountLighthouseProgram extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertTokenAccountMultiInputWithSigners<
    TAccountTargetAccount,
    TAccountLighthouseProgram
  >
): AssertTokenAccountMultiInstructionWithSigners<
  TProgram,
  TAccountTargetAccount,
  TAccountLighthouseProgram
>;
export function getAssertTokenAccountMultiInstruction<
  TAccountTargetAccount extends string,
  TAccountLighthouseProgram extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertTokenAccountMultiInput<
    TAccountTargetAccount,
    TAccountLighthouseProgram
  >
): AssertTokenAccountMultiInstruction<
  TProgram,
  TAccountTargetAccount,
  TAccountLighthouseProgram
>;
export function getAssertTokenAccountMultiInstruction<
  TAccountTargetAccount extends string,
  TAccountLighthouseProgram extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertTokenAccountMultiInput<
    TAccountTargetAccount,
    TAccountLighthouseProgram
  >
): IInstruction {
  // Program address.
  const programAddress =
    'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getAssertTokenAccountMultiInstructionRaw<
      TProgram,
      TAccountTargetAccount,
      TAccountLighthouseProgram
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    targetAccount: { value: input.targetAccount ?? null, isWritable: false },
    lighthouseProgram: {
      value: input.lighthouseProgram ?? null,
      isWritable: false,
    },
  };

  // Original args.
  const args = { ...input };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getAssertTokenAccountMultiInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as AssertTokenAccountMultiInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getAssertTokenAccountMultiInstructionRaw<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountTargetAccount extends string | IAccountMeta<string> = string,
  TAccountLighthouseProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    targetAccount: TAccountTargetAccount extends string
      ? Address<TAccountTargetAccount>
      : TAccountTargetAccount;
    lighthouseProgram: TAccountLighthouseProgram extends string
      ? Address<TAccountLighthouseProgram>
      : TAccountLighthouseProgram;
  },
  args: AssertTokenAccountMultiInstructionDataArgs,
  programAddress: Address<TProgram> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.targetAccount, AccountRole.READONLY),
      accountMetaWithDefault(accounts.lighthouseProgram, AccountRole.READONLY),
      ...(remainingAccounts ?? []),
    ],
    data: getAssertTokenAccountMultiInstructionDataEncoder().encode(args),
    programAddress,
  } as AssertTokenAccountMultiInstruction<
    TProgram,
    TAccountTargetAccount,
    TAccountLighthouseProgram,
    TRemainingAccounts
  >;
}

export type ParsedAssertTokenAccountMultiInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Target account */
    targetAccount: TAccountMetas[0];
    /** Lighthouse Program */
    lighthouseProgram: TAccountMetas[1];
  };
  data: AssertTokenAccountMultiInstructionData;
};

export function parseAssertTokenAccountMultiInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssertTokenAccountMultiInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      targetAccount: getNextAccount(),
      lighthouseProgram: getNextAccount(),
    },
    data: getAssertTokenAccountMultiInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
