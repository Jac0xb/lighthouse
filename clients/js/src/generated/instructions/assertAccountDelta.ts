/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
} from '@solana/instructions';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  AccountDeltaAssertion,
  AccountDeltaAssertionArgs,
  LogLevel,
  LogLevelArgs,
  getAccountDeltaAssertionDecoder,
  getAccountDeltaAssertionEncoder,
  getLogLevelDecoder,
  getLogLevelEncoder,
} from '../types';

export type AssertAccountDeltaInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountAccountA extends string | IAccountMeta<string> = string,
  TAccountAccountB extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAccountA extends string
        ? ReadonlyAccount<TAccountAccountA>
        : TAccountAccountA,
      TAccountAccountB extends string
        ? ReadonlyAccount<TAccountAccountB>
        : TAccountAccountB,
      ...TRemainingAccounts
    ]
  >;

export type AssertAccountDeltaInstructionWithSigners<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountAccountA extends string | IAccountMeta<string> = string,
  TAccountAccountB extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAccountA extends string
        ? ReadonlyAccount<TAccountAccountA>
        : TAccountAccountA,
      TAccountAccountB extends string
        ? ReadonlyAccount<TAccountAccountB>
        : TAccountAccountB,
      ...TRemainingAccounts
    ]
  >;

export type AssertAccountDeltaInstructionData = {
  discriminator: number;
  logLevel: LogLevel;
  assertion: AccountDeltaAssertion;
};

export type AssertAccountDeltaInstructionDataArgs = {
  logLevel: LogLevelArgs;
  assertion: AccountDeltaAssertionArgs;
};

export function getAssertAccountDeltaInstructionDataEncoder(): Encoder<AssertAccountDeltaInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['logLevel', getLogLevelEncoder()],
      ['assertion', getAccountDeltaAssertionEncoder()],
    ]),
    (value) => ({ ...value, discriminator: 3 })
  );
}

export function getAssertAccountDeltaInstructionDataDecoder(): Decoder<AssertAccountDeltaInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['logLevel', getLogLevelDecoder()],
    ['assertion', getAccountDeltaAssertionDecoder()],
  ]);
}

export function getAssertAccountDeltaInstructionDataCodec(): Codec<
  AssertAccountDeltaInstructionDataArgs,
  AssertAccountDeltaInstructionData
> {
  return combineCodec(
    getAssertAccountDeltaInstructionDataEncoder(),
    getAssertAccountDeltaInstructionDataDecoder()
  );
}

export type AssertAccountDeltaInput<
  TAccountAccountA extends string,
  TAccountAccountB extends string
> = {
  /** Account A where the delta is calculated from */
  accountA: Address<TAccountAccountA>;
  /** Account B where the delta is calculated to */
  accountB: Address<TAccountAccountB>;
  logLevel: AssertAccountDeltaInstructionDataArgs['logLevel'];
  assertion: AssertAccountDeltaInstructionDataArgs['assertion'];
};

export type AssertAccountDeltaInputWithSigners<
  TAccountAccountA extends string,
  TAccountAccountB extends string
> = {
  /** Account A where the delta is calculated from */
  accountA: Address<TAccountAccountA>;
  /** Account B where the delta is calculated to */
  accountB: Address<TAccountAccountB>;
  logLevel: AssertAccountDeltaInstructionDataArgs['logLevel'];
  assertion: AssertAccountDeltaInstructionDataArgs['assertion'];
};

export function getAssertAccountDeltaInstruction<
  TAccountAccountA extends string,
  TAccountAccountB extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertAccountDeltaInputWithSigners<TAccountAccountA, TAccountAccountB>
): AssertAccountDeltaInstructionWithSigners<
  TProgram,
  TAccountAccountA,
  TAccountAccountB
>;
export function getAssertAccountDeltaInstruction<
  TAccountAccountA extends string,
  TAccountAccountB extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertAccountDeltaInput<TAccountAccountA, TAccountAccountB>
): AssertAccountDeltaInstruction<TProgram, TAccountAccountA, TAccountAccountB>;
export function getAssertAccountDeltaInstruction<
  TAccountAccountA extends string,
  TAccountAccountB extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertAccountDeltaInput<TAccountAccountA, TAccountAccountB>
): IInstruction {
  // Program address.
  const programAddress =
    'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getAssertAccountDeltaInstructionRaw<
      TProgram,
      TAccountAccountA,
      TAccountAccountB
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    accountA: { value: input.accountA ?? null, isWritable: false },
    accountB: { value: input.accountB ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getAssertAccountDeltaInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as AssertAccountDeltaInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getAssertAccountDeltaInstructionRaw<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountAccountA extends string | IAccountMeta<string> = string,
  TAccountAccountB extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    accountA: TAccountAccountA extends string
      ? Address<TAccountAccountA>
      : TAccountAccountA;
    accountB: TAccountAccountB extends string
      ? Address<TAccountAccountB>
      : TAccountAccountB;
  },
  args: AssertAccountDeltaInstructionDataArgs,
  programAddress: Address<TProgram> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.accountA, AccountRole.READONLY),
      accountMetaWithDefault(accounts.accountB, AccountRole.READONLY),
      ...(remainingAccounts ?? []),
    ],
    data: getAssertAccountDeltaInstructionDataEncoder().encode(args),
    programAddress,
  } as AssertAccountDeltaInstruction<
    TProgram,
    TAccountAccountA,
    TAccountAccountB,
    TRemainingAccounts
  >;
}

export type ParsedAssertAccountDeltaInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Account A where the delta is calculated from */
    accountA: TAccountMetas[0];
    /** Account B where the delta is calculated to */
    accountB: TAccountMetas[1];
  };
  data: AssertAccountDeltaInstructionData;
};

export function parseAssertAccountDeltaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssertAccountDeltaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      accountA: getNextAccount(),
      accountB: getNextAccount(),
    },
    data: getAssertAccountDeltaInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
