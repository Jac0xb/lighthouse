/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
} from '@solana/instructions';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  DataValueDeltaAssertion,
  DataValueDeltaAssertionArgs,
  LogLevel,
  LogLevelArgs,
  getDataValueDeltaAssertionDecoder,
  getDataValueDeltaAssertionEncoder,
  getLogLevelDecoder,
  getLogLevelEncoder,
} from '../types';

export type AssertAccountDataDeltaInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountLeftAccount extends string | IAccountMeta<string> = string,
  TAccountRightAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountLeftAccount extends string
        ? ReadonlyAccount<TAccountLeftAccount>
        : TAccountLeftAccount,
      TAccountRightAccount extends string
        ? ReadonlyAccount<TAccountRightAccount>
        : TAccountRightAccount,
      ...TRemainingAccounts
    ]
  >;

export type AssertAccountDataDeltaInstructionWithSigners<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountLeftAccount extends string | IAccountMeta<string> = string,
  TAccountRightAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountLeftAccount extends string
        ? ReadonlyAccount<TAccountLeftAccount>
        : TAccountLeftAccount,
      TAccountRightAccount extends string
        ? ReadonlyAccount<TAccountRightAccount>
        : TAccountRightAccount,
      ...TRemainingAccounts
    ]
  >;

export type AssertAccountDataDeltaInstructionData = {
  discriminator: number;
  logLevel: LogLevel;
  offsetLeft: number;
  offsetRight: number;
  assertion: DataValueDeltaAssertion;
};

export type AssertAccountDataDeltaInstructionDataArgs = {
  logLevel: LogLevelArgs;
  offsetLeft: number;
  offsetRight: number;
  assertion: DataValueDeltaAssertionArgs;
};

export function getAssertAccountDataDeltaInstructionDataEncoder(): Encoder<AssertAccountDataDeltaInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['logLevel', getLogLevelEncoder()],
      ['offsetLeft', getU16Encoder()],
      ['offsetRight', getU16Encoder()],
      ['assertion', getDataValueDeltaAssertionEncoder()],
    ]),
    (value) => ({ ...value, discriminator: 2 })
  );
}

export function getAssertAccountDataDeltaInstructionDataDecoder(): Decoder<AssertAccountDataDeltaInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['logLevel', getLogLevelDecoder()],
    ['offsetLeft', getU16Decoder()],
    ['offsetRight', getU16Decoder()],
    ['assertion', getDataValueDeltaAssertionDecoder()],
  ]);
}

export function getAssertAccountDataDeltaInstructionDataCodec(): Codec<
  AssertAccountDataDeltaInstructionDataArgs,
  AssertAccountDataDeltaInstructionData
> {
  return combineCodec(
    getAssertAccountDataDeltaInstructionDataEncoder(),
    getAssertAccountDataDeltaInstructionDataDecoder()
  );
}

export type AssertAccountDataDeltaInput<
  TAccountLeftAccount extends string,
  TAccountRightAccount extends string
> = {
  /** Left account */
  leftAccount: Address<TAccountLeftAccount>;
  /** Right account */
  rightAccount: Address<TAccountRightAccount>;
  logLevel: AssertAccountDataDeltaInstructionDataArgs['logLevel'];
  offsetLeft: AssertAccountDataDeltaInstructionDataArgs['offsetLeft'];
  offsetRight: AssertAccountDataDeltaInstructionDataArgs['offsetRight'];
  assertion: AssertAccountDataDeltaInstructionDataArgs['assertion'];
};

export type AssertAccountDataDeltaInputWithSigners<
  TAccountLeftAccount extends string,
  TAccountRightAccount extends string
> = {
  /** Left account */
  leftAccount: Address<TAccountLeftAccount>;
  /** Right account */
  rightAccount: Address<TAccountRightAccount>;
  logLevel: AssertAccountDataDeltaInstructionDataArgs['logLevel'];
  offsetLeft: AssertAccountDataDeltaInstructionDataArgs['offsetLeft'];
  offsetRight: AssertAccountDataDeltaInstructionDataArgs['offsetRight'];
  assertion: AssertAccountDataDeltaInstructionDataArgs['assertion'];
};

export function getAssertAccountDataDeltaInstruction<
  TAccountLeftAccount extends string,
  TAccountRightAccount extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertAccountDataDeltaInputWithSigners<
    TAccountLeftAccount,
    TAccountRightAccount
  >
): AssertAccountDataDeltaInstructionWithSigners<
  TProgram,
  TAccountLeftAccount,
  TAccountRightAccount
>;
export function getAssertAccountDataDeltaInstruction<
  TAccountLeftAccount extends string,
  TAccountRightAccount extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertAccountDataDeltaInput<TAccountLeftAccount, TAccountRightAccount>
): AssertAccountDataDeltaInstruction<
  TProgram,
  TAccountLeftAccount,
  TAccountRightAccount
>;
export function getAssertAccountDataDeltaInstruction<
  TAccountLeftAccount extends string,
  TAccountRightAccount extends string,
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'
>(
  input: AssertAccountDataDeltaInput<TAccountLeftAccount, TAccountRightAccount>
): IInstruction {
  // Program address.
  const programAddress =
    'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getAssertAccountDataDeltaInstructionRaw<
      TProgram,
      TAccountLeftAccount,
      TAccountRightAccount
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    leftAccount: { value: input.leftAccount ?? null, isWritable: false },
    rightAccount: { value: input.rightAccount ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getAssertAccountDataDeltaInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as AssertAccountDataDeltaInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getAssertAccountDataDeltaInstructionRaw<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountLeftAccount extends string | IAccountMeta<string> = string,
  TAccountRightAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    leftAccount: TAccountLeftAccount extends string
      ? Address<TAccountLeftAccount>
      : TAccountLeftAccount;
    rightAccount: TAccountRightAccount extends string
      ? Address<TAccountRightAccount>
      : TAccountRightAccount;
  },
  args: AssertAccountDataDeltaInstructionDataArgs,
  programAddress: Address<TProgram> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.leftAccount, AccountRole.READONLY),
      accountMetaWithDefault(accounts.rightAccount, AccountRole.READONLY),
      ...(remainingAccounts ?? []),
    ],
    data: getAssertAccountDataDeltaInstructionDataEncoder().encode(args),
    programAddress,
  } as AssertAccountDataDeltaInstruction<
    TProgram,
    TAccountLeftAccount,
    TAccountRightAccount,
    TRemainingAccounts
  >;
}

export type ParsedAssertAccountDataDeltaInstruction<
  TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Left account */
    leftAccount: TAccountMetas[0];
    /** Right account */
    rightAccount: TAccountMetas[1];
  };
  data: AssertAccountDataDeltaInstructionData;
};

export function parseAssertAccountDataDeltaInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssertAccountDataDeltaInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      leftAccount: getNextAccount(),
      rightAccount: getNextAccount(),
    },
    data: getAssertAccountDataDeltaInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
