/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  bool,
  dataEnum,
  option,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  IntegerOperator,
  IntegerOperatorArgs,
  getEquatableOperatorSerializer,
  getIntegerOperatorSerializer,
} from '.';

export type MintAccountAssertion =
  | {
      __kind: 'MintAuthority';
      value: Option<PublicKey>;
      operator: EquatableOperator;
    }
  | { __kind: 'Supply'; value: bigint; operator: IntegerOperator }
  | { __kind: 'Decimals'; value: number; operator: IntegerOperator }
  | { __kind: 'IsInitialized'; value: boolean; operator: EquatableOperator }
  | {
      __kind: 'FreezeAuthority';
      value: Option<PublicKey>;
      operator: EquatableOperator;
    };

export type MintAccountAssertionArgs =
  | {
      __kind: 'MintAuthority';
      value: OptionOrNullable<PublicKey>;
      operator: EquatableOperatorArgs;
    }
  | { __kind: 'Supply'; value: number | bigint; operator: IntegerOperatorArgs }
  | { __kind: 'Decimals'; value: number; operator: IntegerOperatorArgs }
  | { __kind: 'IsInitialized'; value: boolean; operator: EquatableOperatorArgs }
  | {
      __kind: 'FreezeAuthority';
      value: OptionOrNullable<PublicKey>;
      operator: EquatableOperatorArgs;
    };

export function getMintAccountAssertionSerializer(): Serializer<
  MintAccountAssertionArgs,
  MintAccountAssertion
> {
  return dataEnum<MintAccountAssertion>(
    [
      [
        'MintAuthority',
        struct<GetDataEnumKindContent<MintAccountAssertion, 'MintAuthority'>>([
          ['value', option(publicKeySerializer())],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'Supply',
        struct<GetDataEnumKindContent<MintAccountAssertion, 'Supply'>>([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'Decimals',
        struct<GetDataEnumKindContent<MintAccountAssertion, 'Decimals'>>([
          ['value', u8()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'IsInitialized',
        struct<GetDataEnumKindContent<MintAccountAssertion, 'IsInitialized'>>([
          ['value', bool()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'FreezeAuthority',
        struct<GetDataEnumKindContent<MintAccountAssertion, 'FreezeAuthority'>>(
          [
            ['value', option(publicKeySerializer())],
            ['operator', getEquatableOperatorSerializer()],
          ]
        ),
      ],
    ],
    { description: 'MintAccountAssertion' }
  ) as Serializer<MintAccountAssertionArgs, MintAccountAssertion>;
}

// Data Enum Helpers.
export function mintAccountAssertion(
  kind: 'MintAuthority',
  data: GetDataEnumKindContent<MintAccountAssertionArgs, 'MintAuthority'>
): GetDataEnumKind<MintAccountAssertionArgs, 'MintAuthority'>;
export function mintAccountAssertion(
  kind: 'Supply',
  data: GetDataEnumKindContent<MintAccountAssertionArgs, 'Supply'>
): GetDataEnumKind<MintAccountAssertionArgs, 'Supply'>;
export function mintAccountAssertion(
  kind: 'Decimals',
  data: GetDataEnumKindContent<MintAccountAssertionArgs, 'Decimals'>
): GetDataEnumKind<MintAccountAssertionArgs, 'Decimals'>;
export function mintAccountAssertion(
  kind: 'IsInitialized',
  data: GetDataEnumKindContent<MintAccountAssertionArgs, 'IsInitialized'>
): GetDataEnumKind<MintAccountAssertionArgs, 'IsInitialized'>;
export function mintAccountAssertion(
  kind: 'FreezeAuthority',
  data: GetDataEnumKindContent<MintAccountAssertionArgs, 'FreezeAuthority'>
): GetDataEnumKind<MintAccountAssertionArgs, 'FreezeAuthority'>;
export function mintAccountAssertion<
  K extends MintAccountAssertionArgs['__kind'],
>(kind: K, data?: any): Extract<MintAccountAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isMintAccountAssertion<
  K extends MintAccountAssertion['__kind'],
>(
  kind: K,
  value: MintAccountAssertion
): value is MintAccountAssertion & { __kind: K } {
  return value.__kind === kind;
}
