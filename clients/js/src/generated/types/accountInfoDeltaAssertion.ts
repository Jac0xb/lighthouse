/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  i128,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  IntegerOperator,
  IntegerOperatorArgs,
  getEquatableOperatorSerializer,
  getIntegerOperatorSerializer,
} from '.';

export type AccountInfoDeltaAssertion =
  | { __kind: 'Lamports'; value: bigint; operator: IntegerOperator }
  | { __kind: 'DataLength'; value: bigint; operator: IntegerOperator }
  | { __kind: 'Owner'; operator: EquatableOperator }
  | { __kind: 'RentEpoch'; value: bigint; operator: IntegerOperator };

export type AccountInfoDeltaAssertionArgs =
  | {
      __kind: 'Lamports';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'DataLength';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | { __kind: 'Owner'; operator: EquatableOperatorArgs }
  | {
      __kind: 'RentEpoch';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    };

export function getAccountInfoDeltaAssertionSerializer(): Serializer<
  AccountInfoDeltaAssertionArgs,
  AccountInfoDeltaAssertion
> {
  return dataEnum<AccountInfoDeltaAssertion>(
    [
      [
        'Lamports',
        struct<GetDataEnumKindContent<AccountInfoDeltaAssertion, 'Lamports'>>([
          ['value', i128()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'DataLength',
        struct<GetDataEnumKindContent<AccountInfoDeltaAssertion, 'DataLength'>>(
          [
            ['value', i128()],
            ['operator', getIntegerOperatorSerializer()],
          ]
        ),
      ],
      [
        'Owner',
        struct<GetDataEnumKindContent<AccountInfoDeltaAssertion, 'Owner'>>([
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'RentEpoch',
        struct<GetDataEnumKindContent<AccountInfoDeltaAssertion, 'RentEpoch'>>([
          ['value', i128()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
    ],
    { description: 'AccountInfoDeltaAssertion' }
  ) as Serializer<AccountInfoDeltaAssertionArgs, AccountInfoDeltaAssertion>;
}

// Data Enum Helpers.
export function accountInfoDeltaAssertion(
  kind: 'Lamports',
  data: GetDataEnumKindContent<AccountInfoDeltaAssertionArgs, 'Lamports'>
): GetDataEnumKind<AccountInfoDeltaAssertionArgs, 'Lamports'>;
export function accountInfoDeltaAssertion(
  kind: 'DataLength',
  data: GetDataEnumKindContent<AccountInfoDeltaAssertionArgs, 'DataLength'>
): GetDataEnumKind<AccountInfoDeltaAssertionArgs, 'DataLength'>;
export function accountInfoDeltaAssertion(
  kind: 'Owner',
  data: GetDataEnumKindContent<AccountInfoDeltaAssertionArgs, 'Owner'>
): GetDataEnumKind<AccountInfoDeltaAssertionArgs, 'Owner'>;
export function accountInfoDeltaAssertion(
  kind: 'RentEpoch',
  data: GetDataEnumKindContent<AccountInfoDeltaAssertionArgs, 'RentEpoch'>
): GetDataEnumKind<AccountInfoDeltaAssertionArgs, 'RentEpoch'>;
export function accountInfoDeltaAssertion<
  K extends AccountInfoDeltaAssertionArgs['__kind']
>(kind: K, data?: any): Extract<AccountInfoDeltaAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isAccountInfoDeltaAssertion<
  K extends AccountInfoDeltaAssertion['__kind']
>(
  kind: K,
  value: AccountInfoDeltaAssertion
): value is AccountInfoDeltaAssertion & { __kind: K } {
  return value.__kind === kind;
}
