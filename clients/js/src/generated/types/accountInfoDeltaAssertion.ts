/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  combineCodec,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getI128Decoder,
  getI128Encoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs';
import {
  ComparableOperator,
  ComparableOperatorArgs,
  EquatableOperator,
  EquatableOperatorArgs,
  IntegerOperator,
  IntegerOperatorArgs,
  getComparableOperatorDecoder,
  getComparableOperatorEncoder,
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
  getIntegerOperatorDecoder,
  getIntegerOperatorEncoder,
} from '.';

export type AccountInfoDeltaAssertion =
  | { __kind: 'Lamports'; value: bigint; operator: IntegerOperator }
  | { __kind: 'DataLength'; operator: ComparableOperator }
  | { __kind: 'Owner'; operator: EquatableOperator }
  | { __kind: 'RentEpoch'; value: bigint; operator: ComparableOperator };

export type AccountInfoDeltaAssertionArgs =
  | {
      __kind: 'Lamports';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | { __kind: 'DataLength'; operator: ComparableOperatorArgs }
  | { __kind: 'Owner'; operator: EquatableOperatorArgs }
  | {
      __kind: 'RentEpoch';
      value: number | bigint;
      operator: ComparableOperatorArgs;
    };

export function getAccountInfoDeltaAssertionEncoder(): Encoder<AccountInfoDeltaAssertionArgs> {
  return getDataEnumEncoder([
    [
      'Lamports',
      getStructEncoder([
        ['value', getI128Encoder()],
        ['operator', getIntegerOperatorEncoder()],
      ]),
    ],
    [
      'DataLength',
      getStructEncoder([['operator', getComparableOperatorEncoder()]]),
    ],
    ['Owner', getStructEncoder([['operator', getEquatableOperatorEncoder()]])],
    [
      'RentEpoch',
      getStructEncoder([
        ['value', getI128Encoder()],
        ['operator', getComparableOperatorEncoder()],
      ]),
    ],
  ]);
}

export function getAccountInfoDeltaAssertionDecoder(): Decoder<AccountInfoDeltaAssertion> {
  return getDataEnumDecoder([
    [
      'Lamports',
      getStructDecoder([
        ['value', getI128Decoder()],
        ['operator', getIntegerOperatorDecoder()],
      ]),
    ],
    [
      'DataLength',
      getStructDecoder([['operator', getComparableOperatorDecoder()]]),
    ],
    ['Owner', getStructDecoder([['operator', getEquatableOperatorDecoder()]])],
    [
      'RentEpoch',
      getStructDecoder([
        ['value', getI128Decoder()],
        ['operator', getComparableOperatorDecoder()],
      ]),
    ],
  ]);
}

export function getAccountInfoDeltaAssertionCodec(): Codec<
  AccountInfoDeltaAssertionArgs,
  AccountInfoDeltaAssertion
> {
  return combineCodec(
    getAccountInfoDeltaAssertionEncoder(),
    getAccountInfoDeltaAssertionDecoder()
  );
}

// Data Enum Helpers.
export function accountInfoDeltaAssertion(
  kind: 'Lamports',
  data: GetDataEnumKindContent<AccountInfoDeltaAssertionArgs, 'Lamports'>
): GetDataEnumKind<AccountInfoDeltaAssertionArgs, 'Lamports'>;
export function accountInfoDeltaAssertion(
  kind: 'DataLength',
  data: GetDataEnumKindContent<AccountInfoDeltaAssertionArgs, 'DataLength'>
): GetDataEnumKind<AccountInfoDeltaAssertionArgs, 'DataLength'>;
export function accountInfoDeltaAssertion(
  kind: 'Owner',
  data: GetDataEnumKindContent<AccountInfoDeltaAssertionArgs, 'Owner'>
): GetDataEnumKind<AccountInfoDeltaAssertionArgs, 'Owner'>;
export function accountInfoDeltaAssertion(
  kind: 'RentEpoch',
  data: GetDataEnumKindContent<AccountInfoDeltaAssertionArgs, 'RentEpoch'>
): GetDataEnumKind<AccountInfoDeltaAssertionArgs, 'RentEpoch'>;
export function accountInfoDeltaAssertion<
  K extends AccountInfoDeltaAssertionArgs['__kind']
>(kind: K, data?: any): Extract<AccountInfoDeltaAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isAccountInfoDeltaAssertion<
  K extends AccountInfoDeltaAssertion['__kind']
>(
  kind: K,
  value: AccountInfoDeltaAssertion
): value is AccountInfoDeltaAssertion & { __kind: K } {
  return value.__kind === kind;
}
