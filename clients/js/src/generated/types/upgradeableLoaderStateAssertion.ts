/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
} from '@metaplex-foundation/umi/serializers';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  UpgradableBufferAssertion,
  UpgradableBufferAssertionArgs,
  UpgradeableLoaderStateType,
  UpgradeableLoaderStateTypeArgs,
  UpgradeableProgramAssertion,
  UpgradeableProgramAssertionArgs,
  UpgradeableProgramDataAssertion,
  UpgradeableProgramDataAssertionArgs,
  getEquatableOperatorSerializer,
  getUpgradableBufferAssertionSerializer,
  getUpgradeableLoaderStateTypeSerializer,
  getUpgradeableProgramAssertionSerializer,
  getUpgradeableProgramDataAssertionSerializer,
} from '.';

export type UpgradeableLoaderStateAssertion =
  | {
      __kind: 'State';
      value: UpgradeableLoaderStateType;
      operator: EquatableOperator;
    }
  | { __kind: 'Buffer'; fields: [UpgradableBufferAssertion] }
  | { __kind: 'Program'; fields: [UpgradeableProgramAssertion] }
  | { __kind: 'ProgramData'; fields: [UpgradeableProgramDataAssertion] };

export type UpgradeableLoaderStateAssertionArgs =
  | {
      __kind: 'State';
      value: UpgradeableLoaderStateTypeArgs;
      operator: EquatableOperatorArgs;
    }
  | { __kind: 'Buffer'; fields: [UpgradableBufferAssertionArgs] }
  | { __kind: 'Program'; fields: [UpgradeableProgramAssertionArgs] }
  | { __kind: 'ProgramData'; fields: [UpgradeableProgramDataAssertionArgs] };

export function getUpgradeableLoaderStateAssertionSerializer(): Serializer<
  UpgradeableLoaderStateAssertionArgs,
  UpgradeableLoaderStateAssertion
> {
  return dataEnum<UpgradeableLoaderStateAssertion>(
    [
      [
        'State',
        struct<
          GetDataEnumKindContent<UpgradeableLoaderStateAssertion, 'State'>
        >([
          ['value', getUpgradeableLoaderStateTypeSerializer()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'Buffer',
        struct<
          GetDataEnumKindContent<UpgradeableLoaderStateAssertion, 'Buffer'>
        >([['fields', tuple([getUpgradableBufferAssertionSerializer()])]]),
      ],
      [
        'Program',
        struct<
          GetDataEnumKindContent<UpgradeableLoaderStateAssertion, 'Program'>
        >([['fields', tuple([getUpgradeableProgramAssertionSerializer()])]]),
      ],
      [
        'ProgramData',
        struct<
          GetDataEnumKindContent<UpgradeableLoaderStateAssertion, 'ProgramData'>
        >([
          ['fields', tuple([getUpgradeableProgramDataAssertionSerializer()])],
        ]),
      ],
    ],
    { description: 'UpgradeableLoaderStateAssertion' }
  ) as Serializer<
    UpgradeableLoaderStateAssertionArgs,
    UpgradeableLoaderStateAssertion
  >;
}

// Data Enum Helpers.
export function upgradeableLoaderStateAssertion(
  kind: 'State',
  data: GetDataEnumKindContent<UpgradeableLoaderStateAssertionArgs, 'State'>
): GetDataEnumKind<UpgradeableLoaderStateAssertionArgs, 'State'>;
export function upgradeableLoaderStateAssertion(
  kind: 'Buffer',
  data: GetDataEnumKindContent<
    UpgradeableLoaderStateAssertionArgs,
    'Buffer'
  >['fields']
): GetDataEnumKind<UpgradeableLoaderStateAssertionArgs, 'Buffer'>;
export function upgradeableLoaderStateAssertion(
  kind: 'Program',
  data: GetDataEnumKindContent<
    UpgradeableLoaderStateAssertionArgs,
    'Program'
  >['fields']
): GetDataEnumKind<UpgradeableLoaderStateAssertionArgs, 'Program'>;
export function upgradeableLoaderStateAssertion(
  kind: 'ProgramData',
  data: GetDataEnumKindContent<
    UpgradeableLoaderStateAssertionArgs,
    'ProgramData'
  >['fields']
): GetDataEnumKind<UpgradeableLoaderStateAssertionArgs, 'ProgramData'>;
export function upgradeableLoaderStateAssertion<
  K extends UpgradeableLoaderStateAssertionArgs['__kind']
>(
  kind: K,
  data?: any
): Extract<UpgradeableLoaderStateAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isUpgradeableLoaderStateAssertion<
  K extends UpgradeableLoaderStateAssertion['__kind']
>(
  kind: K,
  value: UpgradeableLoaderStateAssertion
): value is UpgradeableLoaderStateAssertion & { __kind: K } {
  return value.__kind === kind;
}
