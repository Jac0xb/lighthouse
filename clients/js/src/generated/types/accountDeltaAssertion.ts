/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  AccountInfoDeltaAssertion,
  AccountInfoDeltaAssertionArgs,
  DataValueDeltaAssertion,
  DataValueDeltaAssertionArgs,
  getAccountInfoDeltaAssertionSerializer,
  getDataValueDeltaAssertionSerializer,
} from '.';
import {
  CompactU64,
  CompactU64Args,
  getCompactU64Serializer,
} from '../../hooked';

export type AccountDeltaAssertion =
  | {
      __kind: 'AccountInfo';
      aOffset: CompactU64;
      assertion: AccountInfoDeltaAssertion;
    }
  | {
      __kind: 'Data';
      aOffset: CompactU64;
      bOffset: CompactU64;
      assertion: DataValueDeltaAssertion;
    };

export type AccountDeltaAssertionArgs =
  | {
      __kind: 'AccountInfo';
      aOffset: CompactU64Args;
      assertion: AccountInfoDeltaAssertionArgs;
    }
  | {
      __kind: 'Data';
      aOffset: CompactU64Args;
      bOffset: CompactU64Args;
      assertion: DataValueDeltaAssertionArgs;
    };

export function getAccountDeltaAssertionSerializer(): Serializer<
  AccountDeltaAssertionArgs,
  AccountDeltaAssertion
> {
  return dataEnum<AccountDeltaAssertion>(
    [
      [
        'AccountInfo',
        struct<GetDataEnumKindContent<AccountDeltaAssertion, 'AccountInfo'>>([
          ['aOffset', getCompactU64Serializer()],
          ['assertion', getAccountInfoDeltaAssertionSerializer()],
        ]),
      ],
      [
        'Data',
        struct<GetDataEnumKindContent<AccountDeltaAssertion, 'Data'>>([
          ['aOffset', getCompactU64Serializer()],
          ['bOffset', getCompactU64Serializer()],
          ['assertion', getDataValueDeltaAssertionSerializer()],
        ]),
      ],
    ],
    { description: 'AccountDeltaAssertion' }
  ) as Serializer<AccountDeltaAssertionArgs, AccountDeltaAssertion>;
}

// Data Enum Helpers.
export function accountDeltaAssertion(
  kind: 'AccountInfo',
  data: GetDataEnumKindContent<AccountDeltaAssertionArgs, 'AccountInfo'>
): GetDataEnumKind<AccountDeltaAssertionArgs, 'AccountInfo'>;
export function accountDeltaAssertion(
  kind: 'Data',
  data: GetDataEnumKindContent<AccountDeltaAssertionArgs, 'Data'>
): GetDataEnumKind<AccountDeltaAssertionArgs, 'Data'>;
export function accountDeltaAssertion<
  K extends AccountDeltaAssertionArgs['__kind'],
>(kind: K, data?: any): Extract<AccountDeltaAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isAccountDeltaAssertion<
  K extends AccountDeltaAssertion['__kind'],
>(
  kind: K,
  value: AccountDeltaAssertion
): value is AccountDeltaAssertion & { __kind: K } {
  return value.__kind === kind;
}
