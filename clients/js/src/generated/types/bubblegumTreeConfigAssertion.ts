/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  bool,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  IntegerOperator,
  IntegerOperatorArgs,
  getEquatableOperatorSerializer,
  getIntegerOperatorSerializer,
} from '.';

export type BubblegumTreeConfigAssertion =
  | { __kind: 'TreeCreator'; value: PublicKey; operator: EquatableOperator }
  | { __kind: 'TreeDelegate'; value: PublicKey; operator: EquatableOperator }
  | { __kind: 'TotalMintCapacity'; value: bigint; operator: IntegerOperator }
  | { __kind: 'NumMinted'; value: bigint; operator: IntegerOperator }
  | { __kind: 'IsPublic'; value: boolean; operator: EquatableOperator }
  | { __kind: 'IsDecompressible'; value: number; operator: EquatableOperator };

export type BubblegumTreeConfigAssertionArgs =
  | { __kind: 'TreeCreator'; value: PublicKey; operator: EquatableOperatorArgs }
  | {
      __kind: 'TreeDelegate';
      value: PublicKey;
      operator: EquatableOperatorArgs;
    }
  | {
      __kind: 'TotalMintCapacity';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'NumMinted';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | { __kind: 'IsPublic'; value: boolean; operator: EquatableOperatorArgs }
  | {
      __kind: 'IsDecompressible';
      value: number;
      operator: EquatableOperatorArgs;
    };

export function getBubblegumTreeConfigAssertionSerializer(): Serializer<
  BubblegumTreeConfigAssertionArgs,
  BubblegumTreeConfigAssertion
> {
  return dataEnum<BubblegumTreeConfigAssertion>(
    [
      [
        'TreeCreator',
        struct<
          GetDataEnumKindContent<BubblegumTreeConfigAssertion, 'TreeCreator'>
        >([
          ['value', publicKeySerializer()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'TreeDelegate',
        struct<
          GetDataEnumKindContent<BubblegumTreeConfigAssertion, 'TreeDelegate'>
        >([
          ['value', publicKeySerializer()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'TotalMintCapacity',
        struct<
          GetDataEnumKindContent<
            BubblegumTreeConfigAssertion,
            'TotalMintCapacity'
          >
        >([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'NumMinted',
        struct<
          GetDataEnumKindContent<BubblegumTreeConfigAssertion, 'NumMinted'>
        >([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'IsPublic',
        struct<
          GetDataEnumKindContent<BubblegumTreeConfigAssertion, 'IsPublic'>
        >([
          ['value', bool()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'IsDecompressible',
        struct<
          GetDataEnumKindContent<
            BubblegumTreeConfigAssertion,
            'IsDecompressible'
          >
        >([
          ['value', u8()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
    ],
    { description: 'BubblegumTreeConfigAssertion' }
  ) as Serializer<
    BubblegumTreeConfigAssertionArgs,
    BubblegumTreeConfigAssertion
  >;
}

// Data Enum Helpers.
export function bubblegumTreeConfigAssertion(
  kind: 'TreeCreator',
  data: GetDataEnumKindContent<BubblegumTreeConfigAssertionArgs, 'TreeCreator'>
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'TreeCreator'>;
export function bubblegumTreeConfigAssertion(
  kind: 'TreeDelegate',
  data: GetDataEnumKindContent<BubblegumTreeConfigAssertionArgs, 'TreeDelegate'>
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'TreeDelegate'>;
export function bubblegumTreeConfigAssertion(
  kind: 'TotalMintCapacity',
  data: GetDataEnumKindContent<
    BubblegumTreeConfigAssertionArgs,
    'TotalMintCapacity'
  >
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'TotalMintCapacity'>;
export function bubblegumTreeConfigAssertion(
  kind: 'NumMinted',
  data: GetDataEnumKindContent<BubblegumTreeConfigAssertionArgs, 'NumMinted'>
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'NumMinted'>;
export function bubblegumTreeConfigAssertion(
  kind: 'IsPublic',
  data: GetDataEnumKindContent<BubblegumTreeConfigAssertionArgs, 'IsPublic'>
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'IsPublic'>;
export function bubblegumTreeConfigAssertion(
  kind: 'IsDecompressible',
  data: GetDataEnumKindContent<
    BubblegumTreeConfigAssertionArgs,
    'IsDecompressible'
  >
): GetDataEnumKind<BubblegumTreeConfigAssertionArgs, 'IsDecompressible'>;
export function bubblegumTreeConfigAssertion<
  K extends BubblegumTreeConfigAssertionArgs['__kind'],
>(
  kind: K,
  data?: any
): Extract<BubblegumTreeConfigAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isBubblegumTreeConfigAssertion<
  K extends BubblegumTreeConfigAssertion['__kind'],
>(
  kind: K,
  value: BubblegumTreeConfigAssertion
): value is BubblegumTreeConfigAssertion & { __kind: K } {
  return value.__kind === kind;
}
