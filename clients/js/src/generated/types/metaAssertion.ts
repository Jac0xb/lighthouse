/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  combineCodec,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
} from '@solana/codecs';
import {
  ComparableOperator,
  ComparableOperatorArgs,
  EquatableOperator,
  EquatableOperatorArgs,
  getComparableOperatorDecoder,
  getComparableOperatorEncoder,
  getEquatableOperatorDecoder,
  getEquatableOperatorEncoder,
} from '.';

export type MetaAssertion =
  | { __kind: 'RentExemptReserve'; value: bigint; operator: ComparableOperator }
  | { __kind: 'AuthorizedStaker'; value: Address; operator: EquatableOperator }
  | {
      __kind: 'AuthorizedWithdrawer';
      value: Address;
      operator: EquatableOperator;
    }
  | {
      __kind: 'LockupUnixTimestamp';
      value: bigint;
      operator: ComparableOperator;
    }
  | { __kind: 'LockupEpoch'; value: bigint; operator: ComparableOperator }
  | { __kind: 'LockupCustodian'; value: Address; operator: EquatableOperator };

export type MetaAssertionArgs =
  | {
      __kind: 'RentExemptReserve';
      value: number | bigint;
      operator: ComparableOperatorArgs;
    }
  | {
      __kind: 'AuthorizedStaker';
      value: Address;
      operator: EquatableOperatorArgs;
    }
  | {
      __kind: 'AuthorizedWithdrawer';
      value: Address;
      operator: EquatableOperatorArgs;
    }
  | {
      __kind: 'LockupUnixTimestamp';
      value: number | bigint;
      operator: ComparableOperatorArgs;
    }
  | {
      __kind: 'LockupEpoch';
      value: number | bigint;
      operator: ComparableOperatorArgs;
    }
  | {
      __kind: 'LockupCustodian';
      value: Address;
      operator: EquatableOperatorArgs;
    };

export function getMetaAssertionEncoder(): Encoder<MetaAssertionArgs> {
  return getDataEnumEncoder([
    [
      'RentExemptReserve',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getComparableOperatorEncoder()],
      ]),
    ],
    [
      'AuthorizedStaker',
      getStructEncoder([
        ['value', getAddressEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'AuthorizedWithdrawer',
      getStructEncoder([
        ['value', getAddressEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
    [
      'LockupUnixTimestamp',
      getStructEncoder([
        ['value', getI64Encoder()],
        ['operator', getComparableOperatorEncoder()],
      ]),
    ],
    [
      'LockupEpoch',
      getStructEncoder([
        ['value', getU64Encoder()],
        ['operator', getComparableOperatorEncoder()],
      ]),
    ],
    [
      'LockupCustodian',
      getStructEncoder([
        ['value', getAddressEncoder()],
        ['operator', getEquatableOperatorEncoder()],
      ]),
    ],
  ]);
}

export function getMetaAssertionDecoder(): Decoder<MetaAssertion> {
  return getDataEnumDecoder([
    [
      'RentExemptReserve',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getComparableOperatorDecoder()],
      ]),
    ],
    [
      'AuthorizedStaker',
      getStructDecoder([
        ['value', getAddressDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'AuthorizedWithdrawer',
      getStructDecoder([
        ['value', getAddressDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
    [
      'LockupUnixTimestamp',
      getStructDecoder([
        ['value', getI64Decoder()],
        ['operator', getComparableOperatorDecoder()],
      ]),
    ],
    [
      'LockupEpoch',
      getStructDecoder([
        ['value', getU64Decoder()],
        ['operator', getComparableOperatorDecoder()],
      ]),
    ],
    [
      'LockupCustodian',
      getStructDecoder([
        ['value', getAddressDecoder()],
        ['operator', getEquatableOperatorDecoder()],
      ]),
    ],
  ]);
}

export function getMetaAssertionCodec(): Codec<
  MetaAssertionArgs,
  MetaAssertion
> {
  return combineCodec(getMetaAssertionEncoder(), getMetaAssertionDecoder());
}

// Data Enum Helpers.
export function metaAssertion(
  kind: 'RentExemptReserve',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'RentExemptReserve'>
): GetDataEnumKind<MetaAssertionArgs, 'RentExemptReserve'>;
export function metaAssertion(
  kind: 'AuthorizedStaker',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'AuthorizedStaker'>
): GetDataEnumKind<MetaAssertionArgs, 'AuthorizedStaker'>;
export function metaAssertion(
  kind: 'AuthorizedWithdrawer',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'AuthorizedWithdrawer'>
): GetDataEnumKind<MetaAssertionArgs, 'AuthorizedWithdrawer'>;
export function metaAssertion(
  kind: 'LockupUnixTimestamp',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'LockupUnixTimestamp'>
): GetDataEnumKind<MetaAssertionArgs, 'LockupUnixTimestamp'>;
export function metaAssertion(
  kind: 'LockupEpoch',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'LockupEpoch'>
): GetDataEnumKind<MetaAssertionArgs, 'LockupEpoch'>;
export function metaAssertion(
  kind: 'LockupCustodian',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'LockupCustodian'>
): GetDataEnumKind<MetaAssertionArgs, 'LockupCustodian'>;
export function metaAssertion<K extends MetaAssertionArgs['__kind']>(
  kind: K,
  data?: any
): Extract<MetaAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isMetaAssertion<K extends MetaAssertion['__kind']>(
  kind: K,
  value: MetaAssertion
): value is MetaAssertion & { __kind: K } {
  return value.__kind === kind;
}
