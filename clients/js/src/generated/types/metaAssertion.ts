/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  i64,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  getEquatableOperatorSerializer,
} from '.';
import {
  IntegerOperator,
  IntegerOperatorArgs,
  getIntegerOperatorSerializer,
} from '../../hooked';

export type MetaAssertion =
  | { __kind: 'RentExemptReserve'; value: bigint; operator: IntegerOperator }
  | {
      __kind: 'AuthorizedStaker';
      value: PublicKey;
      operator: EquatableOperator;
    }
  | {
      __kind: 'AuthorizedWithdrawer';
      value: PublicKey;
      operator: EquatableOperator;
    }
  | { __kind: 'LockupUnixTimestamp'; value: bigint; operator: IntegerOperator }
  | { __kind: 'LockupEpoch'; value: bigint; operator: IntegerOperator }
  | {
      __kind: 'LockupCustodian';
      value: PublicKey;
      operator: EquatableOperator;
    };

export type MetaAssertionArgs =
  | {
      __kind: 'RentExemptReserve';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'AuthorizedStaker';
      value: PublicKey;
      operator: EquatableOperatorArgs;
    }
  | {
      __kind: 'AuthorizedWithdrawer';
      value: PublicKey;
      operator: EquatableOperatorArgs;
    }
  | {
      __kind: 'LockupUnixTimestamp';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'LockupEpoch';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'LockupCustodian';
      value: PublicKey;
      operator: EquatableOperatorArgs;
    };

export function getMetaAssertionSerializer(): Serializer<
  MetaAssertionArgs,
  MetaAssertion
> {
  return dataEnum<MetaAssertion>(
    [
      [
        'RentExemptReserve',
        struct<GetDataEnumKindContent<MetaAssertion, 'RentExemptReserve'>>([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'AuthorizedStaker',
        struct<GetDataEnumKindContent<MetaAssertion, 'AuthorizedStaker'>>([
          ['value', publicKeySerializer()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'AuthorizedWithdrawer',
        struct<GetDataEnumKindContent<MetaAssertion, 'AuthorizedWithdrawer'>>([
          ['value', publicKeySerializer()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'LockupUnixTimestamp',
        struct<GetDataEnumKindContent<MetaAssertion, 'LockupUnixTimestamp'>>([
          ['value', i64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'LockupEpoch',
        struct<GetDataEnumKindContent<MetaAssertion, 'LockupEpoch'>>([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'LockupCustodian',
        struct<GetDataEnumKindContent<MetaAssertion, 'LockupCustodian'>>([
          ['value', publicKeySerializer()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
    ],
    { description: 'MetaAssertion' }
  ) as Serializer<MetaAssertionArgs, MetaAssertion>;
}

// Data Enum Helpers.
export function metaAssertion(
  kind: 'RentExemptReserve',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'RentExemptReserve'>
): GetDataEnumKind<MetaAssertionArgs, 'RentExemptReserve'>;
export function metaAssertion(
  kind: 'AuthorizedStaker',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'AuthorizedStaker'>
): GetDataEnumKind<MetaAssertionArgs, 'AuthorizedStaker'>;
export function metaAssertion(
  kind: 'AuthorizedWithdrawer',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'AuthorizedWithdrawer'>
): GetDataEnumKind<MetaAssertionArgs, 'AuthorizedWithdrawer'>;
export function metaAssertion(
  kind: 'LockupUnixTimestamp',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'LockupUnixTimestamp'>
): GetDataEnumKind<MetaAssertionArgs, 'LockupUnixTimestamp'>;
export function metaAssertion(
  kind: 'LockupEpoch',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'LockupEpoch'>
): GetDataEnumKind<MetaAssertionArgs, 'LockupEpoch'>;
export function metaAssertion(
  kind: 'LockupCustodian',
  data: GetDataEnumKindContent<MetaAssertionArgs, 'LockupCustodian'>
): GetDataEnumKind<MetaAssertionArgs, 'LockupCustodian'>;
export function metaAssertion<K extends MetaAssertionArgs['__kind']>(
  kind: K,
  data?: any
): Extract<MetaAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isMetaAssertion<K extends MetaAssertion['__kind']>(
  kind: K,
  value: MetaAssertion
): value is MetaAssertion & { __kind: K } {
  return value.__kind === kind;
}
