/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  option,
  publicKey as publicKeySerializer,
  struct,
} from '@metaplex-foundation/umi/serializers';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  getEquatableOperatorSerializer,
} from '.';

export type UpgradableBufferAssertion = {
  __kind: 'Authority';
  value: Option<PublicKey>;
  operator: EquatableOperator;
};

export type UpgradableBufferAssertionArgs = {
  __kind: 'Authority';
  value: OptionOrNullable<PublicKey>;
  operator: EquatableOperatorArgs;
};

export function getUpgradableBufferAssertionSerializer(): Serializer<
  UpgradableBufferAssertionArgs,
  UpgradableBufferAssertion
> {
  return dataEnum<UpgradableBufferAssertion>(
    [
      [
        'Authority',
        struct<GetDataEnumKindContent<UpgradableBufferAssertion, 'Authority'>>([
          ['value', option(publicKeySerializer())],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
    ],
    { description: 'UpgradableBufferAssertion' }
  ) as Serializer<UpgradableBufferAssertionArgs, UpgradableBufferAssertion>;
}

// Data Enum Helpers.
export function upgradableBufferAssertion(
  kind: 'Authority',
  data: GetDataEnumKindContent<UpgradableBufferAssertionArgs, 'Authority'>
): GetDataEnumKind<UpgradableBufferAssertionArgs, 'Authority'>;
export function upgradableBufferAssertion<
  K extends UpgradableBufferAssertionArgs['__kind']
>(kind: K, data?: any): Extract<UpgradableBufferAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isUpgradableBufferAssertion<
  K extends UpgradableBufferAssertion['__kind']
>(
  kind: K,
  value: UpgradableBufferAssertion
): value is UpgradableBufferAssertion & { __kind: K } {
  return value.__kind === kind;
}
