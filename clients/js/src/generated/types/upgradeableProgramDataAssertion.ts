/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  option,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  getEquatableOperatorSerializer,
} from '.';
import {
  IntegerOperator,
  IntegerOperatorArgs,
  getIntegerOperatorSerializer,
} from '../../hooked';

export type UpgradeableProgramDataAssertion =
  | {
      __kind: 'UpgradeAuthority';
      value: Option<PublicKey>;
      operator: EquatableOperator;
    }
  | { __kind: 'Slot'; value: bigint; operator: IntegerOperator };

export type UpgradeableProgramDataAssertionArgs =
  | {
      __kind: 'UpgradeAuthority';
      value: OptionOrNullable<PublicKey>;
      operator: EquatableOperatorArgs;
    }
  | { __kind: 'Slot'; value: number | bigint; operator: IntegerOperatorArgs };

export function getUpgradeableProgramDataAssertionSerializer(): Serializer<
  UpgradeableProgramDataAssertionArgs,
  UpgradeableProgramDataAssertion
> {
  return dataEnum<UpgradeableProgramDataAssertion>(
    [
      [
        'UpgradeAuthority',
        struct<
          GetDataEnumKindContent<
            UpgradeableProgramDataAssertion,
            'UpgradeAuthority'
          >
        >([
          ['value', option(publicKeySerializer())],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'Slot',
        struct<GetDataEnumKindContent<UpgradeableProgramDataAssertion, 'Slot'>>(
          [
            ['value', u64()],
            ['operator', getIntegerOperatorSerializer()],
          ]
        ),
      ],
    ],
    { description: 'UpgradeableProgramDataAssertion' }
  ) as Serializer<
    UpgradeableProgramDataAssertionArgs,
    UpgradeableProgramDataAssertion
  >;
}

// Data Enum Helpers.
export function upgradeableProgramDataAssertion(
  kind: 'UpgradeAuthority',
  data: GetDataEnumKindContent<
    UpgradeableProgramDataAssertionArgs,
    'UpgradeAuthority'
  >
): GetDataEnumKind<UpgradeableProgramDataAssertionArgs, 'UpgradeAuthority'>;
export function upgradeableProgramDataAssertion(
  kind: 'Slot',
  data: GetDataEnumKindContent<UpgradeableProgramDataAssertionArgs, 'Slot'>
): GetDataEnumKind<UpgradeableProgramDataAssertionArgs, 'Slot'>;
export function upgradeableProgramDataAssertion<
  K extends UpgradeableProgramDataAssertionArgs['__kind'],
>(
  kind: K,
  data?: any
): Extract<UpgradeableProgramDataAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isUpgradeableProgramDataAssertion<
  K extends UpgradeableProgramDataAssertion['__kind'],
>(
  kind: K,
  value: UpgradeableProgramDataAssertion
): value is UpgradeableProgramDataAssertion & { __kind: K } {
  return value.__kind === kind;
}
