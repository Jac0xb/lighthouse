/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  GetDataEnumKind,
  GetDataEnumKindContent,
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getI128Decoder,
  getI128Encoder,
  getI16Decoder,
  getI16Encoder,
  getI32Decoder,
  getI32Encoder,
  getI64Decoder,
  getI64Encoder,
  getI8Decoder,
  getI8Encoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU128Decoder,
  getU128Encoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs';

export type DataValue =
  | { __kind: 'Bool'; fields: [boolean] }
  | { __kind: 'U8'; fields: [number] }
  | { __kind: 'I8'; fields: [number] }
  | { __kind: 'U16'; fields: [number] }
  | { __kind: 'I16'; fields: [number] }
  | { __kind: 'U32'; fields: [number] }
  | { __kind: 'I32'; fields: [number] }
  | { __kind: 'U64'; fields: [bigint] }
  | { __kind: 'I64'; fields: [bigint] }
  | { __kind: 'U128'; fields: [bigint] }
  | { __kind: 'I128'; fields: [bigint] }
  | { __kind: 'Bytes'; fields: [Uint8Array] }
  | { __kind: 'Pubkey'; fields: [Address] };

export type DataValueArgs =
  | { __kind: 'Bool'; fields: [boolean] }
  | { __kind: 'U8'; fields: [number] }
  | { __kind: 'I8'; fields: [number] }
  | { __kind: 'U16'; fields: [number] }
  | { __kind: 'I16'; fields: [number] }
  | { __kind: 'U32'; fields: [number] }
  | { __kind: 'I32'; fields: [number] }
  | { __kind: 'U64'; fields: [number | bigint] }
  | { __kind: 'I64'; fields: [number | bigint] }
  | { __kind: 'U128'; fields: [number | bigint] }
  | { __kind: 'I128'; fields: [number | bigint] }
  | { __kind: 'Bytes'; fields: [Uint8Array] }
  | { __kind: 'Pubkey'; fields: [Address] };

export function getDataValueEncoder(): Encoder<DataValueArgs> {
  return getDataEnumEncoder([
    [
      'Bool',
      getStructEncoder([['fields', getTupleEncoder([getBooleanEncoder()])]]),
    ],
    ['U8', getStructEncoder([['fields', getTupleEncoder([getU8Encoder()])]])],
    ['I8', getStructEncoder([['fields', getTupleEncoder([getI8Encoder()])]])],
    ['U16', getStructEncoder([['fields', getTupleEncoder([getU16Encoder()])]])],
    ['I16', getStructEncoder([['fields', getTupleEncoder([getI16Encoder()])]])],
    ['U32', getStructEncoder([['fields', getTupleEncoder([getU32Encoder()])]])],
    ['I32', getStructEncoder([['fields', getTupleEncoder([getI32Encoder()])]])],
    ['U64', getStructEncoder([['fields', getTupleEncoder([getU64Encoder()])]])],
    ['I64', getStructEncoder([['fields', getTupleEncoder([getI64Encoder()])]])],
    [
      'U128',
      getStructEncoder([['fields', getTupleEncoder([getU128Encoder()])]]),
    ],
    [
      'I128',
      getStructEncoder([['fields', getTupleEncoder([getI128Encoder()])]]),
    ],
    [
      'Bytes',
      getStructEncoder([
        [
          'fields',
          getTupleEncoder([getBytesEncoder({ size: getU32Encoder() })]),
        ],
      ]),
    ],
    [
      'Pubkey',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
  ]);
}

export function getDataValueDecoder(): Decoder<DataValue> {
  return getDataEnumDecoder([
    [
      'Bool',
      getStructDecoder([['fields', getTupleDecoder([getBooleanDecoder()])]]),
    ],
    ['U8', getStructDecoder([['fields', getTupleDecoder([getU8Decoder()])]])],
    ['I8', getStructDecoder([['fields', getTupleDecoder([getI8Decoder()])]])],
    ['U16', getStructDecoder([['fields', getTupleDecoder([getU16Decoder()])]])],
    ['I16', getStructDecoder([['fields', getTupleDecoder([getI16Decoder()])]])],
    ['U32', getStructDecoder([['fields', getTupleDecoder([getU32Decoder()])]])],
    ['I32', getStructDecoder([['fields', getTupleDecoder([getI32Decoder()])]])],
    ['U64', getStructDecoder([['fields', getTupleDecoder([getU64Decoder()])]])],
    ['I64', getStructDecoder([['fields', getTupleDecoder([getI64Decoder()])]])],
    [
      'U128',
      getStructDecoder([['fields', getTupleDecoder([getU128Decoder()])]]),
    ],
    [
      'I128',
      getStructDecoder([['fields', getTupleDecoder([getI128Decoder()])]]),
    ],
    [
      'Bytes',
      getStructDecoder([
        [
          'fields',
          getTupleDecoder([getBytesDecoder({ size: getU32Decoder() })]),
        ],
      ]),
    ],
    [
      'Pubkey',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
  ]);
}

export function getDataValueCodec(): Codec<DataValueArgs, DataValue> {
  return combineCodec(getDataValueEncoder(), getDataValueDecoder());
}

// Data Enum Helpers.
export function dataValue(
  kind: 'Bool',
  data: GetDataEnumKindContent<DataValueArgs, 'Bool'>['fields']
): GetDataEnumKind<DataValueArgs, 'Bool'>;
export function dataValue(
  kind: 'U8',
  data: GetDataEnumKindContent<DataValueArgs, 'U8'>['fields']
): GetDataEnumKind<DataValueArgs, 'U8'>;
export function dataValue(
  kind: 'I8',
  data: GetDataEnumKindContent<DataValueArgs, 'I8'>['fields']
): GetDataEnumKind<DataValueArgs, 'I8'>;
export function dataValue(
  kind: 'U16',
  data: GetDataEnumKindContent<DataValueArgs, 'U16'>['fields']
): GetDataEnumKind<DataValueArgs, 'U16'>;
export function dataValue(
  kind: 'I16',
  data: GetDataEnumKindContent<DataValueArgs, 'I16'>['fields']
): GetDataEnumKind<DataValueArgs, 'I16'>;
export function dataValue(
  kind: 'U32',
  data: GetDataEnumKindContent<DataValueArgs, 'U32'>['fields']
): GetDataEnumKind<DataValueArgs, 'U32'>;
export function dataValue(
  kind: 'I32',
  data: GetDataEnumKindContent<DataValueArgs, 'I32'>['fields']
): GetDataEnumKind<DataValueArgs, 'I32'>;
export function dataValue(
  kind: 'U64',
  data: GetDataEnumKindContent<DataValueArgs, 'U64'>['fields']
): GetDataEnumKind<DataValueArgs, 'U64'>;
export function dataValue(
  kind: 'I64',
  data: GetDataEnumKindContent<DataValueArgs, 'I64'>['fields']
): GetDataEnumKind<DataValueArgs, 'I64'>;
export function dataValue(
  kind: 'U128',
  data: GetDataEnumKindContent<DataValueArgs, 'U128'>['fields']
): GetDataEnumKind<DataValueArgs, 'U128'>;
export function dataValue(
  kind: 'I128',
  data: GetDataEnumKindContent<DataValueArgs, 'I128'>['fields']
): GetDataEnumKind<DataValueArgs, 'I128'>;
export function dataValue(
  kind: 'Bytes',
  data: GetDataEnumKindContent<DataValueArgs, 'Bytes'>['fields']
): GetDataEnumKind<DataValueArgs, 'Bytes'>;
export function dataValue(
  kind: 'Pubkey',
  data: GetDataEnumKindContent<DataValueArgs, 'Pubkey'>['fields']
): GetDataEnumKind<DataValueArgs, 'Pubkey'>;
export function dataValue<K extends DataValueArgs['__kind']>(
  kind: K,
  data?: any
): Extract<DataValueArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isDataValue<K extends DataValue['__kind']>(
  kind: K,
  value: DataValue
): value is DataValue & { __kind: K } {
  return value.__kind === kind;
}
