/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  bool,
  bytes,
  dataEnum,
  i128,
  i16,
  i32,
  i64,
  i8,
  publicKey as publicKeySerializer,
  struct,
  tuple,
  u128,
  u16,
  u32,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type DataValue =
  | { __kind: 'Bool'; fields: [boolean] }
  | { __kind: 'U8'; fields: [number] }
  | { __kind: 'I8'; fields: [number] }
  | { __kind: 'U16'; fields: [number] }
  | { __kind: 'I16'; fields: [number] }
  | { __kind: 'U32'; fields: [number] }
  | { __kind: 'I32'; fields: [number] }
  | { __kind: 'U64'; fields: [bigint] }
  | { __kind: 'I64'; fields: [bigint] }
  | { __kind: 'U128'; fields: [bigint] }
  | { __kind: 'I128'; fields: [bigint] }
  | { __kind: 'Bytes'; fields: [Uint8Array] }
  | { __kind: 'Pubkey'; fields: [PublicKey] };

export type DataValueArgs =
  | { __kind: 'Bool'; fields: [boolean] }
  | { __kind: 'U8'; fields: [number] }
  | { __kind: 'I8'; fields: [number] }
  | { __kind: 'U16'; fields: [number] }
  | { __kind: 'I16'; fields: [number] }
  | { __kind: 'U32'; fields: [number] }
  | { __kind: 'I32'; fields: [number] }
  | { __kind: 'U64'; fields: [number | bigint] }
  | { __kind: 'I64'; fields: [number | bigint] }
  | { __kind: 'U128'; fields: [number | bigint] }
  | { __kind: 'I128'; fields: [number | bigint] }
  | { __kind: 'Bytes'; fields: [Uint8Array] }
  | { __kind: 'Pubkey'; fields: [PublicKey] };

export function getDataValueSerializer(): Serializer<DataValueArgs, DataValue> {
  return dataEnum<DataValue>(
    [
      [
        'Bool',
        struct<GetDataEnumKindContent<DataValue, 'Bool'>>([
          ['fields', tuple([bool()])],
        ]),
      ],
      [
        'U8',
        struct<GetDataEnumKindContent<DataValue, 'U8'>>([
          ['fields', tuple([u8()])],
        ]),
      ],
      [
        'I8',
        struct<GetDataEnumKindContent<DataValue, 'I8'>>([
          ['fields', tuple([i8()])],
        ]),
      ],
      [
        'U16',
        struct<GetDataEnumKindContent<DataValue, 'U16'>>([
          ['fields', tuple([u16()])],
        ]),
      ],
      [
        'I16',
        struct<GetDataEnumKindContent<DataValue, 'I16'>>([
          ['fields', tuple([i16()])],
        ]),
      ],
      [
        'U32',
        struct<GetDataEnumKindContent<DataValue, 'U32'>>([
          ['fields', tuple([u32()])],
        ]),
      ],
      [
        'I32',
        struct<GetDataEnumKindContent<DataValue, 'I32'>>([
          ['fields', tuple([i32()])],
        ]),
      ],
      [
        'U64',
        struct<GetDataEnumKindContent<DataValue, 'U64'>>([
          ['fields', tuple([u64()])],
        ]),
      ],
      [
        'I64',
        struct<GetDataEnumKindContent<DataValue, 'I64'>>([
          ['fields', tuple([i64()])],
        ]),
      ],
      [
        'U128',
        struct<GetDataEnumKindContent<DataValue, 'U128'>>([
          ['fields', tuple([u128()])],
        ]),
      ],
      [
        'I128',
        struct<GetDataEnumKindContent<DataValue, 'I128'>>([
          ['fields', tuple([i128()])],
        ]),
      ],
      [
        'Bytes',
        struct<GetDataEnumKindContent<DataValue, 'Bytes'>>([
          ['fields', tuple([bytes({ size: u32() })])],
        ]),
      ],
      [
        'Pubkey',
        struct<GetDataEnumKindContent<DataValue, 'Pubkey'>>([
          ['fields', tuple([publicKeySerializer()])],
        ]),
      ],
    ],
    { description: 'DataValue' }
  ) as Serializer<DataValueArgs, DataValue>;
}

// Data Enum Helpers.
export function dataValue(
  kind: 'Bool',
  data: GetDataEnumKindContent<DataValueArgs, 'Bool'>['fields']
): GetDataEnumKind<DataValueArgs, 'Bool'>;
export function dataValue(
  kind: 'U8',
  data: GetDataEnumKindContent<DataValueArgs, 'U8'>['fields']
): GetDataEnumKind<DataValueArgs, 'U8'>;
export function dataValue(
  kind: 'I8',
  data: GetDataEnumKindContent<DataValueArgs, 'I8'>['fields']
): GetDataEnumKind<DataValueArgs, 'I8'>;
export function dataValue(
  kind: 'U16',
  data: GetDataEnumKindContent<DataValueArgs, 'U16'>['fields']
): GetDataEnumKind<DataValueArgs, 'U16'>;
export function dataValue(
  kind: 'I16',
  data: GetDataEnumKindContent<DataValueArgs, 'I16'>['fields']
): GetDataEnumKind<DataValueArgs, 'I16'>;
export function dataValue(
  kind: 'U32',
  data: GetDataEnumKindContent<DataValueArgs, 'U32'>['fields']
): GetDataEnumKind<DataValueArgs, 'U32'>;
export function dataValue(
  kind: 'I32',
  data: GetDataEnumKindContent<DataValueArgs, 'I32'>['fields']
): GetDataEnumKind<DataValueArgs, 'I32'>;
export function dataValue(
  kind: 'U64',
  data: GetDataEnumKindContent<DataValueArgs, 'U64'>['fields']
): GetDataEnumKind<DataValueArgs, 'U64'>;
export function dataValue(
  kind: 'I64',
  data: GetDataEnumKindContent<DataValueArgs, 'I64'>['fields']
): GetDataEnumKind<DataValueArgs, 'I64'>;
export function dataValue(
  kind: 'U128',
  data: GetDataEnumKindContent<DataValueArgs, 'U128'>['fields']
): GetDataEnumKind<DataValueArgs, 'U128'>;
export function dataValue(
  kind: 'I128',
  data: GetDataEnumKindContent<DataValueArgs, 'I128'>['fields']
): GetDataEnumKind<DataValueArgs, 'I128'>;
export function dataValue(
  kind: 'Bytes',
  data: GetDataEnumKindContent<DataValueArgs, 'Bytes'>['fields']
): GetDataEnumKind<DataValueArgs, 'Bytes'>;
export function dataValue(
  kind: 'Pubkey',
  data: GetDataEnumKindContent<DataValueArgs, 'Pubkey'>['fields']
): GetDataEnumKind<DataValueArgs, 'Pubkey'>;
export function dataValue<K extends DataValueArgs['__kind']>(
  kind: K,
  data?: any
): Extract<DataValueArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isDataValue<K extends DataValue['__kind']>(
  kind: K,
  value: DataValue
): value is DataValue & { __kind: K } {
  return value.__kind === kind;
}
