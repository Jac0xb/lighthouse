/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  bool,
  bytes,
  dataEnum,
  option,
  publicKey as publicKeySerializer,
  struct,
  u16,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  IntegerOperator,
  IntegerOperatorArgs,
  KnownProgram,
  KnownProgramArgs,
  getEquatableOperatorSerializer,
  getIntegerOperatorSerializer,
  getKnownProgramSerializer,
} from '.';

export type AccountInfoAssertion =
  | { __kind: 'Lamports'; value: bigint; operator: IntegerOperator }
  | { __kind: 'DataLength'; value: bigint; operator: IntegerOperator }
  | { __kind: 'Owner'; value: PublicKey; operator: EquatableOperator }
  | { __kind: 'KnownOwner'; value: KnownProgram; operator: EquatableOperator }
  | { __kind: 'RentEpoch'; value: bigint; operator: IntegerOperator }
  | { __kind: 'IsSigner'; value: boolean; operator: EquatableOperator }
  | { __kind: 'IsWritable'; value: boolean; operator: EquatableOperator }
  | { __kind: 'Executable'; value: boolean; operator: EquatableOperator }
  | {
      __kind: 'VerifyDatahash';
      expectedHash: Uint8Array;
      start: Option<number>;
      length: Option<number>;
    };

export type AccountInfoAssertionArgs =
  | {
      __kind: 'Lamports';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'DataLength';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | { __kind: 'Owner'; value: PublicKey; operator: EquatableOperatorArgs }
  | {
      __kind: 'KnownOwner';
      value: KnownProgramArgs;
      operator: EquatableOperatorArgs;
    }
  | {
      __kind: 'RentEpoch';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | { __kind: 'IsSigner'; value: boolean; operator: EquatableOperatorArgs }
  | { __kind: 'IsWritable'; value: boolean; operator: EquatableOperatorArgs }
  | { __kind: 'Executable'; value: boolean; operator: EquatableOperatorArgs }
  | {
      __kind: 'VerifyDatahash';
      expectedHash: Uint8Array;
      start: OptionOrNullable<number>;
      length: OptionOrNullable<number>;
    };

export function getAccountInfoAssertionSerializer(): Serializer<
  AccountInfoAssertionArgs,
  AccountInfoAssertion
> {
  return dataEnum<AccountInfoAssertion>(
    [
      [
        'Lamports',
        struct<GetDataEnumKindContent<AccountInfoAssertion, 'Lamports'>>([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'DataLength',
        struct<GetDataEnumKindContent<AccountInfoAssertion, 'DataLength'>>([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'Owner',
        struct<GetDataEnumKindContent<AccountInfoAssertion, 'Owner'>>([
          ['value', publicKeySerializer()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'KnownOwner',
        struct<GetDataEnumKindContent<AccountInfoAssertion, 'KnownOwner'>>([
          ['value', getKnownProgramSerializer()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'RentEpoch',
        struct<GetDataEnumKindContent<AccountInfoAssertion, 'RentEpoch'>>([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'IsSigner',
        struct<GetDataEnumKindContent<AccountInfoAssertion, 'IsSigner'>>([
          ['value', bool()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'IsWritable',
        struct<GetDataEnumKindContent<AccountInfoAssertion, 'IsWritable'>>([
          ['value', bool()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'Executable',
        struct<GetDataEnumKindContent<AccountInfoAssertion, 'Executable'>>([
          ['value', bool()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'VerifyDatahash',
        struct<GetDataEnumKindContent<AccountInfoAssertion, 'VerifyDatahash'>>([
          ['expectedHash', bytes({ size: 32 })],
          ['start', option(u16())],
          ['length', option(u16())],
        ]),
      ],
    ],
    { description: 'AccountInfoAssertion' }
  ) as Serializer<AccountInfoAssertionArgs, AccountInfoAssertion>;
}

// Data Enum Helpers.
export function accountInfoAssertion(
  kind: 'Lamports',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'Lamports'>
): GetDataEnumKind<AccountInfoAssertionArgs, 'Lamports'>;
export function accountInfoAssertion(
  kind: 'DataLength',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'DataLength'>
): GetDataEnumKind<AccountInfoAssertionArgs, 'DataLength'>;
export function accountInfoAssertion(
  kind: 'Owner',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'Owner'>
): GetDataEnumKind<AccountInfoAssertionArgs, 'Owner'>;
export function accountInfoAssertion(
  kind: 'KnownOwner',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'KnownOwner'>
): GetDataEnumKind<AccountInfoAssertionArgs, 'KnownOwner'>;
export function accountInfoAssertion(
  kind: 'RentEpoch',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'RentEpoch'>
): GetDataEnumKind<AccountInfoAssertionArgs, 'RentEpoch'>;
export function accountInfoAssertion(
  kind: 'IsSigner',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'IsSigner'>
): GetDataEnumKind<AccountInfoAssertionArgs, 'IsSigner'>;
export function accountInfoAssertion(
  kind: 'IsWritable',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'IsWritable'>
): GetDataEnumKind<AccountInfoAssertionArgs, 'IsWritable'>;
export function accountInfoAssertion(
  kind: 'Executable',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'Executable'>
): GetDataEnumKind<AccountInfoAssertionArgs, 'Executable'>;
export function accountInfoAssertion(
  kind: 'VerifyDatahash',
  data: GetDataEnumKindContent<AccountInfoAssertionArgs, 'VerifyDatahash'>
): GetDataEnumKind<AccountInfoAssertionArgs, 'VerifyDatahash'>;
export function accountInfoAssertion<
  K extends AccountInfoAssertionArgs['__kind']
>(kind: K, data?: any): Extract<AccountInfoAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isAccountInfoAssertion<
  K extends AccountInfoAssertion['__kind']
>(
  kind: K,
  value: AccountInfoAssertion
): value is AccountInfoAssertion & { __kind: K } {
  return value.__kind === kind;
}
