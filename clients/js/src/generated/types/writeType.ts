/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/codecs-data-structures';
import { getU16Decoder, getU16Encoder } from '@solana/codecs-numbers';
import {
  AccountInfoField,
  AccountInfoFieldArgs,
  DataValue,
  DataValueArgs,
  getAccountInfoFieldDecoder,
  getAccountInfoFieldEncoder,
  getDataValueDecoder,
  getDataValueEncoder,
} from '.';

export type WriteType =
  | { __kind: 'AccountData'; offset: number; dataLength: number }
  | { __kind: 'AccountInfoField'; fields: [AccountInfoField] }
  | { __kind: 'DataValue'; fields: [DataValue] };

export type WriteTypeArgs =
  | { __kind: 'AccountData'; offset: number; dataLength: number }
  | { __kind: 'AccountInfoField'; fields: [AccountInfoFieldArgs] }
  | { __kind: 'DataValue'; fields: [DataValueArgs] };

export function getWriteTypeEncoder(): Encoder<WriteTypeArgs> {
  return getDataEnumEncoder([
    [
      'AccountData',
      getStructEncoder([
        ['offset', getU16Encoder()],
        ['dataLength', getU16Encoder()],
      ]),
    ],
    [
      'AccountInfoField',
      getStructEncoder([
        ['fields', getTupleEncoder([getAccountInfoFieldEncoder()])],
      ]),
    ],
    [
      'DataValue',
      getStructEncoder([['fields', getTupleEncoder([getDataValueEncoder()])]]),
    ],
  ]);
}

export function getWriteTypeDecoder(): Decoder<WriteType> {
  return getDataEnumDecoder([
    [
      'AccountData',
      getStructDecoder([
        ['offset', getU16Decoder()],
        ['dataLength', getU16Decoder()],
      ]),
    ],
    [
      'AccountInfoField',
      getStructDecoder([
        ['fields', getTupleDecoder([getAccountInfoFieldDecoder()])],
      ]),
    ],
    [
      'DataValue',
      getStructDecoder([['fields', getTupleDecoder([getDataValueDecoder()])]]),
    ],
  ]);
}

export function getWriteTypeCodec(): Codec<WriteTypeArgs, WriteType> {
  return combineCodec(getWriteTypeEncoder(), getWriteTypeDecoder());
}

// Data Enum Helpers.
export function writeType(
  kind: 'AccountData',
  data: GetDataEnumKindContent<WriteTypeArgs, 'AccountData'>
): GetDataEnumKind<WriteTypeArgs, 'AccountData'>;
export function writeType(
  kind: 'AccountInfoField',
  data: GetDataEnumKindContent<WriteTypeArgs, 'AccountInfoField'>['fields']
): GetDataEnumKind<WriteTypeArgs, 'AccountInfoField'>;
export function writeType(
  kind: 'DataValue',
  data: GetDataEnumKindContent<WriteTypeArgs, 'DataValue'>['fields']
): GetDataEnumKind<WriteTypeArgs, 'DataValue'>;
export function writeType<K extends WriteTypeArgs['__kind']>(
  kind: K,
  data?: any
): Extract<WriteTypeArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isWriteType<K extends WriteType['__kind']>(
  kind: K,
  value: WriteType
): value is WriteType & { __kind: K } {
  return value.__kind === kind;
}
