/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  struct,
  tuple,
  u16,
} from '@metaplex-foundation/umi/serializers';
import {
  AccountInfoField,
  AccountInfoFieldArgs,
  ClockField,
  ClockFieldArgs,
  DataValue,
  DataValueArgs,
  getAccountInfoFieldSerializer,
  getClockFieldSerializer,
  getDataValueSerializer,
} from '.';

export type WriteType =
  | { __kind: 'AccountData'; offset: number; dataLength: number }
  | { __kind: 'AccountInfoField'; fields: [AccountInfoField] }
  | { __kind: 'DataValue'; fields: [DataValue] }
  | { __kind: 'Clock'; fields: [ClockField] };

export type WriteTypeArgs =
  | { __kind: 'AccountData'; offset: number; dataLength: number }
  | { __kind: 'AccountInfoField'; fields: [AccountInfoFieldArgs] }
  | { __kind: 'DataValue'; fields: [DataValueArgs] }
  | { __kind: 'Clock'; fields: [ClockFieldArgs] };

export function getWriteTypeSerializer(): Serializer<WriteTypeArgs, WriteType> {
  return dataEnum<WriteType>(
    [
      [
        'AccountData',
        struct<GetDataEnumKindContent<WriteType, 'AccountData'>>([
          ['offset', u16()],
          ['dataLength', u16()],
        ]),
      ],
      [
        'AccountInfoField',
        struct<GetDataEnumKindContent<WriteType, 'AccountInfoField'>>([
          ['fields', tuple([getAccountInfoFieldSerializer()])],
        ]),
      ],
      [
        'DataValue',
        struct<GetDataEnumKindContent<WriteType, 'DataValue'>>([
          ['fields', tuple([getDataValueSerializer()])],
        ]),
      ],
      [
        'Clock',
        struct<GetDataEnumKindContent<WriteType, 'Clock'>>([
          ['fields', tuple([getClockFieldSerializer()])],
        ]),
      ],
    ],
    { description: 'WriteType' }
  ) as Serializer<WriteTypeArgs, WriteType>;
}

// Data Enum Helpers.
export function writeType(
  kind: 'AccountData',
  data: GetDataEnumKindContent<WriteTypeArgs, 'AccountData'>
): GetDataEnumKind<WriteTypeArgs, 'AccountData'>;
export function writeType(
  kind: 'AccountInfoField',
  data: GetDataEnumKindContent<WriteTypeArgs, 'AccountInfoField'>['fields']
): GetDataEnumKind<WriteTypeArgs, 'AccountInfoField'>;
export function writeType(
  kind: 'DataValue',
  data: GetDataEnumKindContent<WriteTypeArgs, 'DataValue'>['fields']
): GetDataEnumKind<WriteTypeArgs, 'DataValue'>;
export function writeType(
  kind: 'Clock',
  data: GetDataEnumKindContent<WriteTypeArgs, 'Clock'>['fields']
): GetDataEnumKind<WriteTypeArgs, 'Clock'>;
export function writeType<K extends WriteTypeArgs['__kind']>(
  kind: K,
  data?: any
): Extract<WriteTypeArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isWriteType<K extends WriteType['__kind']>(
  kind: K,
  value: WriteType
): value is WriteType & { __kind: K } {
  return value.__kind === kind;
}
