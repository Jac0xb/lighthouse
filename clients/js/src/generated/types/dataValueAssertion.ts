/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  bool,
  dataEnum,
  i128,
  i16,
  i32,
  i64,
  i8,
  publicKey as publicKeySerializer,
  struct,
  u128,
  u16,
  u32,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  IntegerOperator,
  IntegerOperatorArgs,
  getEquatableOperatorSerializer,
  getIntegerOperatorSerializer,
} from '.';
import {
  CompactBytes,
  CompactBytesArgs,
  getCompactBytesSerializer,
} from '../../hooked';

export type DataValueAssertion =
  | { __kind: 'Bool'; value: boolean; operator: EquatableOperator }
  | { __kind: 'U8'; value: number; operator: IntegerOperator }
  | { __kind: 'I8'; value: number; operator: IntegerOperator }
  | { __kind: 'U16'; value: number; operator: IntegerOperator }
  | { __kind: 'I16'; value: number; operator: IntegerOperator }
  | { __kind: 'U32'; value: number; operator: IntegerOperator }
  | { __kind: 'I32'; value: number; operator: IntegerOperator }
  | { __kind: 'U64'; value: bigint; operator: IntegerOperator }
  | { __kind: 'I64'; value: bigint; operator: IntegerOperator }
  | { __kind: 'U128'; value: bigint; operator: IntegerOperator }
  | { __kind: 'I128'; value: bigint; operator: IntegerOperator }
  | { __kind: 'Bytes'; value: CompactBytes; operator: EquatableOperator }
  | { __kind: 'Pubkey'; value: PublicKey; operator: EquatableOperator };

export type DataValueAssertionArgs =
  | { __kind: 'Bool'; value: boolean; operator: EquatableOperatorArgs }
  | { __kind: 'U8'; value: number; operator: IntegerOperatorArgs }
  | { __kind: 'I8'; value: number; operator: IntegerOperatorArgs }
  | { __kind: 'U16'; value: number; operator: IntegerOperatorArgs }
  | { __kind: 'I16'; value: number; operator: IntegerOperatorArgs }
  | { __kind: 'U32'; value: number; operator: IntegerOperatorArgs }
  | { __kind: 'I32'; value: number; operator: IntegerOperatorArgs }
  | { __kind: 'U64'; value: number | bigint; operator: IntegerOperatorArgs }
  | { __kind: 'I64'; value: number | bigint; operator: IntegerOperatorArgs }
  | { __kind: 'U128'; value: number | bigint; operator: IntegerOperatorArgs }
  | { __kind: 'I128'; value: number | bigint; operator: IntegerOperatorArgs }
  | {
      __kind: 'Bytes';
      value: CompactBytesArgs;
      operator: EquatableOperatorArgs;
    }
  | { __kind: 'Pubkey'; value: PublicKey; operator: EquatableOperatorArgs };

export function getDataValueAssertionSerializer(): Serializer<
  DataValueAssertionArgs,
  DataValueAssertion
> {
  return dataEnum<DataValueAssertion>(
    [
      [
        'Bool',
        struct<GetDataEnumKindContent<DataValueAssertion, 'Bool'>>([
          ['value', bool()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'U8',
        struct<GetDataEnumKindContent<DataValueAssertion, 'U8'>>([
          ['value', u8()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'I8',
        struct<GetDataEnumKindContent<DataValueAssertion, 'I8'>>([
          ['value', i8()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'U16',
        struct<GetDataEnumKindContent<DataValueAssertion, 'U16'>>([
          ['value', u16()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'I16',
        struct<GetDataEnumKindContent<DataValueAssertion, 'I16'>>([
          ['value', i16()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'U32',
        struct<GetDataEnumKindContent<DataValueAssertion, 'U32'>>([
          ['value', u32()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'I32',
        struct<GetDataEnumKindContent<DataValueAssertion, 'I32'>>([
          ['value', i32()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'U64',
        struct<GetDataEnumKindContent<DataValueAssertion, 'U64'>>([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'I64',
        struct<GetDataEnumKindContent<DataValueAssertion, 'I64'>>([
          ['value', i64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'U128',
        struct<GetDataEnumKindContent<DataValueAssertion, 'U128'>>([
          ['value', u128()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'I128',
        struct<GetDataEnumKindContent<DataValueAssertion, 'I128'>>([
          ['value', i128()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'Bytes',
        struct<GetDataEnumKindContent<DataValueAssertion, 'Bytes'>>([
          ['value', getCompactBytesSerializer()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
      [
        'Pubkey',
        struct<GetDataEnumKindContent<DataValueAssertion, 'Pubkey'>>([
          ['value', publicKeySerializer()],
          ['operator', getEquatableOperatorSerializer()],
        ]),
      ],
    ],
    { description: 'DataValueAssertion' }
  ) as Serializer<DataValueAssertionArgs, DataValueAssertion>;
}

// Data Enum Helpers.
export function dataValueAssertion(
  kind: 'Bool',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'Bool'>
): GetDataEnumKind<DataValueAssertionArgs, 'Bool'>;
export function dataValueAssertion(
  kind: 'U8',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'U8'>
): GetDataEnumKind<DataValueAssertionArgs, 'U8'>;
export function dataValueAssertion(
  kind: 'I8',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'I8'>
): GetDataEnumKind<DataValueAssertionArgs, 'I8'>;
export function dataValueAssertion(
  kind: 'U16',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'U16'>
): GetDataEnumKind<DataValueAssertionArgs, 'U16'>;
export function dataValueAssertion(
  kind: 'I16',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'I16'>
): GetDataEnumKind<DataValueAssertionArgs, 'I16'>;
export function dataValueAssertion(
  kind: 'U32',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'U32'>
): GetDataEnumKind<DataValueAssertionArgs, 'U32'>;
export function dataValueAssertion(
  kind: 'I32',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'I32'>
): GetDataEnumKind<DataValueAssertionArgs, 'I32'>;
export function dataValueAssertion(
  kind: 'U64',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'U64'>
): GetDataEnumKind<DataValueAssertionArgs, 'U64'>;
export function dataValueAssertion(
  kind: 'I64',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'I64'>
): GetDataEnumKind<DataValueAssertionArgs, 'I64'>;
export function dataValueAssertion(
  kind: 'U128',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'U128'>
): GetDataEnumKind<DataValueAssertionArgs, 'U128'>;
export function dataValueAssertion(
  kind: 'I128',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'I128'>
): GetDataEnumKind<DataValueAssertionArgs, 'I128'>;
export function dataValueAssertion(
  kind: 'Bytes',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'Bytes'>
): GetDataEnumKind<DataValueAssertionArgs, 'Bytes'>;
export function dataValueAssertion(
  kind: 'Pubkey',
  data: GetDataEnumKindContent<DataValueAssertionArgs, 'Pubkey'>
): GetDataEnumKind<DataValueAssertionArgs, 'Pubkey'>;
export function dataValueAssertion<K extends DataValueAssertionArgs['__kind']>(
  kind: K,
  data?: any
): Extract<DataValueAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isDataValueAssertion<K extends DataValueAssertion['__kind']>(
  kind: K,
  value: DataValueAssertion
): value is DataValueAssertion & { __kind: K } {
  return value.__kind === kind;
}
