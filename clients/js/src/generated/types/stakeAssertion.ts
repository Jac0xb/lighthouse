/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { PublicKey } from '@metaplex-foundation/umi';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  Serializer,
  dataEnum,
  publicKey as publicKeySerializer,
  struct,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  EquatableOperator,
  EquatableOperatorArgs,
  IntegerOperator,
  IntegerOperatorArgs,
  getEquatableOperatorSerializer,
  getIntegerOperatorSerializer,
} from '.';

export type StakeAssertion =
  | {
      __kind: 'DelegationVoterPubkey';
      value: PublicKey;
      operator: EquatableOperator;
    }
  | { __kind: 'DelegationStake'; value: bigint; operator: IntegerOperator }
  | {
      __kind: 'DelegationActivationEpoch';
      value: bigint;
      operator: IntegerOperator;
    }
  | {
      __kind: 'DelegationDeactivationEpoch';
      value: bigint;
      operator: IntegerOperator;
    }
  | { __kind: 'CreditsObserved'; value: bigint; operator: IntegerOperator };

export type StakeAssertionArgs =
  | {
      __kind: 'DelegationVoterPubkey';
      value: PublicKey;
      operator: EquatableOperatorArgs;
    }
  | {
      __kind: 'DelegationStake';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'DelegationActivationEpoch';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'DelegationDeactivationEpoch';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    }
  | {
      __kind: 'CreditsObserved';
      value: number | bigint;
      operator: IntegerOperatorArgs;
    };

export function getStakeAssertionSerializer(): Serializer<
  StakeAssertionArgs,
  StakeAssertion
> {
  return dataEnum<StakeAssertion>(
    [
      [
        'DelegationVoterPubkey',
        struct<GetDataEnumKindContent<StakeAssertion, 'DelegationVoterPubkey'>>(
          [
            ['value', publicKeySerializer()],
            ['operator', getEquatableOperatorSerializer()],
          ]
        ),
      ],
      [
        'DelegationStake',
        struct<GetDataEnumKindContent<StakeAssertion, 'DelegationStake'>>([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'DelegationActivationEpoch',
        struct<
          GetDataEnumKindContent<StakeAssertion, 'DelegationActivationEpoch'>
        >([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'DelegationDeactivationEpoch',
        struct<
          GetDataEnumKindContent<StakeAssertion, 'DelegationDeactivationEpoch'>
        >([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
      [
        'CreditsObserved',
        struct<GetDataEnumKindContent<StakeAssertion, 'CreditsObserved'>>([
          ['value', u64()],
          ['operator', getIntegerOperatorSerializer()],
        ]),
      ],
    ],
    { description: 'StakeAssertion' }
  ) as Serializer<StakeAssertionArgs, StakeAssertion>;
}

// Data Enum Helpers.
export function stakeAssertion(
  kind: 'DelegationVoterPubkey',
  data: GetDataEnumKindContent<StakeAssertionArgs, 'DelegationVoterPubkey'>
): GetDataEnumKind<StakeAssertionArgs, 'DelegationVoterPubkey'>;
export function stakeAssertion(
  kind: 'DelegationStake',
  data: GetDataEnumKindContent<StakeAssertionArgs, 'DelegationStake'>
): GetDataEnumKind<StakeAssertionArgs, 'DelegationStake'>;
export function stakeAssertion(
  kind: 'DelegationActivationEpoch',
  data: GetDataEnumKindContent<StakeAssertionArgs, 'DelegationActivationEpoch'>
): GetDataEnumKind<StakeAssertionArgs, 'DelegationActivationEpoch'>;
export function stakeAssertion(
  kind: 'DelegationDeactivationEpoch',
  data: GetDataEnumKindContent<
    StakeAssertionArgs,
    'DelegationDeactivationEpoch'
  >
): GetDataEnumKind<StakeAssertionArgs, 'DelegationDeactivationEpoch'>;
export function stakeAssertion(
  kind: 'CreditsObserved',
  data: GetDataEnumKindContent<StakeAssertionArgs, 'CreditsObserved'>
): GetDataEnumKind<StakeAssertionArgs, 'CreditsObserved'>;
export function stakeAssertion<K extends StakeAssertionArgs['__kind']>(
  kind: K,
  data?: any
): Extract<StakeAssertionArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isStakeAssertion<K extends StakeAssertion['__kind']>(
  kind: K,
  value: StakeAssertion
): value is StakeAssertion & { __kind: K } {
  return value.__kind === kind;
}
