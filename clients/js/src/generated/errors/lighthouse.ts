/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Program, ProgramError } from '@metaplex-foundation/umi';

type ProgramErrorConstructor = new (
  program: Program,
  cause?: Error
) => ProgramError;
const codeToErrorMap: Map<number, ProgramErrorConstructor> = new Map();
const nameToErrorMap: Map<string, ProgramErrorConstructor> = new Map();

/** InvalidInstructionData: Invalid instruction */
export class InvalidInstructionDataError extends ProgramError {
  override readonly name: string = 'InvalidInstructionData';

  readonly code: number = 0x1770; // 6000

  constructor(program: Program, cause?: Error) {
    super('Invalid instruction', program, cause);
  }
}
codeToErrorMap.set(0x1770, InvalidInstructionDataError);
nameToErrorMap.set('InvalidInstructionData', InvalidInstructionDataError);

/** AssertionFailed: AssertionFailed */
export class AssertionFailedError extends ProgramError {
  override readonly name: string = 'AssertionFailed';

  readonly code: number = 0x1771; // 6001

  constructor(program: Program, cause?: Error) {
    super('AssertionFailed', program, cause);
  }
}
codeToErrorMap.set(0x1771, AssertionFailedError);
nameToErrorMap.set('AssertionFailed', AssertionFailedError);

/** NotEnoughAccounts: NotEnoughAccounts */
export class NotEnoughAccountsError extends ProgramError {
  override readonly name: string = 'NotEnoughAccounts';

  readonly code: number = 0x1772; // 6002

  constructor(program: Program, cause?: Error) {
    super('NotEnoughAccounts', program, cause);
  }
}
codeToErrorMap.set(0x1772, NotEnoughAccountsError);
nameToErrorMap.set('NotEnoughAccounts', NotEnoughAccountsError);

/** BumpNotFound: BumpNotFound */
export class BumpNotFoundError extends ProgramError {
  override readonly name: string = 'BumpNotFound';

  readonly code: number = 0x1773; // 6003

  constructor(program: Program, cause?: Error) {
    super('BumpNotFound', program, cause);
  }
}
codeToErrorMap.set(0x1773, BumpNotFoundError);
nameToErrorMap.set('BumpNotFound', BumpNotFoundError);

/** AccountBorrowFailed: AccountBorrowFailed */
export class AccountBorrowFailedError extends ProgramError {
  override readonly name: string = 'AccountBorrowFailed';

  readonly code: number = 0x1774; // 6004

  constructor(program: Program, cause?: Error) {
    super('AccountBorrowFailed', program, cause);
  }
}
codeToErrorMap.set(0x1774, AccountBorrowFailedError);
nameToErrorMap.set('AccountBorrowFailed', AccountBorrowFailedError);

/** RangeOutOfBounds: RangeOutOfBounds */
export class RangeOutOfBoundsError extends ProgramError {
  override readonly name: string = 'RangeOutOfBounds';

  readonly code: number = 0x1775; // 6005

  constructor(program: Program, cause?: Error) {
    super('RangeOutOfBounds', program, cause);
  }
}
codeToErrorMap.set(0x1775, RangeOutOfBoundsError);
nameToErrorMap.set('RangeOutOfBounds', RangeOutOfBoundsError);

/** IndexOutOfBounds: IndexOutOfBounds */
export class IndexOutOfBoundsError extends ProgramError {
  override readonly name: string = 'IndexOutOfBounds';

  readonly code: number = 0x1776; // 6006

  constructor(program: Program, cause?: Error) {
    super('IndexOutOfBounds', program, cause);
  }
}
codeToErrorMap.set(0x1776, IndexOutOfBoundsError);
nameToErrorMap.set('IndexOutOfBounds', IndexOutOfBoundsError);

/** FailedToDeserialize: FailedToDeserialize */
export class FailedToDeserializeError extends ProgramError {
  override readonly name: string = 'FailedToDeserialize';

  readonly code: number = 0x1777; // 6007

  constructor(program: Program, cause?: Error) {
    super('FailedToDeserialize', program, cause);
  }
}
codeToErrorMap.set(0x1777, FailedToDeserializeError);
nameToErrorMap.set('FailedToDeserialize', FailedToDeserializeError);

/** FailedToSerialize: FailedToSerialize */
export class FailedToSerializeError extends ProgramError {
  override readonly name: string = 'FailedToSerialize';

  readonly code: number = 0x1778; // 6008

  constructor(program: Program, cause?: Error) {
    super('FailedToSerialize', program, cause);
  }
}
codeToErrorMap.set(0x1778, FailedToSerializeError);
nameToErrorMap.set('FailedToSerialize', FailedToSerializeError);

/** AccountOwnerMismatch: AccountOwnerMismatch */
export class AccountOwnerMismatchError extends ProgramError {
  override readonly name: string = 'AccountOwnerMismatch';

  readonly code: number = 0x1779; // 6009

  constructor(program: Program, cause?: Error) {
    super('AccountOwnerMismatch', program, cause);
  }
}
codeToErrorMap.set(0x1779, AccountOwnerMismatchError);
nameToErrorMap.set('AccountOwnerMismatch', AccountOwnerMismatchError);

/** AccountKeyMismatch: AccountKeyMismatch */
export class AccountKeyMismatchError extends ProgramError {
  override readonly name: string = 'AccountKeyMismatch';

  readonly code: number = 0x177a; // 6010

  constructor(program: Program, cause?: Error) {
    super('AccountKeyMismatch', program, cause);
  }
}
codeToErrorMap.set(0x177a, AccountKeyMismatchError);
nameToErrorMap.set('AccountKeyMismatch', AccountKeyMismatchError);

/** AccountNotInitialized: AccountNotInitialized */
export class AccountNotInitializedError extends ProgramError {
  override readonly name: string = 'AccountNotInitialized';

  readonly code: number = 0x177b; // 6011

  constructor(program: Program, cause?: Error) {
    super('AccountNotInitialized', program, cause);
  }
}
codeToErrorMap.set(0x177b, AccountNotInitializedError);
nameToErrorMap.set('AccountNotInitialized', AccountNotInitializedError);

/** AccountOwnerValidationFailed: AccountOwnerValidationFailed */
export class AccountOwnerValidationFailedError extends ProgramError {
  override readonly name: string = 'AccountOwnerValidationFailed';

  readonly code: number = 0x177c; // 6012

  constructor(program: Program, cause?: Error) {
    super('AccountOwnerValidationFailed', program, cause);
  }
}
codeToErrorMap.set(0x177c, AccountOwnerValidationFailedError);
nameToErrorMap.set(
  'AccountOwnerValidationFailed',
  AccountOwnerValidationFailedError
);

/** AccountFundedValidationFailed: AccountFundedValidationFailed */
export class AccountFundedValidationFailedError extends ProgramError {
  override readonly name: string = 'AccountFundedValidationFailed';

  readonly code: number = 0x177d; // 6013

  constructor(program: Program, cause?: Error) {
    super('AccountFundedValidationFailed', program, cause);
  }
}
codeToErrorMap.set(0x177d, AccountFundedValidationFailedError);
nameToErrorMap.set(
  'AccountFundedValidationFailed',
  AccountFundedValidationFailedError
);

/** AccountDiscriminatorValidationFailed: AccountDiscriminatorValidationFailed */
export class AccountDiscriminatorValidationFailedError extends ProgramError {
  override readonly name: string = 'AccountDiscriminatorValidationFailed';

  readonly code: number = 0x177e; // 6014

  constructor(program: Program, cause?: Error) {
    super('AccountDiscriminatorValidationFailed', program, cause);
  }
}
codeToErrorMap.set(0x177e, AccountDiscriminatorValidationFailedError);
nameToErrorMap.set(
  'AccountDiscriminatorValidationFailed',
  AccountDiscriminatorValidationFailedError
);

/** AccountValidationFailed: AccountValidaitonFailed */
export class AccountValidationFailedError extends ProgramError {
  override readonly name: string = 'AccountValidationFailed';

  readonly code: number = 0x177f; // 6015

  constructor(program: Program, cause?: Error) {
    super('AccountValidaitonFailed', program, cause);
  }
}
codeToErrorMap.set(0x177f, AccountValidationFailedError);
nameToErrorMap.set('AccountValidationFailed', AccountValidationFailedError);

/** CrossProgramInvokeViolation: CrossProgramInvokeViolation */
export class CrossProgramInvokeViolationError extends ProgramError {
  override readonly name: string = 'CrossProgramInvokeViolation';

  readonly code: number = 0x1780; // 6016

  constructor(program: Program, cause?: Error) {
    super('CrossProgramInvokeViolation', program, cause);
  }
}
codeToErrorMap.set(0x1780, CrossProgramInvokeViolationError);
nameToErrorMap.set(
  'CrossProgramInvokeViolation',
  CrossProgramInvokeViolationError
);

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function getLighthouseErrorFromCode(
  code: number,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = codeToErrorMap.get(code);
  return constructor ? new constructor(program, cause) : null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function getLighthouseErrorFromName(
  name: string,
  program: Program,
  cause?: Error
): ProgramError | null {
  const constructor = nameToErrorMap.get(name);
  return constructor ? new constructor(program, cause) : null;
}
