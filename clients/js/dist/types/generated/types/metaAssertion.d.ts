/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { PublicKey } from '@metaplex-foundation/umi';
import { GetDataEnumKind, GetDataEnumKindContent, Serializer } from '@metaplex-foundation/umi/serializers';
import { EquatableOperator, EquatableOperatorArgs, IntegerOperator, IntegerOperatorArgs } from '.';
export type MetaAssertion = {
    __kind: 'RentExemptReserve';
    value: bigint;
    operator: IntegerOperator;
} | {
    __kind: 'AuthorizedStaker';
    value: PublicKey;
    operator: EquatableOperator;
} | {
    __kind: 'AuthorizedWithdrawer';
    value: PublicKey;
    operator: EquatableOperator;
} | {
    __kind: 'LockupUnixTimestamp';
    value: bigint;
    operator: IntegerOperator;
} | {
    __kind: 'LockupEpoch';
    value: bigint;
    operator: IntegerOperator;
} | {
    __kind: 'LockupCustodian';
    value: PublicKey;
    operator: EquatableOperator;
};
export type MetaAssertionArgs = {
    __kind: 'RentExemptReserve';
    value: number | bigint;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'AuthorizedStaker';
    value: PublicKey;
    operator: EquatableOperatorArgs;
} | {
    __kind: 'AuthorizedWithdrawer';
    value: PublicKey;
    operator: EquatableOperatorArgs;
} | {
    __kind: 'LockupUnixTimestamp';
    value: number | bigint;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'LockupEpoch';
    value: number | bigint;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'LockupCustodian';
    value: PublicKey;
    operator: EquatableOperatorArgs;
};
export declare function getMetaAssertionSerializer(): Serializer<MetaAssertionArgs, MetaAssertion>;
export declare function metaAssertion(kind: 'RentExemptReserve', data: GetDataEnumKindContent<MetaAssertionArgs, 'RentExemptReserve'>): GetDataEnumKind<MetaAssertionArgs, 'RentExemptReserve'>;
export declare function metaAssertion(kind: 'AuthorizedStaker', data: GetDataEnumKindContent<MetaAssertionArgs, 'AuthorizedStaker'>): GetDataEnumKind<MetaAssertionArgs, 'AuthorizedStaker'>;
export declare function metaAssertion(kind: 'AuthorizedWithdrawer', data: GetDataEnumKindContent<MetaAssertionArgs, 'AuthorizedWithdrawer'>): GetDataEnumKind<MetaAssertionArgs, 'AuthorizedWithdrawer'>;
export declare function metaAssertion(kind: 'LockupUnixTimestamp', data: GetDataEnumKindContent<MetaAssertionArgs, 'LockupUnixTimestamp'>): GetDataEnumKind<MetaAssertionArgs, 'LockupUnixTimestamp'>;
export declare function metaAssertion(kind: 'LockupEpoch', data: GetDataEnumKindContent<MetaAssertionArgs, 'LockupEpoch'>): GetDataEnumKind<MetaAssertionArgs, 'LockupEpoch'>;
export declare function metaAssertion(kind: 'LockupCustodian', data: GetDataEnumKindContent<MetaAssertionArgs, 'LockupCustodian'>): GetDataEnumKind<MetaAssertionArgs, 'LockupCustodian'>;
export declare function isMetaAssertion<K extends MetaAssertion['__kind']>(kind: K, value: MetaAssertion): value is MetaAssertion & {
    __kind: K;
};
//# sourceMappingURL=metaAssertion.d.ts.map