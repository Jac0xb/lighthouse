/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Option, OptionOrNullable, PublicKey } from '@metaplex-foundation/umi';
import { GetDataEnumKind, GetDataEnumKindContent, Serializer } from '@metaplex-foundation/umi/serializers';
import { EquatableOperator, EquatableOperatorArgs, IntegerOperator, IntegerOperatorArgs } from '.';
export type MintAccountAssertion = {
    __kind: 'MintAuthority';
    value: Option<PublicKey>;
    operator: EquatableOperator;
} | {
    __kind: 'Supply';
    value: bigint;
    operator: IntegerOperator;
} | {
    __kind: 'Decimals';
    value: number;
    operator: IntegerOperator;
} | {
    __kind: 'IsInitialized';
    value: boolean;
    operator: EquatableOperator;
} | {
    __kind: 'FreezeAuthority';
    value: Option<PublicKey>;
    operator: EquatableOperator;
};
export type MintAccountAssertionArgs = {
    __kind: 'MintAuthority';
    value: OptionOrNullable<PublicKey>;
    operator: EquatableOperatorArgs;
} | {
    __kind: 'Supply';
    value: number | bigint;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'Decimals';
    value: number;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'IsInitialized';
    value: boolean;
    operator: EquatableOperatorArgs;
} | {
    __kind: 'FreezeAuthority';
    value: OptionOrNullable<PublicKey>;
    operator: EquatableOperatorArgs;
};
export declare function getMintAccountAssertionSerializer(): Serializer<MintAccountAssertionArgs, MintAccountAssertion>;
export declare function mintAccountAssertion(kind: 'MintAuthority', data: GetDataEnumKindContent<MintAccountAssertionArgs, 'MintAuthority'>): GetDataEnumKind<MintAccountAssertionArgs, 'MintAuthority'>;
export declare function mintAccountAssertion(kind: 'Supply', data: GetDataEnumKindContent<MintAccountAssertionArgs, 'Supply'>): GetDataEnumKind<MintAccountAssertionArgs, 'Supply'>;
export declare function mintAccountAssertion(kind: 'Decimals', data: GetDataEnumKindContent<MintAccountAssertionArgs, 'Decimals'>): GetDataEnumKind<MintAccountAssertionArgs, 'Decimals'>;
export declare function mintAccountAssertion(kind: 'IsInitialized', data: GetDataEnumKindContent<MintAccountAssertionArgs, 'IsInitialized'>): GetDataEnumKind<MintAccountAssertionArgs, 'IsInitialized'>;
export declare function mintAccountAssertion(kind: 'FreezeAuthority', data: GetDataEnumKindContent<MintAccountAssertionArgs, 'FreezeAuthority'>): GetDataEnumKind<MintAccountAssertionArgs, 'FreezeAuthority'>;
export declare function isMintAccountAssertion<K extends MintAccountAssertion['__kind']>(kind: K, value: MintAccountAssertion): value is MintAccountAssertion & {
    __kind: K;
};
//# sourceMappingURL=mintAccountAssertion.d.ts.map