/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Codec, Decoder, Encoder, GetDataEnumKind, GetDataEnumKindContent } from '@solana/codecs';
import { ByteSliceOperator, ByteSliceOperatorArgs, IntegerOperator, IntegerOperatorArgs } from '.';
export type DataValueDeltaAssertion = {
    __kind: 'U8';
    value: number;
    operator: IntegerOperator;
} | {
    __kind: 'I8';
    value: number;
    operator: IntegerOperator;
} | {
    __kind: 'U16';
    value: number;
    operator: IntegerOperator;
} | {
    __kind: 'I16';
    value: number;
    operator: IntegerOperator;
} | {
    __kind: 'U32';
    value: bigint;
    operator: IntegerOperator;
} | {
    __kind: 'I32';
    value: bigint;
    operator: IntegerOperator;
} | {
    __kind: 'U64';
    value: bigint;
    operator: IntegerOperator;
} | {
    __kind: 'I64';
    value: bigint;
    operator: IntegerOperator;
} | {
    __kind: 'Bytes';
    length: number;
    operator: ByteSliceOperator;
};
export type DataValueDeltaAssertionArgs = {
    __kind: 'U8';
    value: number;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'I8';
    value: number;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'U16';
    value: number;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'I16';
    value: number;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'U32';
    value: number | bigint;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'I32';
    value: number | bigint;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'U64';
    value: number | bigint;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'I64';
    value: number | bigint;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'Bytes';
    length: number;
    operator: ByteSliceOperatorArgs;
};
export declare function getDataValueDeltaAssertionEncoder(): Encoder<DataValueDeltaAssertionArgs>;
export declare function getDataValueDeltaAssertionDecoder(): Decoder<DataValueDeltaAssertion>;
export declare function getDataValueDeltaAssertionCodec(): Codec<DataValueDeltaAssertionArgs, DataValueDeltaAssertion>;
export declare function dataValueDeltaAssertion(kind: 'U8', data: GetDataEnumKindContent<DataValueDeltaAssertionArgs, 'U8'>): GetDataEnumKind<DataValueDeltaAssertionArgs, 'U8'>;
export declare function dataValueDeltaAssertion(kind: 'I8', data: GetDataEnumKindContent<DataValueDeltaAssertionArgs, 'I8'>): GetDataEnumKind<DataValueDeltaAssertionArgs, 'I8'>;
export declare function dataValueDeltaAssertion(kind: 'U16', data: GetDataEnumKindContent<DataValueDeltaAssertionArgs, 'U16'>): GetDataEnumKind<DataValueDeltaAssertionArgs, 'U16'>;
export declare function dataValueDeltaAssertion(kind: 'I16', data: GetDataEnumKindContent<DataValueDeltaAssertionArgs, 'I16'>): GetDataEnumKind<DataValueDeltaAssertionArgs, 'I16'>;
export declare function dataValueDeltaAssertion(kind: 'U32', data: GetDataEnumKindContent<DataValueDeltaAssertionArgs, 'U32'>): GetDataEnumKind<DataValueDeltaAssertionArgs, 'U32'>;
export declare function dataValueDeltaAssertion(kind: 'I32', data: GetDataEnumKindContent<DataValueDeltaAssertionArgs, 'I32'>): GetDataEnumKind<DataValueDeltaAssertionArgs, 'I32'>;
export declare function dataValueDeltaAssertion(kind: 'U64', data: GetDataEnumKindContent<DataValueDeltaAssertionArgs, 'U64'>): GetDataEnumKind<DataValueDeltaAssertionArgs, 'U64'>;
export declare function dataValueDeltaAssertion(kind: 'I64', data: GetDataEnumKindContent<DataValueDeltaAssertionArgs, 'I64'>): GetDataEnumKind<DataValueDeltaAssertionArgs, 'I64'>;
export declare function dataValueDeltaAssertion(kind: 'Bytes', data: GetDataEnumKindContent<DataValueDeltaAssertionArgs, 'Bytes'>): GetDataEnumKind<DataValueDeltaAssertionArgs, 'Bytes'>;
export declare function isDataValueDeltaAssertion<K extends DataValueDeltaAssertion['__kind']>(kind: K, value: DataValueDeltaAssertion): value is DataValueDeltaAssertion & {
    __kind: K;
};
//# sourceMappingURL=dataValueDeltaAssertion.d.ts.map