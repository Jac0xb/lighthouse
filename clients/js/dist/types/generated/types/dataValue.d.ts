/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address } from '@solana/addresses';
import { Codec, Decoder, Encoder, GetDataEnumKind, GetDataEnumKindContent } from '@solana/codecs';
export type DataValue = {
    __kind: 'Bool';
    fields: [boolean];
} | {
    __kind: 'U8';
    fields: [number];
} | {
    __kind: 'I8';
    fields: [number];
} | {
    __kind: 'U16';
    fields: [number];
} | {
    __kind: 'I16';
    fields: [number];
} | {
    __kind: 'U32';
    fields: [number];
} | {
    __kind: 'I32';
    fields: [number];
} | {
    __kind: 'U64';
    fields: [bigint];
} | {
    __kind: 'I64';
    fields: [bigint];
} | {
    __kind: 'U128';
    fields: [bigint];
} | {
    __kind: 'I128';
    fields: [bigint];
} | {
    __kind: 'Bytes';
    fields: [Uint8Array];
} | {
    __kind: 'Pubkey';
    fields: [Address];
};
export type DataValueArgs = {
    __kind: 'Bool';
    fields: [boolean];
} | {
    __kind: 'U8';
    fields: [number];
} | {
    __kind: 'I8';
    fields: [number];
} | {
    __kind: 'U16';
    fields: [number];
} | {
    __kind: 'I16';
    fields: [number];
} | {
    __kind: 'U32';
    fields: [number];
} | {
    __kind: 'I32';
    fields: [number];
} | {
    __kind: 'U64';
    fields: [number | bigint];
} | {
    __kind: 'I64';
    fields: [number | bigint];
} | {
    __kind: 'U128';
    fields: [number | bigint];
} | {
    __kind: 'I128';
    fields: [number | bigint];
} | {
    __kind: 'Bytes';
    fields: [Uint8Array];
} | {
    __kind: 'Pubkey';
    fields: [Address];
};
export declare function getDataValueEncoder(): Encoder<DataValueArgs>;
export declare function getDataValueDecoder(): Decoder<DataValue>;
export declare function getDataValueCodec(): Codec<DataValueArgs, DataValue>;
export declare function dataValue(kind: 'Bool', data: GetDataEnumKindContent<DataValueArgs, 'Bool'>['fields']): GetDataEnumKind<DataValueArgs, 'Bool'>;
export declare function dataValue(kind: 'U8', data: GetDataEnumKindContent<DataValueArgs, 'U8'>['fields']): GetDataEnumKind<DataValueArgs, 'U8'>;
export declare function dataValue(kind: 'I8', data: GetDataEnumKindContent<DataValueArgs, 'I8'>['fields']): GetDataEnumKind<DataValueArgs, 'I8'>;
export declare function dataValue(kind: 'U16', data: GetDataEnumKindContent<DataValueArgs, 'U16'>['fields']): GetDataEnumKind<DataValueArgs, 'U16'>;
export declare function dataValue(kind: 'I16', data: GetDataEnumKindContent<DataValueArgs, 'I16'>['fields']): GetDataEnumKind<DataValueArgs, 'I16'>;
export declare function dataValue(kind: 'U32', data: GetDataEnumKindContent<DataValueArgs, 'U32'>['fields']): GetDataEnumKind<DataValueArgs, 'U32'>;
export declare function dataValue(kind: 'I32', data: GetDataEnumKindContent<DataValueArgs, 'I32'>['fields']): GetDataEnumKind<DataValueArgs, 'I32'>;
export declare function dataValue(kind: 'U64', data: GetDataEnumKindContent<DataValueArgs, 'U64'>['fields']): GetDataEnumKind<DataValueArgs, 'U64'>;
export declare function dataValue(kind: 'I64', data: GetDataEnumKindContent<DataValueArgs, 'I64'>['fields']): GetDataEnumKind<DataValueArgs, 'I64'>;
export declare function dataValue(kind: 'U128', data: GetDataEnumKindContent<DataValueArgs, 'U128'>['fields']): GetDataEnumKind<DataValueArgs, 'U128'>;
export declare function dataValue(kind: 'I128', data: GetDataEnumKindContent<DataValueArgs, 'I128'>['fields']): GetDataEnumKind<DataValueArgs, 'I128'>;
export declare function dataValue(kind: 'Bytes', data: GetDataEnumKindContent<DataValueArgs, 'Bytes'>['fields']): GetDataEnumKind<DataValueArgs, 'Bytes'>;
export declare function dataValue(kind: 'Pubkey', data: GetDataEnumKindContent<DataValueArgs, 'Pubkey'>['fields']): GetDataEnumKind<DataValueArgs, 'Pubkey'>;
export declare function isDataValue<K extends DataValue['__kind']>(kind: K, value: DataValue): value is DataValue & {
    __kind: K;
};
//# sourceMappingURL=dataValue.d.ts.map