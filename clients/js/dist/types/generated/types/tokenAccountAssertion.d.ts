/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address } from '@solana/addresses';
import { Codec, Decoder, Encoder, GetDataEnumKind, GetDataEnumKindContent, Option, OptionOrNullable } from '@solana/codecs';
import { EquatableOperator, EquatableOperatorArgs, IntegerOperator, IntegerOperatorArgs } from '.';
export type TokenAccountAssertion = {
    __kind: 'Mint';
    value: Address;
    operator: EquatableOperator;
} | {
    __kind: 'Owner';
    value: Address;
    operator: EquatableOperator;
} | {
    __kind: 'Amount';
    value: bigint;
    operator: IntegerOperator;
} | {
    __kind: 'Delegate';
    value: Option<Address>;
    operator: EquatableOperator;
} | {
    __kind: 'State';
    value: number;
    operator: IntegerOperator;
} | {
    __kind: 'IsNative';
    value: Option<bigint>;
    operator: EquatableOperator;
} | {
    __kind: 'DelegatedAmount';
    value: bigint;
    operator: IntegerOperator;
} | {
    __kind: 'CloseAuthority';
    value: Option<Address>;
    operator: EquatableOperator;
} | {
    __kind: 'TokenAccountOwnerIsDerived';
};
export type TokenAccountAssertionArgs = {
    __kind: 'Mint';
    value: Address;
    operator: EquatableOperatorArgs;
} | {
    __kind: 'Owner';
    value: Address;
    operator: EquatableOperatorArgs;
} | {
    __kind: 'Amount';
    value: number | bigint;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'Delegate';
    value: OptionOrNullable<Address>;
    operator: EquatableOperatorArgs;
} | {
    __kind: 'State';
    value: number;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'IsNative';
    value: OptionOrNullable<number | bigint>;
    operator: EquatableOperatorArgs;
} | {
    __kind: 'DelegatedAmount';
    value: number | bigint;
    operator: IntegerOperatorArgs;
} | {
    __kind: 'CloseAuthority';
    value: OptionOrNullable<Address>;
    operator: EquatableOperatorArgs;
} | {
    __kind: 'TokenAccountOwnerIsDerived';
};
export declare function getTokenAccountAssertionEncoder(): Encoder<TokenAccountAssertionArgs>;
export declare function getTokenAccountAssertionDecoder(): Decoder<TokenAccountAssertion>;
export declare function getTokenAccountAssertionCodec(): Codec<TokenAccountAssertionArgs, TokenAccountAssertion>;
export declare function tokenAccountAssertion(kind: 'Mint', data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Mint'>): GetDataEnumKind<TokenAccountAssertionArgs, 'Mint'>;
export declare function tokenAccountAssertion(kind: 'Owner', data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Owner'>): GetDataEnumKind<TokenAccountAssertionArgs, 'Owner'>;
export declare function tokenAccountAssertion(kind: 'Amount', data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Amount'>): GetDataEnumKind<TokenAccountAssertionArgs, 'Amount'>;
export declare function tokenAccountAssertion(kind: 'Delegate', data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'Delegate'>): GetDataEnumKind<TokenAccountAssertionArgs, 'Delegate'>;
export declare function tokenAccountAssertion(kind: 'State', data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'State'>): GetDataEnumKind<TokenAccountAssertionArgs, 'State'>;
export declare function tokenAccountAssertion(kind: 'IsNative', data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'IsNative'>): GetDataEnumKind<TokenAccountAssertionArgs, 'IsNative'>;
export declare function tokenAccountAssertion(kind: 'DelegatedAmount', data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'DelegatedAmount'>): GetDataEnumKind<TokenAccountAssertionArgs, 'DelegatedAmount'>;
export declare function tokenAccountAssertion(kind: 'CloseAuthority', data: GetDataEnumKindContent<TokenAccountAssertionArgs, 'CloseAuthority'>): GetDataEnumKind<TokenAccountAssertionArgs, 'CloseAuthority'>;
export declare function tokenAccountAssertion(kind: 'TokenAccountOwnerIsDerived'): GetDataEnumKind<TokenAccountAssertionArgs, 'TokenAccountOwnerIsDerived'>;
export declare function isTokenAccountAssertion<K extends TokenAccountAssertion['__kind']>(kind: K, value: TokenAccountAssertion): value is TokenAccountAssertion & {
    __kind: K;
};
//# sourceMappingURL=tokenAccountAssertion.d.ts.map