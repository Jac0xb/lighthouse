/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address } from '@solana/addresses';
import { Codec, Decoder, Encoder } from '@solana/codecs';
import { IAccountMeta, IInstruction, IInstructionWithAccounts, IInstructionWithData, ReadonlyAccount, WritableAccount, WritableSignerAccount } from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { WriteType, WriteTypeArgs } from '../types';
export type MemoryWriteInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountProgramId extends string | IAccountMeta<string> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountPayer extends string | IAccountMeta<string> = string, TAccountMemory extends string | IAccountMeta<string> = string, TAccountSourceAccount extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountProgramId extends string ? ReadonlyAccount<TAccountProgramId> : TAccountProgramId,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> : TAccountPayer,
    TAccountMemory extends string ? WritableAccount<TAccountMemory> : TAccountMemory,
    TAccountSourceAccount extends string ? ReadonlyAccount<TAccountSourceAccount> : TAccountSourceAccount,
    ...TRemainingAccounts
]>;
export type MemoryWriteInstructionWithSigners<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountProgramId extends string | IAccountMeta<string> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountPayer extends string | IAccountMeta<string> = string, TAccountMemory extends string | IAccountMeta<string> = string, TAccountSourceAccount extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountProgramId extends string ? ReadonlyAccount<TAccountProgramId> : TAccountProgramId,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & IAccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountMemory extends string ? WritableAccount<TAccountMemory> : TAccountMemory,
    TAccountSourceAccount extends string ? ReadonlyAccount<TAccountSourceAccount> : TAccountSourceAccount,
    ...TRemainingAccounts
]>;
export type MemoryWriteInstructionData = {
    discriminator: number;
    memoryId: number;
    memoryBump: number;
    writeOffset: number;
    writeType: WriteType;
};
export type MemoryWriteInstructionDataArgs = {
    memoryId?: number;
    memoryBump: number;
    writeOffset: number;
    writeType: WriteTypeArgs;
};
export declare function getMemoryWriteInstructionDataEncoder(): Encoder<MemoryWriteInstructionDataArgs>;
export declare function getMemoryWriteInstructionDataDecoder(): Decoder<MemoryWriteInstructionData>;
export declare function getMemoryWriteInstructionDataCodec(): Codec<MemoryWriteInstructionDataArgs, MemoryWriteInstructionData>;
export type MemoryWriteInput<TAccountProgramId extends string, TAccountSystemProgram extends string, TAccountPayer extends string, TAccountMemory extends string, TAccountSourceAccount extends string> = {
    /** Lighthouse program */
    programId?: Address<TAccountProgramId>;
    /** System program */
    systemProgram?: Address<TAccountSystemProgram>;
    /** Payer account */
    payer: Address<TAccountPayer>;
    /** Memory account */
    memory: Address<TAccountMemory>;
    /** Account to be written to memory */
    sourceAccount: Address<TAccountSourceAccount>;
    memoryId?: MemoryWriteInstructionDataArgs['memoryId'];
    memoryBump: MemoryWriteInstructionDataArgs['memoryBump'];
    writeOffset: MemoryWriteInstructionDataArgs['writeOffset'];
    writeType: MemoryWriteInstructionDataArgs['writeType'];
};
export type MemoryWriteInputWithSigners<TAccountProgramId extends string, TAccountSystemProgram extends string, TAccountPayer extends string, TAccountMemory extends string, TAccountSourceAccount extends string> = {
    /** Lighthouse program */
    programId?: Address<TAccountProgramId>;
    /** System program */
    systemProgram?: Address<TAccountSystemProgram>;
    /** Payer account */
    payer: TransactionSigner<TAccountPayer>;
    /** Memory account */
    memory: Address<TAccountMemory>;
    /** Account to be written to memory */
    sourceAccount: Address<TAccountSourceAccount>;
    memoryId?: MemoryWriteInstructionDataArgs['memoryId'];
    memoryBump: MemoryWriteInstructionDataArgs['memoryBump'];
    writeOffset: MemoryWriteInstructionDataArgs['writeOffset'];
    writeType: MemoryWriteInstructionDataArgs['writeType'];
};
export declare function getMemoryWriteInstruction<TAccountProgramId extends string, TAccountSystemProgram extends string, TAccountPayer extends string, TAccountMemory extends string, TAccountSourceAccount extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: MemoryWriteInputWithSigners<TAccountProgramId, TAccountSystemProgram, TAccountPayer, TAccountMemory, TAccountSourceAccount>): MemoryWriteInstructionWithSigners<TProgram, TAccountProgramId, TAccountSystemProgram, TAccountPayer, TAccountMemory, TAccountSourceAccount>;
export declare function getMemoryWriteInstruction<TAccountProgramId extends string, TAccountSystemProgram extends string, TAccountPayer extends string, TAccountMemory extends string, TAccountSourceAccount extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: MemoryWriteInput<TAccountProgramId, TAccountSystemProgram, TAccountPayer, TAccountMemory, TAccountSourceAccount>): MemoryWriteInstruction<TProgram, TAccountProgramId, TAccountSystemProgram, TAccountPayer, TAccountMemory, TAccountSourceAccount>;
export declare function getMemoryWriteInstructionRaw<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountProgramId extends string | IAccountMeta<string> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountPayer extends string | IAccountMeta<string> = string, TAccountMemory extends string | IAccountMeta<string> = string, TAccountSourceAccount extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []>(accounts: {
    programId?: TAccountProgramId extends string ? Address<TAccountProgramId> : TAccountProgramId;
    systemProgram?: TAccountSystemProgram extends string ? Address<TAccountSystemProgram> : TAccountSystemProgram;
    payer: TAccountPayer extends string ? Address<TAccountPayer> : TAccountPayer;
    memory: TAccountMemory extends string ? Address<TAccountMemory> : TAccountMemory;
    sourceAccount: TAccountSourceAccount extends string ? Address<TAccountSourceAccount> : TAccountSourceAccount;
}, args: MemoryWriteInstructionDataArgs, programAddress?: Address<TProgram>, remainingAccounts?: TRemainingAccounts): MemoryWriteInstruction<TProgram, TAccountProgramId, TAccountSystemProgram, TAccountPayer, TAccountMemory, TAccountSourceAccount, TRemainingAccounts>;
export type ParsedMemoryWriteInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Lighthouse program */
        programId: TAccountMetas[0];
        /** System program */
        systemProgram: TAccountMetas[1];
        /** Payer account */
        payer: TAccountMetas[2];
        /** Memory account */
        memory: TAccountMetas[3];
        /** Account to be written to memory */
        sourceAccount: TAccountMetas[4];
    };
    data: MemoryWriteInstructionData;
};
export declare function parseMemoryWriteInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedMemoryWriteInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=memoryWrite.d.ts.map