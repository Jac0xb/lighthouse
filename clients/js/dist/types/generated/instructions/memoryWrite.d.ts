/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { WriteType, WriteTypeArgs } from '../types';
export type MemoryWriteInstructionAccounts = {
    /** Lighthouse program */
    programId?: PublicKey | Pda;
    /** System program */
    systemProgram?: PublicKey | Pda;
    /** Payer account */
    payer?: Signer;
    /** Memory account */
    memory: PublicKey | Pda;
    /** Account to be written to memory */
    sourceAccount: PublicKey | Pda;
};
export type MemoryWriteInstructionData = {
    discriminator: number;
    memoryId: number;
    memoryBump: number;
    writeOffset: number;
    writeType: WriteType;
};
export type MemoryWriteInstructionDataArgs = {
    memoryId?: number;
    memoryBump: number;
    writeOffset: number;
    writeType: WriteTypeArgs;
};
export declare function getMemoryWriteInstructionDataSerializer(): Serializer<MemoryWriteInstructionDataArgs, MemoryWriteInstructionData>;
export type MemoryWriteInstructionArgs = MemoryWriteInstructionDataArgs;
export declare function memoryWrite(context: Pick<Context, 'payer' | 'programs'>, input: MemoryWriteInstructionAccounts & MemoryWriteInstructionArgs): TransactionBuilder;
//# sourceMappingURL=memoryWrite.d.ts.map