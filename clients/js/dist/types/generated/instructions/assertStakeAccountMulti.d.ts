/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { LogLevel, LogLevelArgs, StakeAccountAssertion, StakeAccountAssertionArgs } from '../types';
export type AssertStakeAccountMultiInstructionAccounts = {
    /** Target account to be asserted */
    targetAccount: PublicKey | Pda;
};
export type AssertStakeAccountMultiInstructionData = {
    discriminator: number;
    logLevel: LogLevel;
    assertions: Array<StakeAccountAssertion>;
};
export type AssertStakeAccountMultiInstructionDataArgs = {
    logLevel?: LogLevelArgs;
    assertions: Array<StakeAccountAssertionArgs>;
};
export declare function getAssertStakeAccountMultiInstructionDataSerializer(): Serializer<AssertStakeAccountMultiInstructionDataArgs, AssertStakeAccountMultiInstructionData>;
export type AssertStakeAccountMultiInstructionArgs = AssertStakeAccountMultiInstructionDataArgs;
export declare function assertStakeAccountMulti(context: Pick<Context, 'programs'>, input: AssertStakeAccountMultiInstructionAccounts & AssertStakeAccountMultiInstructionArgs): TransactionBuilder;
//# sourceMappingURL=assertStakeAccountMulti.d.ts.map