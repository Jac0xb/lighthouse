/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address } from '@solana/addresses';
import { Codec, Decoder, Encoder } from '@solana/codecs';
import { IAccountMeta, IInstruction, IInstructionWithAccounts, IInstructionWithData } from '@solana/instructions';
import { LogLevel, LogLevelArgs, SysvarClockAssertion, SysvarClockAssertionArgs } from '../types';
export type AssertSysvarClockInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<TRemainingAccounts>;
export type AssertSysvarClockInstructionWithSigners<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<TRemainingAccounts>;
export type AssertSysvarClockInstructionData = {
    discriminator: number;
    logLevel: LogLevel;
    assertion: SysvarClockAssertion;
};
export type AssertSysvarClockInstructionDataArgs = {
    logLevel?: LogLevelArgs;
    assertion: SysvarClockAssertionArgs;
};
export declare function getAssertSysvarClockInstructionDataEncoder(): Encoder<AssertSysvarClockInstructionDataArgs>;
export declare function getAssertSysvarClockInstructionDataDecoder(): Decoder<AssertSysvarClockInstructionData>;
export declare function getAssertSysvarClockInstructionDataCodec(): Codec<AssertSysvarClockInstructionDataArgs, AssertSysvarClockInstructionData>;
export type AssertSysvarClockInput = {
    logLevel?: AssertSysvarClockInstructionDataArgs['logLevel'];
    assertion: AssertSysvarClockInstructionDataArgs['assertion'];
};
export type AssertSysvarClockInputWithSigners = {
    logLevel?: AssertSysvarClockInstructionDataArgs['logLevel'];
    assertion: AssertSysvarClockInstructionDataArgs['assertion'];
};
export declare function getAssertSysvarClockInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: AssertSysvarClockInputWithSigners): AssertSysvarClockInstructionWithSigners<TProgram>;
export declare function getAssertSysvarClockInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: AssertSysvarClockInput): AssertSysvarClockInstruction<TProgram>;
export declare function getAssertSysvarClockInstructionRaw<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TRemainingAccounts extends Array<IAccountMeta<string>> = []>(args: AssertSysvarClockInstructionDataArgs, programAddress?: Address<TProgram>, remainingAccounts?: TRemainingAccounts): AssertSysvarClockInstruction<TProgram, TRemainingAccounts>;
export type ParsedAssertSysvarClockInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'> = {
    programAddress: Address<TProgram>;
    data: AssertSysvarClockInstructionData;
};
export declare function parseAssertSysvarClockInstruction<TProgram extends string>(instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>): ParsedAssertSysvarClockInstruction<TProgram>;
//# sourceMappingURL=assertSysvarClock.d.ts.map