/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address } from '@solana/addresses';
import { Codec, Decoder, Encoder } from '@solana/codecs';
import { IAccountMeta, IInstruction, IInstructionWithAccounts, IInstructionWithData, ReadonlyAccount } from '@solana/instructions';
import { AccountDeltaAssertion, AccountDeltaAssertionArgs, LogLevel, LogLevelArgs } from '../types';
export type AssertAccountDeltaInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountAccountA extends string | IAccountMeta<string> = string, TAccountAccountB extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountAccountA extends string ? ReadonlyAccount<TAccountAccountA> : TAccountAccountA,
    TAccountAccountB extends string ? ReadonlyAccount<TAccountAccountB> : TAccountAccountB,
    ...TRemainingAccounts
]>;
export type AssertAccountDeltaInstructionWithSigners<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountAccountA extends string | IAccountMeta<string> = string, TAccountAccountB extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountAccountA extends string ? ReadonlyAccount<TAccountAccountA> : TAccountAccountA,
    TAccountAccountB extends string ? ReadonlyAccount<TAccountAccountB> : TAccountAccountB,
    ...TRemainingAccounts
]>;
export type AssertAccountDeltaInstructionData = {
    discriminator: number;
    logLevel: LogLevel;
    assertion: AccountDeltaAssertion;
};
export type AssertAccountDeltaInstructionDataArgs = {
    logLevel?: LogLevelArgs;
    assertion: AccountDeltaAssertionArgs;
};
export declare function getAssertAccountDeltaInstructionDataEncoder(): Encoder<AssertAccountDeltaInstructionDataArgs>;
export declare function getAssertAccountDeltaInstructionDataDecoder(): Decoder<AssertAccountDeltaInstructionData>;
export declare function getAssertAccountDeltaInstructionDataCodec(): Codec<AssertAccountDeltaInstructionDataArgs, AssertAccountDeltaInstructionData>;
export type AssertAccountDeltaInput<TAccountAccountA extends string, TAccountAccountB extends string> = {
    /** Account A where the delta is calculated from */
    accountA: Address<TAccountAccountA>;
    /** Account B where the delta is calculated to */
    accountB: Address<TAccountAccountB>;
    logLevel?: AssertAccountDeltaInstructionDataArgs['logLevel'];
    assertion: AssertAccountDeltaInstructionDataArgs['assertion'];
};
export type AssertAccountDeltaInputWithSigners<TAccountAccountA extends string, TAccountAccountB extends string> = {
    /** Account A where the delta is calculated from */
    accountA: Address<TAccountAccountA>;
    /** Account B where the delta is calculated to */
    accountB: Address<TAccountAccountB>;
    logLevel?: AssertAccountDeltaInstructionDataArgs['logLevel'];
    assertion: AssertAccountDeltaInstructionDataArgs['assertion'];
};
export declare function getAssertAccountDeltaInstruction<TAccountAccountA extends string, TAccountAccountB extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: AssertAccountDeltaInputWithSigners<TAccountAccountA, TAccountAccountB>): AssertAccountDeltaInstructionWithSigners<TProgram, TAccountAccountA, TAccountAccountB>;
export declare function getAssertAccountDeltaInstruction<TAccountAccountA extends string, TAccountAccountB extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: AssertAccountDeltaInput<TAccountAccountA, TAccountAccountB>): AssertAccountDeltaInstruction<TProgram, TAccountAccountA, TAccountAccountB>;
export declare function getAssertAccountDeltaInstructionRaw<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountAccountA extends string | IAccountMeta<string> = string, TAccountAccountB extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []>(accounts: {
    accountA: TAccountAccountA extends string ? Address<TAccountAccountA> : TAccountAccountA;
    accountB: TAccountAccountB extends string ? Address<TAccountAccountB> : TAccountAccountB;
}, args: AssertAccountDeltaInstructionDataArgs, programAddress?: Address<TProgram>, remainingAccounts?: TRemainingAccounts): AssertAccountDeltaInstruction<TProgram, TAccountAccountA, TAccountAccountB, TRemainingAccounts>;
export type ParsedAssertAccountDeltaInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Account A where the delta is calculated from */
        accountA: TAccountMetas[0];
        /** Account B where the delta is calculated to */
        accountB: TAccountMetas[1];
    };
    data: AssertAccountDeltaInstructionData;
};
export declare function parseAssertAccountDeltaInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedAssertAccountDeltaInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=assertAccountDelta.d.ts.map