/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { LogLevel, LogLevelArgs, MintAccountAssertion, MintAccountAssertionArgs } from '../types';
export type AssertMintAccountMultiInstructionAccounts = {
    /** Target account to be asserted */
    targetAccount: PublicKey | Pda;
};
export type AssertMintAccountMultiInstructionData = {
    discriminator: number;
    logLevel: LogLevel;
    assertions: Array<MintAccountAssertion>;
};
export type AssertMintAccountMultiInstructionDataArgs = {
    logLevel?: LogLevelArgs;
    assertions: Array<MintAccountAssertionArgs>;
};
export declare function getAssertMintAccountMultiInstructionDataSerializer(): Serializer<AssertMintAccountMultiInstructionDataArgs, AssertMintAccountMultiInstructionData>;
export type AssertMintAccountMultiInstructionArgs = AssertMintAccountMultiInstructionDataArgs;
export declare function assertMintAccountMulti(context: Pick<Context, 'programs'>, input: AssertMintAccountMultiInstructionAccounts & AssertMintAccountMultiInstructionArgs): TransactionBuilder;
//# sourceMappingURL=assertMintAccountMulti.d.ts.map