/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { LogLevel, LogLevelArgs, StakeAccountAssertion, StakeAccountAssertionArgs } from '../types';
export type AssertStakeAccountInstructionAccounts = {
    /** Target account to be asserted */
    targetAccount: PublicKey | Pda;
};
export type AssertStakeAccountInstructionData = {
    discriminator: number;
    logLevel: LogLevel;
    assertion: StakeAccountAssertion;
};
export type AssertStakeAccountInstructionDataArgs = {
    logLevel?: LogLevelArgs;
    assertion: StakeAccountAssertionArgs;
};
export declare function getAssertStakeAccountInstructionDataSerializer(): Serializer<AssertStakeAccountInstructionDataArgs, AssertStakeAccountInstructionData>;
export type AssertStakeAccountInstructionArgs = AssertStakeAccountInstructionDataArgs;
export declare function assertStakeAccount(context: Pick<Context, 'programs'>, input: AssertStakeAccountInstructionAccounts & AssertStakeAccountInstructionArgs): TransactionBuilder;
//# sourceMappingURL=assertStakeAccount.d.ts.map