/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address } from '@solana/addresses';
import { Codec, Decoder, Encoder } from '@solana/codecs';
import { IAccountMeta, IInstruction, IInstructionWithAccounts, IInstructionWithData, ReadonlyAccount } from '@solana/instructions';
import { LogLevel, LogLevelArgs, StakeAccountAssertion, StakeAccountAssertionArgs } from '../types';
export type AssertStakeAccountInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountTargetAccount extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountTargetAccount extends string ? ReadonlyAccount<TAccountTargetAccount> : TAccountTargetAccount,
    ...TRemainingAccounts
]>;
export type AssertStakeAccountInstructionWithSigners<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountTargetAccount extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountTargetAccount extends string ? ReadonlyAccount<TAccountTargetAccount> : TAccountTargetAccount,
    ...TRemainingAccounts
]>;
export type AssertStakeAccountInstructionData = {
    discriminator: number;
    logLevel: LogLevel;
    assertion: StakeAccountAssertion;
};
export type AssertStakeAccountInstructionDataArgs = {
    logLevel?: LogLevelArgs;
    assertion: StakeAccountAssertionArgs;
};
export declare function getAssertStakeAccountInstructionDataEncoder(): Encoder<AssertStakeAccountInstructionDataArgs>;
export declare function getAssertStakeAccountInstructionDataDecoder(): Decoder<AssertStakeAccountInstructionData>;
export declare function getAssertStakeAccountInstructionDataCodec(): Codec<AssertStakeAccountInstructionDataArgs, AssertStakeAccountInstructionData>;
export type AssertStakeAccountInput<TAccountTargetAccount extends string> = {
    /** Target account to be asserted */
    targetAccount: Address<TAccountTargetAccount>;
    logLevel?: AssertStakeAccountInstructionDataArgs['logLevel'];
    assertion: AssertStakeAccountInstructionDataArgs['assertion'];
};
export type AssertStakeAccountInputWithSigners<TAccountTargetAccount extends string> = {
    /** Target account to be asserted */
    targetAccount: Address<TAccountTargetAccount>;
    logLevel?: AssertStakeAccountInstructionDataArgs['logLevel'];
    assertion: AssertStakeAccountInstructionDataArgs['assertion'];
};
export declare function getAssertStakeAccountInstruction<TAccountTargetAccount extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: AssertStakeAccountInputWithSigners<TAccountTargetAccount>): AssertStakeAccountInstructionWithSigners<TProgram, TAccountTargetAccount>;
export declare function getAssertStakeAccountInstruction<TAccountTargetAccount extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: AssertStakeAccountInput<TAccountTargetAccount>): AssertStakeAccountInstruction<TProgram, TAccountTargetAccount>;
export declare function getAssertStakeAccountInstructionRaw<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountTargetAccount extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []>(accounts: {
    targetAccount: TAccountTargetAccount extends string ? Address<TAccountTargetAccount> : TAccountTargetAccount;
}, args: AssertStakeAccountInstructionDataArgs, programAddress?: Address<TProgram>, remainingAccounts?: TRemainingAccounts): AssertStakeAccountInstruction<TProgram, TAccountTargetAccount, TRemainingAccounts>;
export type ParsedAssertStakeAccountInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Target account to be asserted */
        targetAccount: TAccountMetas[0];
    };
    data: AssertStakeAccountInstructionData;
};
export declare function parseAssertStakeAccountInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedAssertStakeAccountInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=assertStakeAccount.d.ts.map