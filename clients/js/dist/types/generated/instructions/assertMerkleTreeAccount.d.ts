/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { LogLevel, LogLevelArgs, MerkleTreeAssertion, MerkleTreeAssertionArgs } from '../types';
export type AssertMerkleTreeAccountInstructionAccounts = {
    /** Target merkle tree account to be asserted */
    targetMerkleTree: PublicKey | Pda;
    /** The current root of the merkle tree */
    root: PublicKey | Pda;
    /** SPL account compression program */
    splAccountCompression: PublicKey | Pda;
};
export type AssertMerkleTreeAccountInstructionData = {
    discriminator: number;
    logLevel: LogLevel;
    assertion: MerkleTreeAssertion;
};
export type AssertMerkleTreeAccountInstructionDataArgs = {
    logLevel?: LogLevelArgs;
    assertion: MerkleTreeAssertionArgs;
};
export declare function getAssertMerkleTreeAccountInstructionDataSerializer(): Serializer<AssertMerkleTreeAccountInstructionDataArgs, AssertMerkleTreeAccountInstructionData>;
export type AssertMerkleTreeAccountInstructionArgs = AssertMerkleTreeAccountInstructionDataArgs;
export declare function assertMerkleTreeAccount(context: Pick<Context, 'programs'>, input: AssertMerkleTreeAccountInstructionAccounts & AssertMerkleTreeAccountInstructionArgs): TransactionBuilder;
//# sourceMappingURL=assertMerkleTreeAccount.d.ts.map