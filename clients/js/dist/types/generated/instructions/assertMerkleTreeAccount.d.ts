/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address } from '@solana/addresses';
import { Codec, Decoder, Encoder } from '@solana/codecs';
import { IAccountMeta, IInstruction, IInstructionWithAccounts, IInstructionWithData, ReadonlyAccount } from '@solana/instructions';
import { LogLevel, LogLevelArgs, MerkleTreeAssertion, MerkleTreeAssertionArgs } from '../types';
export type AssertMerkleTreeAccountInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountTargetMerkleTree extends string | IAccountMeta<string> = string, TAccountRoot extends string | IAccountMeta<string> = string, TAccountSplAccountCompression extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountTargetMerkleTree extends string ? ReadonlyAccount<TAccountTargetMerkleTree> : TAccountTargetMerkleTree,
    TAccountRoot extends string ? ReadonlyAccount<TAccountRoot> : TAccountRoot,
    TAccountSplAccountCompression extends string ? ReadonlyAccount<TAccountSplAccountCompression> : TAccountSplAccountCompression,
    ...TRemainingAccounts
]>;
export type AssertMerkleTreeAccountInstructionWithSigners<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountTargetMerkleTree extends string | IAccountMeta<string> = string, TAccountRoot extends string | IAccountMeta<string> = string, TAccountSplAccountCompression extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountTargetMerkleTree extends string ? ReadonlyAccount<TAccountTargetMerkleTree> : TAccountTargetMerkleTree,
    TAccountRoot extends string ? ReadonlyAccount<TAccountRoot> : TAccountRoot,
    TAccountSplAccountCompression extends string ? ReadonlyAccount<TAccountSplAccountCompression> : TAccountSplAccountCompression,
    ...TRemainingAccounts
]>;
export type AssertMerkleTreeAccountInstructionData = {
    discriminator: number;
    logLevel: LogLevel;
    assertion: MerkleTreeAssertion;
};
export type AssertMerkleTreeAccountInstructionDataArgs = {
    logLevel?: LogLevelArgs;
    assertion: MerkleTreeAssertionArgs;
};
export declare function getAssertMerkleTreeAccountInstructionDataEncoder(): Encoder<AssertMerkleTreeAccountInstructionDataArgs>;
export declare function getAssertMerkleTreeAccountInstructionDataDecoder(): Decoder<AssertMerkleTreeAccountInstructionData>;
export declare function getAssertMerkleTreeAccountInstructionDataCodec(): Codec<AssertMerkleTreeAccountInstructionDataArgs, AssertMerkleTreeAccountInstructionData>;
export type AssertMerkleTreeAccountInput<TAccountTargetMerkleTree extends string, TAccountRoot extends string, TAccountSplAccountCompression extends string> = {
    /** Target merkle tree account to be asserted */
    targetMerkleTree: Address<TAccountTargetMerkleTree>;
    /** The current root of the merkle tree */
    root: Address<TAccountRoot>;
    /** SPL account compression program */
    splAccountCompression: Address<TAccountSplAccountCompression>;
    logLevel?: AssertMerkleTreeAccountInstructionDataArgs['logLevel'];
    assertion: AssertMerkleTreeAccountInstructionDataArgs['assertion'];
};
export type AssertMerkleTreeAccountInputWithSigners<TAccountTargetMerkleTree extends string, TAccountRoot extends string, TAccountSplAccountCompression extends string> = {
    /** Target merkle tree account to be asserted */
    targetMerkleTree: Address<TAccountTargetMerkleTree>;
    /** The current root of the merkle tree */
    root: Address<TAccountRoot>;
    /** SPL account compression program */
    splAccountCompression: Address<TAccountSplAccountCompression>;
    logLevel?: AssertMerkleTreeAccountInstructionDataArgs['logLevel'];
    assertion: AssertMerkleTreeAccountInstructionDataArgs['assertion'];
};
export declare function getAssertMerkleTreeAccountInstruction<TAccountTargetMerkleTree extends string, TAccountRoot extends string, TAccountSplAccountCompression extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: AssertMerkleTreeAccountInputWithSigners<TAccountTargetMerkleTree, TAccountRoot, TAccountSplAccountCompression>): AssertMerkleTreeAccountInstructionWithSigners<TProgram, TAccountTargetMerkleTree, TAccountRoot, TAccountSplAccountCompression>;
export declare function getAssertMerkleTreeAccountInstruction<TAccountTargetMerkleTree extends string, TAccountRoot extends string, TAccountSplAccountCompression extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: AssertMerkleTreeAccountInput<TAccountTargetMerkleTree, TAccountRoot, TAccountSplAccountCompression>): AssertMerkleTreeAccountInstruction<TProgram, TAccountTargetMerkleTree, TAccountRoot, TAccountSplAccountCompression>;
export declare function getAssertMerkleTreeAccountInstructionRaw<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountTargetMerkleTree extends string | IAccountMeta<string> = string, TAccountRoot extends string | IAccountMeta<string> = string, TAccountSplAccountCompression extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []>(accounts: {
    targetMerkleTree: TAccountTargetMerkleTree extends string ? Address<TAccountTargetMerkleTree> : TAccountTargetMerkleTree;
    root: TAccountRoot extends string ? Address<TAccountRoot> : TAccountRoot;
    splAccountCompression: TAccountSplAccountCompression extends string ? Address<TAccountSplAccountCompression> : TAccountSplAccountCompression;
}, args: AssertMerkleTreeAccountInstructionDataArgs, programAddress?: Address<TProgram>, remainingAccounts?: TRemainingAccounts): AssertMerkleTreeAccountInstruction<TProgram, TAccountTargetMerkleTree, TAccountRoot, TAccountSplAccountCompression, TRemainingAccounts>;
export type ParsedAssertMerkleTreeAccountInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Target merkle tree account to be asserted */
        targetMerkleTree: TAccountMetas[0];
        /** The current root of the merkle tree */
        root: TAccountMetas[1];
        /** SPL account compression program */
        splAccountCompression: TAccountMetas[2];
    };
    data: AssertMerkleTreeAccountInstructionData;
};
export declare function parseAssertMerkleTreeAccountInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedAssertMerkleTreeAccountInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=assertMerkleTreeAccount.d.ts.map