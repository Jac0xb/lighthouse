/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { BubblegumTreeConfigAssertion, BubblegumTreeConfigAssertionArgs, LogLevel, LogLevelArgs } from '../types';
export type AssertBubblegumTreeConfigAccountInstructionAccounts = {
    /** Target mpl-bubblegum tree config account to be asserted */
    targetAccount: PublicKey | Pda;
};
export type AssertBubblegumTreeConfigAccountInstructionData = {
    discriminator: number;
    logLevel: LogLevel;
    assertion: BubblegumTreeConfigAssertion;
};
export type AssertBubblegumTreeConfigAccountInstructionDataArgs = {
    logLevel?: LogLevelArgs;
    assertion: BubblegumTreeConfigAssertionArgs;
};
export declare function getAssertBubblegumTreeConfigAccountInstructionDataSerializer(): Serializer<AssertBubblegumTreeConfigAccountInstructionDataArgs, AssertBubblegumTreeConfigAccountInstructionData>;
export type AssertBubblegumTreeConfigAccountInstructionArgs = AssertBubblegumTreeConfigAccountInstructionDataArgs;
export declare function assertBubblegumTreeConfigAccount(context: Pick<Context, 'programs'>, input: AssertBubblegumTreeConfigAccountInstructionAccounts & AssertBubblegumTreeConfigAccountInstructionArgs): TransactionBuilder;
//# sourceMappingURL=assertBubblegumTreeConfigAccount.d.ts.map