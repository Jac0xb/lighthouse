/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type MemoryCloseInstructionAccounts = {
    /** Lighthouse program */
    programId?: PublicKey | Pda;
    /** Payer account */
    payer?: Signer;
    /** Memory account */
    memory: PublicKey | Pda;
};
export type MemoryCloseInstructionData = {
    discriminator: number;
    memoryId: number;
    memoryBump: number;
};
export type MemoryCloseInstructionDataArgs = {
    memoryId: number;
    memoryBump: number;
};
export declare function getMemoryCloseInstructionDataSerializer(): Serializer<MemoryCloseInstructionDataArgs, MemoryCloseInstructionData>;
export type MemoryCloseInstructionArgs = MemoryCloseInstructionDataArgs;
export declare function memoryClose(context: Pick<Context, 'payer' | 'programs'>, input: MemoryCloseInstructionAccounts & MemoryCloseInstructionArgs): TransactionBuilder;
//# sourceMappingURL=memoryClose.d.ts.map