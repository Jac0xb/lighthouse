/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address } from '@solana/addresses';
import { Codec, Decoder, Encoder } from '@solana/codecs';
import { IAccountMeta, IInstruction, IInstructionWithAccounts, IInstructionWithData, ReadonlyAccount, WritableAccount, WritableSignerAccount } from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
export type MemoryCloseInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountProgramId extends string | IAccountMeta<string> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountPayer extends string | IAccountMeta<string> = string, TAccountMemory extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountProgramId extends string ? ReadonlyAccount<TAccountProgramId> : TAccountProgramId,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> : TAccountPayer,
    TAccountMemory extends string ? WritableAccount<TAccountMemory> : TAccountMemory,
    ...TRemainingAccounts
]>;
export type MemoryCloseInstructionWithSigners<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountProgramId extends string | IAccountMeta<string> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountPayer extends string | IAccountMeta<string> = string, TAccountMemory extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountProgramId extends string ? ReadonlyAccount<TAccountProgramId> : TAccountProgramId,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & IAccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountMemory extends string ? WritableAccount<TAccountMemory> : TAccountMemory,
    ...TRemainingAccounts
]>;
export type MemoryCloseInstructionData = {
    discriminator: number;
    memoryId: number;
    memoryBump: number;
};
export type MemoryCloseInstructionDataArgs = {
    memoryId: number;
    memoryBump: number;
};
export declare function getMemoryCloseInstructionDataEncoder(): Encoder<MemoryCloseInstructionDataArgs>;
export declare function getMemoryCloseInstructionDataDecoder(): Decoder<MemoryCloseInstructionData>;
export declare function getMemoryCloseInstructionDataCodec(): Codec<MemoryCloseInstructionDataArgs, MemoryCloseInstructionData>;
export type MemoryCloseInput<TAccountProgramId extends string, TAccountPayer extends string, TAccountMemory extends string> = {
    /** Lighthouse program */
    programId?: Address<TAccountProgramId>;
    /** Payer account */
    payer: Address<TAccountPayer>;
    /** Memory account */
    memory: Address<TAccountMemory>;
    memoryId: MemoryCloseInstructionDataArgs['memoryId'];
    memoryBump: MemoryCloseInstructionDataArgs['memoryBump'];
};
export type MemoryCloseInputWithSigners<TAccountProgramId extends string, TAccountPayer extends string, TAccountMemory extends string> = {
    /** Lighthouse program */
    programId?: Address<TAccountProgramId>;
    /** Payer account */
    payer: TransactionSigner<TAccountPayer>;
    /** Memory account */
    memory: Address<TAccountMemory>;
    memoryId: MemoryCloseInstructionDataArgs['memoryId'];
    memoryBump: MemoryCloseInstructionDataArgs['memoryBump'];
};
export declare function getMemoryCloseInstruction<TAccountProgramId extends string, TAccountPayer extends string, TAccountMemory extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: MemoryCloseInputWithSigners<TAccountProgramId, TAccountPayer, TAccountMemory>): MemoryCloseInstructionWithSigners<TProgram, TAccountProgramId, TAccountPayer, TAccountMemory>;
export declare function getMemoryCloseInstruction<TAccountProgramId extends string, TAccountPayer extends string, TAccountMemory extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: MemoryCloseInput<TAccountProgramId, TAccountPayer, TAccountMemory>): MemoryCloseInstruction<TProgram, TAccountProgramId, TAccountPayer, TAccountMemory>;
export declare function getMemoryCloseInstructionRaw<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountProgramId extends string | IAccountMeta<string> = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountPayer extends string | IAccountMeta<string> = string, TAccountMemory extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []>(accounts: {
    programId?: TAccountProgramId extends string ? Address<TAccountProgramId> : TAccountProgramId;
    payer: TAccountPayer extends string ? Address<TAccountPayer> : TAccountPayer;
    memory: TAccountMemory extends string ? Address<TAccountMemory> : TAccountMemory;
}, args: MemoryCloseInstructionDataArgs, programAddress?: Address<TProgram>, remainingAccounts?: TRemainingAccounts): MemoryCloseInstruction<TProgram, TAccountProgramId, TAccountPayer, TAccountMemory, TRemainingAccounts>;
export type ParsedMemoryCloseInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Lighthouse program */
        programId: TAccountMetas[0];
        /** Payer account */
        payer: TAccountMetas[1];
        /** Memory account */
        memory: TAccountMetas[2];
    };
    data: MemoryCloseInstructionData;
};
export declare function parseMemoryCloseInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedMemoryCloseInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=memoryClose.d.ts.map