/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address } from '@solana/addresses';
import { Codec, Decoder, Encoder } from '@solana/codecs';
import { IAccountMeta, IInstruction, IInstructionWithAccounts, IInstructionWithData, ReadonlyAccount } from '@solana/instructions';
import { LogLevel, LogLevelArgs, TokenAccountAssertion, TokenAccountAssertionArgs } from '../types';
export type AssertTokenAccountMultiInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountTargetAccount extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountTargetAccount extends string ? ReadonlyAccount<TAccountTargetAccount> : TAccountTargetAccount,
    ...TRemainingAccounts
]>;
export type AssertTokenAccountMultiInstructionWithSigners<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountTargetAccount extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountTargetAccount extends string ? ReadonlyAccount<TAccountTargetAccount> : TAccountTargetAccount,
    ...TRemainingAccounts
]>;
export type AssertTokenAccountMultiInstructionData = {
    discriminator: number;
    logLevel: LogLevel;
    assertions: Array<TokenAccountAssertion>;
};
export type AssertTokenAccountMultiInstructionDataArgs = {
    logLevel?: LogLevelArgs;
    assertions: Array<TokenAccountAssertionArgs>;
};
export declare function getAssertTokenAccountMultiInstructionDataEncoder(): Encoder<AssertTokenAccountMultiInstructionDataArgs>;
export declare function getAssertTokenAccountMultiInstructionDataDecoder(): Decoder<AssertTokenAccountMultiInstructionData>;
export declare function getAssertTokenAccountMultiInstructionDataCodec(): Codec<AssertTokenAccountMultiInstructionDataArgs, AssertTokenAccountMultiInstructionData>;
export type AssertTokenAccountMultiInput<TAccountTargetAccount extends string> = {
    /** Target account to be asserted */
    targetAccount: Address<TAccountTargetAccount>;
    logLevel?: AssertTokenAccountMultiInstructionDataArgs['logLevel'];
    assertions: AssertTokenAccountMultiInstructionDataArgs['assertions'];
};
export type AssertTokenAccountMultiInputWithSigners<TAccountTargetAccount extends string> = {
    /** Target account to be asserted */
    targetAccount: Address<TAccountTargetAccount>;
    logLevel?: AssertTokenAccountMultiInstructionDataArgs['logLevel'];
    assertions: AssertTokenAccountMultiInstructionDataArgs['assertions'];
};
export declare function getAssertTokenAccountMultiInstruction<TAccountTargetAccount extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: AssertTokenAccountMultiInputWithSigners<TAccountTargetAccount>): AssertTokenAccountMultiInstructionWithSigners<TProgram, TAccountTargetAccount>;
export declare function getAssertTokenAccountMultiInstruction<TAccountTargetAccount extends string, TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'>(input: AssertTokenAccountMultiInput<TAccountTargetAccount>): AssertTokenAccountMultiInstruction<TProgram, TAccountTargetAccount>;
export declare function getAssertTokenAccountMultiInstructionRaw<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountTargetAccount extends string | IAccountMeta<string> = string, TRemainingAccounts extends Array<IAccountMeta<string>> = []>(accounts: {
    targetAccount: TAccountTargetAccount extends string ? Address<TAccountTargetAccount> : TAccountTargetAccount;
}, args: AssertTokenAccountMultiInstructionDataArgs, programAddress?: Address<TProgram>, remainingAccounts?: TRemainingAccounts): AssertTokenAccountMultiInstruction<TProgram, TAccountTargetAccount, TRemainingAccounts>;
export type ParsedAssertTokenAccountMultiInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK', TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Target account to be asserted */
        targetAccount: TAccountMetas[0];
    };
    data: AssertTokenAccountMultiInstructionData;
};
export declare function parseAssertTokenAccountMultiInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedAssertTokenAccountMultiInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=assertTokenAccountMulti.d.ts.map