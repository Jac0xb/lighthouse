/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address } from '@solana/addresses';
import { Program, ProgramWithErrors } from '@solana/programs';
import { LighthouseProgramError, LighthouseProgramErrorCode } from '../errors';
import { ParsedAssertAccountDataInstruction, ParsedAssertAccountDeltaInstruction, ParsedAssertAccountInfoInstruction, ParsedAssertAccountInfoMultiInstruction, ParsedAssertMerkleTreeAccountInstruction, ParsedAssertMintAccountInstruction, ParsedAssertMintAccountMultiInstruction, ParsedAssertStakeAccountInstruction, ParsedAssertStakeAccountMultiInstruction, ParsedAssertSysvarClockInstruction, ParsedAssertTokenAccountInstruction, ParsedAssertTokenAccountMultiInstruction, ParsedAssertUpgradeableLoaderAccountInstruction, ParsedAssertUpgradeableLoaderAccountMultiInstruction, ParsedMemoryCloseInstruction, ParsedMemoryWriteInstruction } from '../instructions';
export declare const LIGHTHOUSE_PROGRAM_ADDRESS: Address<"L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK">;
export type LighthouseProgram = Program<'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'> & ProgramWithErrors<LighthouseProgramErrorCode, LighthouseProgramError>;
export declare function getLighthouseProgram(): LighthouseProgram;
export declare enum LighthouseInstruction {
    MemoryWrite = 0,
    MemoryClose = 1,
    AssertAccountData = 2,
    AssertAccountDelta = 3,
    AssertAccountInfo = 4,
    AssertAccountInfoMulti = 5,
    AssertMintAccount = 6,
    AssertMintAccountMulti = 7,
    AssertTokenAccount = 8,
    AssertTokenAccountMulti = 9,
    AssertStakeAccount = 10,
    AssertStakeAccountMulti = 11,
    AssertUpgradeableLoaderAccount = 12,
    AssertUpgradeableLoaderAccountMulti = 13,
    AssertSysvarClock = 14,
    AssertMerkleTreeAccount = 15
}
export declare function identifyLighthouseInstruction(instruction: {
    data: Uint8Array;
} | Uint8Array): LighthouseInstruction;
export type ParsedLighthouseInstruction<TProgram extends string = 'L1TEVtgA75k273wWz1s6XMmDhQY5i3MwcvKb4VbZzfK'> = ({
    instructionType: LighthouseInstruction.MemoryWrite;
} & ParsedMemoryWriteInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.MemoryClose;
} & ParsedMemoryCloseInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertAccountData;
} & ParsedAssertAccountDataInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertAccountDelta;
} & ParsedAssertAccountDeltaInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertAccountInfo;
} & ParsedAssertAccountInfoInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertAccountInfoMulti;
} & ParsedAssertAccountInfoMultiInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertMintAccount;
} & ParsedAssertMintAccountInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertMintAccountMulti;
} & ParsedAssertMintAccountMultiInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertTokenAccount;
} & ParsedAssertTokenAccountInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertTokenAccountMulti;
} & ParsedAssertTokenAccountMultiInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertStakeAccount;
} & ParsedAssertStakeAccountInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertStakeAccountMulti;
} & ParsedAssertStakeAccountMultiInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertUpgradeableLoaderAccount;
} & ParsedAssertUpgradeableLoaderAccountInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertUpgradeableLoaderAccountMulti;
} & ParsedAssertUpgradeableLoaderAccountMultiInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertSysvarClock;
} & ParsedAssertSysvarClockInstruction<TProgram>) | ({
    instructionType: LighthouseInstruction.AssertMerkleTreeAccount;
} & ParsedAssertMerkleTreeAccountInstruction<TProgram>);
//# sourceMappingURL=lighthouse.d.ts.map