/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Address, ProgramDerivedAddress } from '@solana/addresses';
import { AccountRole, IAccountMeta } from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
/**
 * Asserts that the given value is not null or undefined.
 * @internal
 */
export declare function expectSome<T>(value: T | null | undefined): T;
/**
 * Asserts that the given value is a PublicKey.
 * @internal
 */
export declare function expectAddress<T extends string = string>(value: Address<T> | ProgramDerivedAddress<T> | TransactionSigner<T> | null | undefined): Address<T>;
/**
 * Asserts that the given value is a PDA.
 * @internal
 */
export declare function expectProgramDerivedAddress<T extends string = string>(value: Address<T> | ProgramDerivedAddress<T> | TransactionSigner<T> | null | undefined): ProgramDerivedAddress<T>;
/**
 * Asserts that the given value is a TransactionSigner.
 * @internal
 */
export declare function expectTransactionSigner<T extends string = string>(value: Address<T> | ProgramDerivedAddress<T> | TransactionSigner<T> | null | undefined): TransactionSigner<T>;
/**
 * Defines an instruction account to resolve.
 * @internal
 */
export type ResolvedAccount<T extends string = string, U extends Address<T> | ProgramDerivedAddress<T> | TransactionSigner<T> | null = Address<T> | ProgramDerivedAddress<T> | TransactionSigner<T> | null> = {
    isWritable: boolean;
    value: U;
};
/**
 * Add an account meta with a default role if only an address is provided.
 * @internal
 */
export declare function accountMetaWithDefault<TAccount extends string | IAccountMeta<string>, TRole extends AccountRole>(account: TAccount | undefined, role: TRole): (TAccount extends string ? {
    address: Address<TAccount>;
    role: TRole;
} : TAccount) | undefined;
/**
 * Defines an instruction that stores additional bytes on-chain.
 * @internal
 */
export type IInstructionWithByteDelta = {
    byteDelta: number;
};
/**
 * Get account metas and signers from resolved accounts.
 * @internal
 */
export declare function getAccountMetasWithSigners<TKey extends string = string>(accounts: Record<TKey, ResolvedAccount>, optionalAccountStrategy: 'omitted' | 'programId', programAddress: Address): Record<TKey, IAccountMeta | IAccountSignerMeta>;
export declare function isTransactionSigner<TAddress extends string = string>(value: Address<TAddress> | ProgramDerivedAddress<TAddress> | TransactionSigner<TAddress>): value is TransactionSigner<TAddress>;
export declare function memcmp(data: Uint8Array, bytes: Uint8Array, offset: number): boolean;
//# sourceMappingURL=index.d.ts.map