/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** InvalidInstructionData: Invalid instruction */
export declare class InvalidInstructionDataError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AssertionFailed: AssertionFailed */
export declare class AssertionFailedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NotEnoughAccounts: NotEnoughAccounts */
export declare class NotEnoughAccountsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** BumpNotFound: BumpNotFound */
export declare class BumpNotFoundError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountBorrowFailed: AccountBorrowFailed */
export declare class AccountBorrowFailedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** RangeOutOfBounds: RangeOutOfBounds */
export declare class RangeOutOfBoundsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** IndexOutOfBounds: IndexOutOfBounds */
export declare class IndexOutOfBoundsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** FailedToDeserialize: FailedToDeserialize */
export declare class FailedToDeserializeError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** FailedToSerialize: FailedToSerialize */
export declare class FailedToSerializeError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountOwnerMismatch: AccountOwnerMismatch */
export declare class AccountOwnerMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountKeyMismatch: AccountKeyMismatch */
export declare class AccountKeyMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountNotInitialized: AccountNotInitialized */
export declare class AccountNotInitializedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountOwnerValidationFailed: AccountOwnerValidationFailed */
export declare class AccountOwnerValidationFailedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountFundedValidationFailed: AccountFundedValidationFailed */
export declare class AccountFundedValidationFailedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountDiscriminatorValidationFailed: AccountDiscriminatorValidationFailed */
export declare class AccountDiscriminatorValidationFailedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountValidationFailed: AccountValidaitonFailed */
export declare class AccountValidationFailedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** CrossProgramInvokeViolation: CrossProgramInvokeViolation */
export declare class CrossProgramInvokeViolationError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getLighthouseErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getLighthouseErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
//# sourceMappingURL=lighthouse.d.ts.map